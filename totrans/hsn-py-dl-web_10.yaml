- en: 'DL on AWS Using Python: Object Detection and Home Automation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We familiarized ourselves with a few deep-learning-based offerings from Google
    Cloud Platform and learned how they can be used in [Chapter 6](093890b6-051d-49f9-9330-bdd58b92a762.xhtml),
    *Deep Learning on Google Cloud Platform Using Python*. Now that we have a fairly
    good overview of cloud computing, in this chapter, we will introduce another cloud
    computing platform, **Amazon Web Services** (**AWS**), which also offers some
    high-performing and highly reliable deep-learning-based solutions to make life
    easier. In this chapter, we are going to introduce two of them in the form of
    APIs and learn how they can be consumed from a Python program.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by setting up our AWS account and configuring boto3 in Python.
    We will then learn how to use the Rekognition API and the Alexa API in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS offerings in brief
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring boto3 in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Rekognition API in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Alexa API in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can access the code for this chapter at [https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter7](https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter7).
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the code in this chapter, you''ll need the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.6+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python PIL library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other installations will be described during the course of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before using any AWS services or APIs, you will have to create your AWS account.
    In this section, we will quickly go through the steps to create an account in
    AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to go to [https://aws.amazon.com/](https://aws.amazon.com/).
    You should land on a page that resembles the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c5749db-c62e-4e24-b514-9ca21e1afe34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then click on the Create an AWS Account button, which should take you to the
    following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69673107-63a9-4cbd-99da-9d9d8fc6876b.png)'
  prefs: []
  type: TYPE_IMG
- en: Fill in the fields and click on Continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The portal will ask for some more mandatory information from you. It will also
    ask you to register a payment method in order to verify your details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you do not provide this, you will not be entitled to use the free tier of
    AWS facilities.
  prefs: []
  type: TYPE_NORMAL
- en: Towards the very last step of your registration, you will be asked to choose
    between three plans—Free, Developer, and Business. Choose whichever is relevant
    to your needs and proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Like Google Cloud Platform, AWS also offers free tier access. When you sign
    up for AWS for the first time, you get to use a wide range of AWS services and
    products for free, but only up to a certain quota. You can go to [https://aws.amazon.com/free/](https://aws.amazon.com/free/)
    to learn more about this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get a page like the following once you follow the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ff22c05-d2b5-4d25-9f60-b37da3ec231c.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS has this beautiful feature of recommending solutions and services for its
    users. In order to make the most of this feature, you need to enter two things—your
    role and your subject of interest. You can see this in the preceding screenshot.
    Enter these two details and hit Submit for some targeted product recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to click on the Sign In to the Console button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are successfully logged in to your AWS console, you should see the
    following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe00e39b-59ba-4a1f-a61c-0f67d4cca381.png)'
  prefs: []
  type: TYPE_IMG
- en: The AWS console is the place where you can find all the services and solutions
    that AWS has to offer. Feel free to explore the complete set of services by clicking
    on the Services tab. You can also search for a particular service from the search
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: By now, our AWS accounts should be ready enough for us to get our hands dirty.
    In the next section, we'll review the offerings of AWS briefly to get a better
    sense of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: A short tour of the AWS offerings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS offers its services and solutions in a variety of domains. The following
    are the different types of module that AWS offers (the ones in brackets are the
    names of the different services offered by AWS):'
  prefs: []
  type: TYPE_NORMAL
- en: Compute (EC2, Lambda, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage (S3, Storage Gateway, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning (Amazon SageMaker, AWS DeepLens, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database (RDS, DynamoDB, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migration and transfer (Snowball, DataSync, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking and content delivery (CloudFront, VPC, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer tools (CodeStar, CodeCommit, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robotics (AWS RoboMaker)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blockchain (Amazon Managed Blockchain)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analytics (Athena, CloudSearch, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also many others, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e773d1e1-5b71-45f0-b465-66fc5d2902dd.png)'
  prefs: []
  type: TYPE_IMG
- en: The list is actually pretty extensive, but let's restrict our focus to machine
    learning (also known as deep learning) services for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: 'The search bar in the AWS console also lets you search for the AWS APIs that
    you may already have heard of. Let''s type `Rekognition` in there and hit *Enter*.
    You should be provided with the home page of Rekognition, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4df1029c-865e-4d73-8f88-fcb487bf9849.png)'
  prefs: []
  type: TYPE_IMG
- en: We will explore the Rekognition API in more detail later in the chapter. In
    the next section, we will learn how to use boto3 (an AWS SDK that provides a programming
    interface in Python) to interact with different AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with boto3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'boto3 is the official library for communicating with AWS APIs, provided by
    the AWS team. You can find the library at [https://aws.amazon.com/sdk-for-python/](https://aws.amazon.com/sdk-for-python/),
    and it can be installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation, you need to configure boto3 for use with your project.
    To configure boto3 ([https://bit.ly/2OvXAvb](https://bit.ly/2OvXAvb)), the first
    step is to get your AWS access keys from the **Identity and Access Management**
    (**IAM**) console. Go through the following steps to perform the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your AWS IAM console at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam).
    It will look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53fc5106-5219-4269-9ace-5c45edc32c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: On the preceding dashboard, you will be able to see the access keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Delete your root access keys** and then **Manage Security Credentials**.
    You will be presented with the following window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3bb72eab-b62e-42b6-9dee-6cd77653770d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand the **Access keys (access key ID and secret access key)** tab and get
    the access keys from there. You should get the following message once the keys
    are generated successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2426808b-f6a7-462d-9692-8162fc50efbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Download the key file and keep it in a secure place, as you will need this in
    order to configure boto3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring environment variables and installing boto3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have the access keys, create two environmental variables, `aws_access_key_id`
    and `aws_secret_access_key`. Now, assign their values accordingly with the help
    of the keys you have. The keys will have information that will help you distinguish
    between the key ID and the secret access key. Now that you have configured the
    necessary environment variables, we can start off by loading the environment variables
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Loading up the environment variables in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the library is successfully installed, you can load up the environment
    variables you just created with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once the environment variables are loaded up properly, we can call boto3 to
    interact with an AWS resource. Let's say you want to enlist the S3 buckets that
    you have in your AWS account and want to upload an image to a particular bucket.
    S3 is the AWS resource that you want to access. If you do not have any S3 buckets
    in your AWS account, no worries; you can quickly create one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an S3 bucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can quickly create an S3 bucket by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the home page of the S3 console at [https://s3.console.aws.amazon.com/s3](https://s3.console.aws.amazon.com/s3).
    It should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f02b3a1-2449-470f-a1ab-2ee93093e353.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Create bucket**. You will be asked to enter the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9399ac7-840c-447c-93be-18677c3b69ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Give a name for your bucket, leave everything as it is, and click on **Create**.
    Once the bucket is successfully created, you will be able to see it from the S3
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86871ff5-e121-4939-b639-80c9587e7c56.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will learn how to access S3 from Python code with boto3.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing S3 from Python code with boto3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can access your S3 bucket from Python code. The following lines of
    code will show you the available buckets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You specified that you are interested in accessing S3 in the first argument
    of the `resource()`. You can read the documentation at [https://bit.ly/2VHsvnP](https://bit.ly/2VHsvnP).
    You can now find the available buckets with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the list as the output. Now, say you want to upload an image
    to one of the buckets. Provided that the image you want to upload is in your current
    working directory, the following lines of code should upload an image to a particular
    S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines of code contain the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '`my_image.jpeg` is the path of the image you want to upload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the `Bucket()` method is the name of the S3 bucket that the image will
    be uploaded to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the code is successfully executed, you should receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify whether the image was uploaded by going to your AWS S3 console
    and then entering the bucket that you uploaded the image to. You should see something
    like the following in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea5a0e67-5997-4205-836e-532a4560ee54.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have configured boto3 successfully in Python, we can now move on
    to learn how to use the Rekognition and Alexa API in Python using boto3.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Rekognition API in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Rekognition is a deep-learning-enabled visual-analysis service that can
    help you search, verify, and analyze billions of images seamlessly. Let's first
    review the Recognition API briefly and then we will jump straight into using it
    in Python. Let's first go to the home page of the Rekognition API at [https://console.aws.amazon.com/rekognition/home](https://console.aws.amazon.com/rekognition/home).
    We have already seen Rekognition's home page in one of the earlier sections of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you might have already noticed from the navigation bar, the Rekognition
    API has several things to offer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object and scene detection**: This lets you automatically label objects,
    labels, and scenes from a given image (along with confidence scores).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image moderation**: This allows you to detect explicit or suggestive adult
    content in images, along with confidence scores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Celebrity recognition**: Using this, you can automatically recognize celebrities
    in images (along with confidence scores).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Face comparison**: This can be used to see how closely faces match based
    on a similarity percentage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these features, it has many more.
  prefs: []
  type: TYPE_NORMAL
- en: The solutions offered by the Rekognition API have proven to be extremely useful
    for a wide variety of organizations because they genuinely solve some real-world
    and challenging problems. You can try a quick demo of any of the solutions mentioned
    in the preceding list by clicking on their respective solutions on the API home
    page. Let's try the celebrity recognition solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to [https://console.aws.amazon.com/rekognition/home?region=us-east-1#/celebrity-detection](https://console.aws.amazon.com/rekognition/home?region=us-east-1#/celebrity-detection)
    (note that the region may vary). It should look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d0a60f8-7ee3-4e21-84ec-0679a3475f7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The portal will let you upload your own image and test it. Let''s test my image
    (we could have taken images of media celebrities, but those images are copyright
    protected). You can see the result as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48570a56-c2cb-48b9-8d36-309bf77bcf96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Feel free to try the other solutions as well. Let''s now see how the Rekognition
    API can be used from Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Jupyter Notebook. First off, you will want to create a new Jupyter
    notebook with the name of, say, `Sample.ipynb`. You will have to provide an image
    that you want to test for celebrity recognition using the AWS Rekognition API,
    as shown in the following directory structure screenshot of Jupyter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/036c3c11-7381-44b9-83a5-f2c6f4f0b71f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Import the environment variables for the credentials in your AWS account. You
    will need to import your account credentials into your script as you previously
    did in the boto3 configuration section. To do this, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an AWS Rekognition API client using boto3\. We are now ready to instantiate
    a boto3 Rekognition API client object. To do this, we need to pass the API that
    we wish to use to the `boto3` object, along with the AWS region name in which
    you wish to use the API. You will also have to pass in the credentials that you
    retrieved in the previous step, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Read the image from the disk and pass it to the API. There are two methods of
    posting files to AWS APIs from the boto3 SDK. Firstly, you could send them directly
    from an S3 bucket that you have permissions for, or you could send the image as
    a `Bytes` array from your local disk. We have already seen how you can find images
    from S3 buckets in the previous section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We shall now show you an example where we take a number of images from the
    local disk and pass them in an API call:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, read the image into a variable using Python''s native method to open
    a file, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to pass it to the API through the client we instantiated earlier, use
    the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the response. Once the API call has succeeded, your `response` variable
    will hold the information returned by the API. To see it, print the variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The API recognizes our image as that of Barack Obama. It gives us a lot of other
    useful information, such as the `BoundingBox` where the face was matched, the
    `Confidence` of the prediction, the location of the eyes, mouth, and nose, and
    so on. We can use this information to further operate on the image—say, to simply
    crop out the matched part.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the matched part of the image. To prepare a cropped version of the image
    in the places where it was recognized, we can use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following image as the final result, which is the bounding
    box generated by the API for performing celebrity recognition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/175087bb-bb71-47a3-80ae-81095e96551f.png)'
  prefs: []
  type: TYPE_IMG
- en: On further exploration of the boto3 API for AWS, you'll realize that it is capable
    of handling all AWS services, and is not just limited to the Rekognition API.
    This means that, based on the API specification requirements, the preceding sample
    code can be used for nearly all the available APIs, with small modifications.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we'll take a look at Alexa, a flagship offering by
    Amazon for building voice interfaces that can span in their capabilities from
    being a chatbot to a virtual personal assistant. We'll learn how we can build
    a simple home automation solution using Alexa.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Alexa API in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Alexa is a voice-based personal assistant developed by Amazon. The product
    first featured as an interface for Amazon Echo devices, which went on to inspire
    the Google Home devices by Google, which use Google Assistant. Other competitors
    of Alexa are Microsoft's Cortana and Apple's Siri. As a virtual assistant, Alexa
    can easily set up calls, schedule meetings, or play songs. The various tasks that
    Alexa can perform are called *skills* in the Alexa terminology, which we'll be
    following in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Skills in Alexa are the main core of how we can bring functionality to the platform.
    Each skill needs to be invoked from the primary interface of Alexa, whereupon
    the skill takes over the entire functionality unless the program logic completes
    or the user explicitly asks for the skill to end. Skills apply the logic for the
    task to be performed, and so this logic needs to be stored somewhere, perhaps
    also along with a database and execution runtime. While a lot of skills are hosted
    over several services, such as Heroku, PythonAnywhere, GCP, and others, it is
    very common to host skills, logic code as AWS Lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we shall be creating a sample Home Automation Alexa skill using
    the Python SDK for Alexa and will host it on AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites and a block diagram of the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can jump into building an Alexa skill, you will need the following
    two types of accounts on AWS and Amazon Developer respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: An AWS account (the free tier works)—[aws.amazon.com](https://aws.amazon.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Amazon Developer account (this is free)—[developer.amazon.com](https://developer.amazon.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have created these accounts—the process of which is beyond the scope
    of this book—you can proceed to create our skill for home automation. The architecture
    of the Home Automation skill we shall be creating is shown in the following block
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc3b9bf7-c327-4b8b-ab37-7039b36c77f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In building this skill, we shall be using the following services, which you
    can read more about by going to the links in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Alexa Skills Kit:** [https://developer.amazon.com/alexa-skills-kit](https://developer.amazon.com/alexa-skills-kit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Login with Amazon:** [https://developer.amazon.com/docs/login-with-amazon/minitoc-lwa-overview.html](https://developer.amazon.com/docs/login-with-amazon/minitoc-lwa-overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS CloudWatch:** [https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon DynamoDB:** [https://aws.amazon.com/dynamodb/](https://aws.amazon.com/dynamodb/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Lambda:** [https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a configuration for the skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Skills require a certain amount of connection between the services in order
    to work. In addition, the skill logic deployed on AWS Lambda needs to be configured
    to be used by the skill on Alexa. Create a `setup.txt` file in the root of your
    working folder with the following content. We shall be gradually adding to this
    content as we progress through the steps in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Throughout the following sections, we will be referring to this file as `setup.txt`.
    This essentially only holds information about your skill. Feel free to implement
    this in any other text editor as well, such as Google Docs.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Login with Amazon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the Home Automation skill, you will need the Login with Amazon service
    enabled. To do this, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://developer.amazon.com/lwa/sp/overview.html](https://developer.amazon.com/lwa/sp/overview.html).
    You will see the page shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4afa1398-744c-4718-bb55-0a9209e8ed04.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Create a New Security Profile button on the page that then loads.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set Security Profile Name as `Smart Home Automation Profile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a description of the profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Content Privacy Notice URL, you will need a valid privacy policy web page
    to push the skill to production. Create and host a privacy policy and provide
    the link to it in this field. A very handy tool for creating privacy policies
    can be found at [https://app-privacy-policy-generator.firebaseapp.com/](https://app-privacy-policy-generator.firebaseapp.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Security Profile option in the gear menu that appears on the next
    page. You will be taken to the Security Profile Management page, as shown in the
    following image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6baa4f01-2672-49cb-9e03-6dd1f0902cac.png)'
  prefs: []
  type: TYPE_IMG
- en: From the list of security profiles, click the Web Settings tab to the Show Client
    ID and Client Secret link for the Home Automation Profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the displayed Client ID and Client Secret values and save them to the `setup.txt`
    file in the working directory, replacing the format example entries for `[LWA
    Client ID]` and `[LWA Client Secret]` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep this tab open for future steps. Go through the steps in the next section
    in a new browser tab.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can now proceed with creating the skill:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log on to [https://developer.amazon.com/alexa/console/ask](https://developer.amazon.com/alexa/console/ask)
    to begin the process. You will be able to see a screen resembling the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e055cf24-cc4d-4caf-87a6-b5187a26a92a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Create Skill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the name to `Home Automation Skill`, or a name of your choosing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Choose a model to add to your skill section, click on the Smart Home
    model. Your selections should now resemble the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/15bd4a33-02ec-4ab9-b0fc-7cd83f015eec.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Create Skill to complete the initial phase of the skill creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page that appears, you'll be able to see the Skill ID. Copy this
    Skill ID to the `setup.txt` file in the local working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do not close this tab, as you still have fields to fill in here. Open up a new
    browser tab to work in in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can add the ARN for the Lambda function to the skill endpoints configuration,
    we must create a configuration for the Lambda function. You can do this by going
    through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://console.aws.amazon.com/iam/home#/policies](https://console.aws.amazon.com/iam/home#/policies).
    You will be presented with a screen like the one shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fdc474a-3051-4bab-9698-8a9d883cb2f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Create policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following JSON in the JSON tab of the Create policy editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Click on Review policy and set the name of the policy to `HomeAutomationPolicy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, on the left-hand navigation menu of the page, click on Roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select AWS service and Lambda, and click on Next: Permissions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for HomeAutomationPolicy in the filtering field. Check the policy. Your
    screen should resemble the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38f026ca-5a81-427f-ad3c-dc5efa7357de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Next: Tags.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Next: Review.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Role name to `lambda_home_automation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now create the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the suitable configuration for the Lambda function in place, we can now
    create the Lambda function itself. To do so, in the AWS console, navigate to [https://console.aws.amazon.com/lambda/home](https://console.aws.amazon.com/lambda/home?region=us-east-1)
    and go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Create function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the function name to `homeAutomation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Python 3.6` runtime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the `lambda_home_automation` role from the dropdown in the existing roles
    in the execution roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Create function`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the Lambda ARN from the next page that appears, which has a message of
    congratulations for creating the Lambda function. Put this ARN in the `setup.txt`
    of our local working directory in the [AWS Lambda ARN] field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, the screen should resemble the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/c27dff75-763d-479c-aea9-4846c6cd2e08.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the triggers and destinations displayed on your screen might differ
    from the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-hand navigation, click on Add trigger to bring up the drop-down
    list of available triggers for your Lambda function, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c5d75a8-1315-43f1-87d7-961a97ea98c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Alexa Skills Kit to bring up the configuration dialogue for this trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the Alexa Skill ID in the field for Skill ID. We have stored this value
    in the `setup.txt` previously, and it will look like `amzn1.ask.skill.xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add to add the trigger and return to the Lambda function management
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save at the top right of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the final step, the trigger section will display details of the connected
    Alexa skill. If it does not, you should check that you have correctly followed
    the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Alexa skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to configure the skill that we left open in another tab of the
    browser. We will do this by going through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to that tab and fill in the ARN of the Lambda function in the Default
    endpoint field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on SAVE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Setup Account Linking at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Authorization URL, enter `https://www.amazon.com/ap/oa`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Access Token URL, enter `https://api.amazon.com/auth/o2/token`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Client ID field, copy `[LWA Client ID]` from the `setup.txt` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Client Secret field, copy `[LWA Client Secret]` from the `setup.txt`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add scope and enter `profile:user_id`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the Redirect URLs from the bottom of the page and paste them in the `setup.txt`
    file under the [APIs] section. The URLs resemble the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81841ec1-c702-47ac-84d3-11fc81c679bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Security Profile Management browser tab, click on the Web Settings tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Edit, and add the three redirect URLs to the Allowed Return URLs field.
    You will have to click on Add another to enter multiple URLs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now set up Amazon DynamoDB for the skill.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Amazon DynamoDB for the skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the skill to be able to save data from users, it needs a database. We will
    be using the Amazon DynamoDB service for this. The steps to set up the service
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.aws.amazon.com/dynamodb/home?region=us-east-1](https://console.aws.amazon.com/dynamodb/home?region=us-east-1).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create table button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the Table name as `SmartHome`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Primary key, enter `ItemId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave all defaults as they are and click on Create. Your screen should resemble
    the following screenshot in this step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1615057-9eee-451a-aa6e-49226c642255.png)'
  prefs: []
  type: TYPE_IMG
- en: You can then go to the DynamoDB dashboard to see the table you just created;
    however, this can take a few moments.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the code for the AWS Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're left with the final piece of the setup—the code that provides the logic
    to the AWS Lambda function. Go to your Lambda function configuration page and
    scroll down to the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that the editor has a two-column interface: the left column
    displays the files in the Lambda function storage and in the right column, you
    can edit those files, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83315a84-c753-4f37-980c-a9b5dd4e5ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on `lambda_function.py` to begin editing the file and go through the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary modules. For the function to work, we will need the support
    of some common libraries, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The boto3 API is used to connect to the Amazon DynamoDB instance we set up.
    The JSON module facilitates the generation of responses for the Alexa skill. The
    rest of the modules help to generate responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `AlexaResponse` class. In order to be able to fully replicate the
    Alexa skill''s expected format of responses, we can quickly set up a helper class
    that can generate the responses for the Lambda function calls. Let''s name it
    `AlexaReponse`; the initialization of the class is shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding initialization method for the `AlexaResponse` class sets the
    expected output format and the various constant settings, such as the version
    number for the payload, and some basic validation for the output object. Next,
    we create the method for adding content properties and another method for setting
    cookies in the responses. Finally, another method is added to set up the payload
    endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now to define the three handler methods that we created in the previous step.
    The methods declared in the previous step depend upon inner methods of their own.
    These are mostly helper functions, which have little to do with the major focus
    of this chapter, and so we will leave these up to your implementation of the function,
    which you can create by studying the response body documentation of AWS Lambda
    functions and Alexa skills. A sample implementation can be found in our code repository
    for this chapter, between lines 65 and 102 of the `lambda_function.py` file at
    [http://tiny.cc/HOPDLW_CH7_lfpy](http://tiny.cc/HOPDLW_CH7_lfpy).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will set up methods to generate the final response from the `AlexaResponse`
    class. Finally, we create methods that assimilate all the different parts—the
    context, event, payload, endpoints, and cookies—into a single object that is ready
    for interaction with the Alexa skill:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `AlexaResponse` class is now complete. We will now move on to connect with
    the DynamoDB service using the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the primary method and entry point for the file—the `lambda_handler`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We will continue adding to the preceding method for the rest of this step.
    In the preceding lines, we declare the `lambda_handler` method, which accepts
    the `request` and `context` objects from the Alexa skill. It then makes a JSON
    dump of the request so that we can later observe it from the Amazon CloudWatch
    dashboard. Next, it makes of a dump of the context if any was attached to the
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We then validate whether we have a valid Alexa directive in the request, and
    if none is found, an error message is generated and sent back as the response.
    Note the usage of the `AlexaResponse` class object here. We will be using it in
    the future to generate responses from this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, another check is made to ensure that the payload version being requested
    is 3\. This is because we have only developed it for the Smart Home API version
    3 of Alexa:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we open the request and see what is being requested:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we handle the incoming request from Alexa based on the `namespace`. Note
    that this sample accepts any `grant` request, but in your implementation, you
    will use the code and token to get and store access tokens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding condition acts on the Alexa authorization request.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the discovery and the action to turn off the switch, we use the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This sample always returns a `success` response for either a request to `TurnOff`
    or `TurnOn.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we check for an error when setting the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we extract the directive name and the namespace of the directive to
    determine the type of response to be sent back. Depending upon the directives
    being sent, a different response is generated and finally sent using the `AlexaResponse`
    class object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the usage of the `send_response` method in the code in the previous step.
    We need to define that method. Its task is to send the `AlexaResponse` object
    in JSON format and to log it for observation in Amazon CloudWatch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `device state` method. Since we''re building automation for a simple
    switch device using Alexa, we''ll need to maintain the state information of the
    switch. We do this by storing its state in DynamoDB. We will add an update method
    for this, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will test the Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can now check whether our function responds properly. To do this, we must
    create a test in the Lambda function''s dashboard by going through these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Lambda function page for the function that we created in the previous
    sections, at the top right, click on Test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A dialog box will appear with the options to write a new test or use an existing
    one. Choose the option to Create new test event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Event template, make that sure Hello World is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, provide the Event name of `directiveDiscovery`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following JSON into the editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, your screen should resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72352241-b56d-4536-b083-daebba4c21cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Scroll down and click on Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you return to the Lambda function dashboard, at the top right, select the
    `directoryDiscover` test from the dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On completion, the test will display the response status and the response of
    the Lambda function. You can see the results on the page at the top of the Lambda
    function dashboard, which will resemble the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff23d8a3-8380-4e37-949f-efd3614544ca.png)'
  prefs: []
  type: TYPE_IMG
- en: If the test fails, make sure you have followed the preceding steps carefully,
    making sure that the regions in which the different services exist are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the AWS Home Automation skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the last phase of this project, we will be testing our skill in the Alexa
    Test simulator. To do this, go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://alexa.amazon.com](https://alexa.amazon.com/) and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Skills in the left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Your Skills at the top right of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the DEV SKILL tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on HomeAutomationSkill. You should see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/246d6e58-cde0-45cd-9ad1-0f7dd1f02154.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Enable button. You will be asked to allow access permissions to
    your Developer account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Come back to the Alexa Developer console and click on Discover devices. A new
    device called Sample Switch will be shown as available, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77383ecb-ff77-43fa-99ae-c06f245dd01e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, go to the Test tab on the Alexa Skills Kit development page for the HomeAutomation
    skill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the simulator, type `alexa, turn on the sample switch`. If the request is
    accepted, then you will receive an `OK` from Alexa, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40856d4c-4de8-458c-b4e7-83073a821f59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check whether the skill is actually working, you can go to your DynamoDB
    table SmartHome and switch to the Items tab of the table. You should be able to
    see the following record:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0949a1c-45e6-49d6-af20-309f9b4dd0a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations on successfully building a simple Home Automation skill in Alexa!
    You can play around with this skill and build your own home automation skills
    for Alexa. Once you are ready to publish them for a wider audience, you can follow
    the advice in the documentation available at [https://developer.amazon.com/docs/alexa-for-business/create-and-publish-private-skills.html](https://developer.amazon.com/docs/alexa-for-business/create-and-publish-private-skills.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how we can use AWS using its Python API—boto3\.
    We explored the various options and configurational requirements for using the
    API and looked at an example of how to use it with the Rekognition API for recognizing
    celebrities. We then dove deep into how to create an Alexa skill for home automation,
    setting up the simple task of turning a switch on/off. This can be very easily
    extrapolated to other smart home devices. We looked at how Alexa skill logic can
    be hosted over AWS Lambda and observed from AWS CloudWatch. We also explored the
    storage of dynamic device data in Amazon DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming chapter, we will see how we can use deep learning on Microsoft's
    Azure platform using Python.
  prefs: []
  type: TYPE_NORMAL
