- en: Making Quality Product Recommendations Using TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you visit Amazon, Netflix, or your other favorite websites, or use any
    modern app such as Spotify or Pandora, you will have noticed that they recommend
    different items to you. These recommendations are created using recommendation
    system algorithms. Before machine learning based recommendations systems, the
    recommendations were generated with rule-based systems. However, with the advent
    of machine learning and neural networks, recommendations have become more accurate.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll learn about recommendation systems. We'll use the Retailrocket
    dataset to implement a recommendation system in two different ways, using TensorFlow
    and Keras.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-based filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matrix factorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Retailrocket dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Retailrocket dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocessing the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The matrix factorization model for Retailrocket recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The neural network model for Retailrocket recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendation systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most common applications of machine learning systems is to recommend
    things to users that they''ll be interested in. Have you noticed how Spotify and
    Pandora recommend a certain kind of music, or particular songs or radio stations?
    You may have observed Netflix recommending movies for you, as well, as in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb82990e-16df-4071-94c2-0606431b38b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'How about Amazon recommending books based on the book that you are currently
    browsing, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7875ab6-8be8-4ede-ab89-0a5db8b9473b.png)'
  prefs: []
  type: TYPE_IMG
- en: Such systems are known as recommendation systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'A recommendation system is one that learns about what items might be of interest
    to a user, and then recommends those items for buying, renting, listening, watching,
    and so on. Recommendation systems are broadly classified into two categories:
    content-based filtering and collaborative filtering.'
  prefs: []
  type: TYPE_NORMAL
- en: Content-based filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Content-based filtering is based on creating a detailed model of the content
    from which recommendations are made, such as the text of books, attributes of
    movies, or information about music. The content model is generally represented
    as a vector space model. Some of the common models for transforming content into
    vector space models are TFIDF, the *Bag-of-words* model, Word2Vec, GloVe, and
    Item2Vec.
  prefs: []
  type: TYPE_NORMAL
- en: Along with the content model, a user profile is also created using information
    about the user. Content is recommended based on matching the user profile with
    the content model.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of content-based filtering algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the advantages of content-based filtering algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Eliminates the cold-start problem for new items:** If we have enough information
    about the users, and detailed information about the new content, then the cold-start
    problem found in collaborative filtering algorithms does not affect content-based
    algorithms. The recommendation can be made based on the user profile and the information
    about the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The recommendations are explainable and transparent:** Using content representation
    models, we''ll be able to explain how certain items are selected for recommendations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages of content-based filtering algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the disadvantages of content-based filtering algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: Content-based filtering algorithms require detailed information about items
    and content, which is sometimes not available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-based filtering algorithms are prone to overspecialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Collaborative filtering algorithms do not need detailed information about the
    user or the items. They build models based on user interactions with items such
    as song listened, item viewed, link clicked, item purchased or video watched.
    The information generated from the user-item interactions is classified into two
    categories: implicit feedback and explicit feedback:'
  prefs: []
  type: TYPE_NORMAL
- en: Explicit feedback information is when the user explicitly assigns a score, such
    as a rating from 1 to 5 to an item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implicit feedback information is collected with different kinds of interaction
    between users and items, for example, view, click, purchase interactions in the
    Retailrocket dataset that we will use in our example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further collaborative filtering algorithms can be either user-based or item-based.
    In user-based algorithms, interactions between users are focused on to identify
    similar users. Then the user is recommended items that other similar users have
    bought or viewed. In item-based algorithms, first, the similar items are identified
    based on item-user interactions, and then items similar to the current item are
    recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hybrid systems leverage the power of both content-based and collaborative filtering
    by combing both methods. There are many ways hybrid systems are implemented, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating ensembles of content-based and collaborative filtering algorithms and
    combining the recommendations of both types of algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing collaborative filtering with content details and user information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding user-item interaction models to content-based filtering algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reader is encouraged to explore more about the three kinds of recommendation
    systems. We'll explore how to build recommendation systems with matrix factorization
    and neural networks in the Retailrocket dataset example in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Matrix factorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matrix factorization is a popular algorithm for implementing recommendation
    systems and falls in the collaborative filtering algorithms category. In this
    algorithm, the user-item interaction is decomposed into two low-dimensional matrices.
    For example, let's say all the visitor-item interactions in our dataset are M
    x N matrix, denoted by A. Matrix factorization decomposes matrix A into two matrices
    of M x k and k x N dimensions respectively, such that the dot product of these
    two can approximate matrix A. Some of the more popular algorithms for finding
    the low-dimensional matrix are based on **Singular Value Decomposition** (**SVD**).
    In the following example, we'll use the TensorFlow and Keras libraries to implement
    matrix factorization.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Retailrocket dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we shall showcase a recommendation system algorithm using the
    Retailrocket dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The Retailrocket dataset is available from the Kaggle website, at [https://www.kaggle.com/retailrocket/ecommerce-dataset](https://www.kaggle.com/retailrocket/ecommerce-dataset).
  prefs: []
  type: TYPE_NORMAL
- en: 'We download the dataset using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The downloaded files are moved into the `~/datasets/kaggle-retailrocket` folder. You
    can keep it in whichever folder you feel comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Retailrocket dataset comes in three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`events.csv`: This file contains the visitor-item interaction data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_properties.сsv`: This file contains item properties'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category_tree.csv`: This file contains the category tree'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data contains the values collected from an e-commerce website but has been
    anonymized to ensure the privacy of the users. The interaction data represents
    interactions over a period of 4.5 months.
  prefs: []
  type: TYPE_NORMAL
- en: 'A visitor can engage in three categories of events: `view`, `addtocart`, or
    `transaction`. The dataset has a total of 2,756,101 interactions that include
    2,664,312 `view` events, 69,332 `addtocart` events, and 22,457 `transaction` events.
    The interactions are from 1,407,580 unique visitors.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the data contains the user-item interactions and not the explicit ranking
    of items by users, it, therefore, falls under the category of implicit feedback
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Retailrocket dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's load the dataset and explore it to learn more about the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the path to the folder where we downloaded the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the `events.csv` in a pandas DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The events data has the five columns of `timestamp`, `visitorid`, `event`,
    `itemid`, and `transactionid`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the unique items, users, and transactions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the kinds of events that we mentioned earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We see the three kinds of events that we described before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Pre-processing the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fields `visitorid` and `itemid` are already numeric, but we still need to convert
    the events into numeric values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We convert `view` events to `1`, `addtocart` events to `2`, and `transaction`
    events to `3` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Drop the `transcationid` and `timestamp` columns that we don''t need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Shuffle the dataset to get random data for training and test datasets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataset can also be shuffled with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Split the data in `train`, `valid`, and `test` sets, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `train` and `test` data is printed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The matrix factorization model for Retailrocket recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create a matrix factorization model in Keras:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Store the number of visitors and items in a variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the number of latent factors for embedding to `5`. You may want to try
    different values to see the impact on the model training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the Input, Embedding, and Flatten layers from the Keras library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Start with the items – create an input layer for them as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an Embedding representation layer and then flatten the Embedding layer
    to get the output in the number of latent dimensions that we set earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, create the vector space representation for the visitors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a layer for the dot product of both vector space representations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Build the Keras model from the input layers, and the dot product layer as the
    output layer, and compile it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The model is summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the model is complicated, we can also draw it graphically using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the layers and output sizes clearly in this plotted visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88232a90-7a0b-4964-9a4b-195d3ead67f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s train and evaluate the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The training and evaluation loss will be very high. We can improve this by using
    advanced methods for matrix factorization.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's build the neural network model to provide the same recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: The neural network model for Retailrocket recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this model, we set two different variables for latent factors for users
    and items but set both of them to `5`. The reader is welcome to experiment with
    different values of latent factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Build the item and visitor embeddings and vector space representations the
    same way we built earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of creating a dot product layer, we concatenate the user and visitor
    representations, and then apply fully connected layers to get the recommendation
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Define and compile the model as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how this model looks visually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd18aa42-3786-4c6d-bb49-762d635a2e69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Train and evaluate the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We get a pretty good accuracy with a very low error rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: That's it. We encourage the reader to learn more about different recommendation
    system algorithms and try implementing them with Retailrocket or other publicly
    available datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about recommendation systems. We learned about different
    kinds of recommendation systems such as collaborative filtering, content-based
    filtering, and hybrid systems. We used the Retailrocket dataset to create two
    models of our recommendation system, one with matrix factorization, and one using
    a neural network. We saw that the neural network model gave pretty good accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn about object detection at large scale with
    distributed TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enhance your understanding by practicing the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the various algorithms for implementing vector space models for text-based
    content?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the various advanced algorithms for collaborative filtering?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we handle overfitting in collaborative filtering models?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Experiment with different algorithms apart from the ones implemented in this
    chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Experiment with different values of latent factors for visitors and items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ll learn more by reading the following materials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tutorials and articles on recommender systems at the following link: [http://recommendation-systems.org](http://recommender-systems.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recommendation Systems Handbook **2nd ed.* by Francesco Ricci, Lior Rokach,
    and Bracha Shapira, 2015.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recommendation Systems: The Textbook.* by Charu C. Aggarwal, 2016.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
