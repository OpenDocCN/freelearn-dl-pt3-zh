["```\n    docker run -d -p <LOCAL_PORT>:8080 -v <LOCAL_DIR>:/home <CONTAINER_REGISTRY>\n    ```", "```\n    8080 inside the Docker image. Notice that the preceding command maps local port 8080 to the Docker image's port 8080. The first 8080 is your local port, the second 8080 is the port number used by JupyterLab inside the Docker image environment. Again, the local port number doesn't have to be 8080.\n    ```", "```\n    iris.to_csv('/home/iris-write-from-docker.csv', index=False)\n    ```", "```\n    docker ps\n    ```", "```\n    CONTAINER ID        IMAGE                                              COMMAND                  CREATED             STATUS              PORTS                    NAMES\n    553cfd198067        gcr.io/deeplearning-platform-release/tf2-cpu.2-1   '/entrypoint.sh /run…'   44 minutes ago      Up 44 minutes       0.0.0.0:8080->8080/tcp   intelligent_goldwasser\n    ```", "```\n    docker stop 553cfd198067\n    ```", "```\n    params = {'min_death': 1000,\n             \t\t'topn': 10}\n    ```", "```\n    %%bigquery myderiveddata  --params $params\n    SELECT country_region,  MAX(confirmed) as total_confirmed, MAX(deaths) AS total_deaths \n    FROM `bigquery-public-data.covid19_jhu_csse.summary`\n    GROUP BY country_region \n    HAVING (total_deaths > @min_death) \n    ORDER BY total_deaths DESC \n    LIMIT @topn \n    ```", "```\n    myderiveddata\n    ```", "```\ntype(myderiveddata) \n```", "```\nparams = {'min_death': 1000,\n```", "```\n          'topn': 10}\n```", "```\n%%bigquery myderiveddata --params $params\n```", "```\nSELECT country_region,  MAX(confirmed) as total_confirmed, MAX(deaths) AS total_deaths \n```", "```\nFROM `bigquery-public-data.covid19_jhu_csse.summary`\n```", "```\nGROUP BY country_region \n```", "```\nHAVING (total_deaths > @min_death) \n```", "```\nORDER BY total_deaths DESC \n```", "```\nLIMIT @topn\n```", "```\nprint(myderiveddata)\n```"]