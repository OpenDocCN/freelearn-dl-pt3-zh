["```\n    pip install yfinance\n    ```", "```\nimport yfinance as yf\nticker =  yf.Ticker(\"BTC-USD\")\nhistoric_data = ticker.history(period='max')\n```", "```\ndef train(self, data=None, epochs=300, verbose=0, batch_size=1): \n    self.train_history = self.model.fit(x=self.X, y=self.Y, \\\n                                        batch_size=batch_size, \\\n                                        epochs=epochs, \\\n                                        verbose=verbose, \\\n                                        shuffle=False)\n    self.last_trained = datetime.now()\\\n    .strftime('%Y-%m-%d %H:%M:%S') \n    return self.train_history\n```", "```\nX_train_new, Y_train_new = load_new_data()\nmodel.fit(x=X_train_new, y=Y_train_new, batch_size=1, \\\n          epochs=100, verbose=0)\n```", "```\nM = Model(data=model_data[0*7:7*40 + 7], variable='close', \\\n          predicted_period_size=7)\nM.build()\nM.train()\nfor i in range(41, 52):\n    j = i - 40\n    M.train(model_data.loc[j*7:7*i + 7])\n```", "```\nold_data = model_data[0*7:7*48 + 7]\nnew_data = model_data[0*7:7*49 + 7]\nM = Model(data=old_data,\\\n          variable='close', predicted_period_size=7)\nM.build()\nM.train()\nM = Model(data=new_data,\\\n          variable='close', predicted_period_size=7)\nM.build()\nM.train()\n```", "```\n    $ jupyter-lab\n    ```", "```\n    import yfinance as yf\n    ticker =  yf.Ticker(\"BTC-USD\")\n    historic_data = ticker.history(period='max')\n    ```", "```\n    historic_data.head(3)\n    ```", "```\n    start_date = '01-01-2019'\n    end_date = '31-12-2019'\n    mask = ((historic_data['date'] \\\n             >= start_date) & (historic_data['date'] \\\n             <= end_date))\n    model_data = historic_data[mask]\n    ```", "```\n    M = Model(data=model_data, \\\n              variable='close', predicted_period_size=7)\n    M.build()\n    M.train()\n    M.predict(denormalized=True)\n    ```", "```\n    M.train(epochs=100, verbose=1)\n    ```", "```\n    results = []\n    for i in range(A, B): \n        M.train(model_data[C:D])\n        results.append(M.evaluate())\n    ```", "```\n    results = []\n    for i in range(41, 52):\n        j = i-40\n        print(\"Training model {0} for week {1}\".format(j,i))\n        M.train(model_data.loc[j*7:7*i+7])\n        results.append(M.evaluate())\n    ```", "```\n    Training model 1 for week 41\n    Training model 2 for week 42\n    Training model 3 for week 43\n    Training model 4 for week 44\n    Training model 5 for week 45\n    Training model 6 for week 46\n    Training model 7 for week 47\n    Training model 8 for week 48\n    Training model 9 for week 49\n    Training model 10 for week 50\n    Training model 11 for week 51\n    ```", "```\n    array([7187.145 , 7143.798 , 7113.7324, 7173.985 , 7200.346 ,\n           7300.2896, 7175.3203], dtype=float32)\n    ```", "```\n    old_data = model_data[0*7:7*48 + 7]\n    new_data = model_data[0*7:7*49 + 7]\n    ```", "```\n    M = Model(data=old_data,\\\n              variable='close', predicted_period_size=7)\n    M.build()\n    M.train()\n    ```", "```\n    FROM python:3.6 \n    ENV TZ=America/New_York\n    \"\"\"\n    Setting up timezone to EST (New York)\n    Change this to whichever timezone your data is configured to use.\n    \"\"\"\n    RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n    COPY . /cryptonic\n    WORKDIR \"/cryptonic\"\n    RUN pip install -r requirements.txt\n    EXPOSE 5000\n    CMD [\"python\", \"run.py\"]\n    ```", "```\n    $ docker build --tag cryptonic:latest\n    ```", "```\n    $ docker run --publish 5000:5000 \\\n    --detach cryptonic:latest\n    ```", "```\n    version: \"3\" \n       services:\n          cache:\n             image: cryptonic-cache:latest\n             build:\n                context: ./cryptonic-cache\n                dockerfile: ./Dockerfile\n             volumes:\n                - $PWD/cache_data:/data\n             networks:\n                - cryptonic\n          cryptonic:\n             image: cryptonic:latest\n             build:\n                context: .\n                dockerfile: ./Dockerfile\n             ports:\n                - \"5000:5000\"\n             environment:\n                - BITCOIN_START_DATE=2019-01-01\n                - EPOCH=50\n                - PERIOD_SIZE=7\n    ```", "```\n    $ docker-compose up -d\n    ```", "```\n    {\n      message: \"API for making predictions.\",\n      period_length: 7,\n        result: [ 15847.7,\n          15289.36,\n          17879.07,\n          …\n          17877.23,\n          17773.08\n        ],\n        success: true,\n        7\n    }\n    ```"]