["```\nfrom datasets import load_dataset\ndataset = load_dataset(\"squad\") \n```", "```\nfor q, a in zip(dataset[\"train\"][\"question\"][:5], dataset[\"train\"][\"answers\"][:5]):\n    print(f\"{q} -> {a}\") \n```", "```\nTo whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? -> {'text': ['Saint Bernadette Soubirous'], 'answer_start': [515]}\nWhat is in front of the Notre Dame Main Building? -> {'text': ['a copper statue of Christ'], 'answer_start': [188]}\nThe Basilica of the Sacred heart at Notre Dame is beside to which structure? -> {'text': ['the Main Building'], 'answer_start': [279]}\nWhat is the Grotto at Notre Dame? -> {'text': ['a Marian place of prayer and reflection'], 'answer_start': [381]}\nWhat sits on top of the Main Building at Notre Dame? -> {'text': ['a golden statue of the Virgin Mary'], 'answer_start': [92]} \n```", "```\ndef compute_end_index(answers, contexts):\n    \"\"\" Add end index to answers \"\"\"\n\n    fixed_answers = []\n    for answer, context in zip(answers, contexts):\n        gold_text = answer['text'][0]\n        answer['text'] = gold_text\n        start_idx = answer['answer_start'][0]\n        answer['answer_start'] = start_idx\n\n        # Make sure the starting index is valid and there is an answer\n        assert start_idx >=0 and len(gold_text.strip()) > 0:\n\n        end_idx = start_idx + len(gold_text)        \n        answer['answer_end'] = end_idx\n\n        # Make sure the corresponding context matches the actual answer\n        assert context[start_idx:end_idx] == gold_text\n\n        fixed_answers.append(answer)\n\n    return fixed_answers, contexts\ntrain_questions = dataset[\"train\"][\"question\"]\nprint(\"Training data corrections\")\ntrain_answers, train_contexts = compute_end_index(\n    dataset[\"train\"][\"answers\"], dataset[\"train\"][\"context\"]\n)\ntest_questions = dataset[\"validation\"][\"question\"]\nprint(\"\\nValidation data correction\")\ntest_answers, test_contexts = compute_end_index(\n    dataset[\"validation\"][\"answers\"], dataset[\"validation\"][\"context\"]\n) \n```", "```\nfrom transformers import BertTokenizerFast\ntokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased') \n```", "```\ncontext = \"This is the context\"\nquestion = \"This is the question\"\ntoken_ids = tokenizer(\n    text=context, text_pair=question,\npadding=False, return_tensors='tf'\n)\nprint(token_ids) \n```", "```\n{\n    'input_ids': <tf.Tensor: shape=(1, 11), dtype=int32, numpy=array([[ 101, 2023, 2003, 1996, 6123,  102, 2023, 2003, 1996, 3160,  102]])>, \n    'token_type_ids': <tf.Tensor: shape=(1, 11), dtype=int32, numpy=array([[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1]])>, \n    'attention_mask': <tf.Tensor: shape=(1, 11), dtype=int32, numpy=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])>\n} \n```", "```\nprint(tokenizer.convert_ids_to_tokens(token_ids['input_ids'].numpy()[0])) \n```", "```\n['[CLS]', 'this', 'is', 'the', 'context', '[SEP]', 'this', 'is', 'the', 'question', '[SEP]'] \n```", "```\n# Encode train data\ntrain_encodings = tokenizer(train_contexts, train_questions, truncation=True, padding=True, return_tensors='tf')\n# Encode test data\ntest_encodings = tokenizer(test_contexts, test_questions, truncation=True, padding=True, return_tensors='tf') \n```", "```\nprint(\"train_encodings.shape: {}\".format(train_encodings[\"input_ids\"].shape)) \n```", "```\ntrain_encodings.shape: (87599, 512) \n```", "```\ndef replace_char_with_token_indices(encodings, answers):\n    start_positions = []\n    end_positions = []\n    n_updates = 0\n    # Go through all the answers\n    for i in range(len(answers)):\n        # Get the token position for both start end char positions\n        start_positions.append(encodings.char_to_token(i, \n        answers[i]['answer_start']))\n        end_positions.append(encodings.char_to_token(i, \n        answers[i]['answer_end'] - 1))\n\n        if start_positions[-1] is None or end_positions[-1] is None:\n            n_updates += 1\n        # if start position is None, the answer passage has been truncated\n        # In the guide, https://huggingface.co/transformers/custom_\n        # datasets.html#qa-squad they set it to model_max_length, but\n        # this will result in NaN losses as the last available label is\n        # model_max_length-1 (zero-indexed)\n        if start_positions[-1] is None:\n            start_positions[-1] = tokenizer.model_max_length -1\n\n        if end_positions[-1] is None:\n            end_positions[-1] = tokenizer.model_max_length -1\n\n    print(\"{}/{} had answers truncated\".format(n_updates, \n    len(answers)))\n    encodings.update({'start_positions': start_positions, \n    'end_positions': end_positions}) \n```", "```\nreplace_char_with_token_indices(train_encodings, train_answers)\nreplace_char_with_token_indices(test_encodings, test_answers) \n```", "```\ndef data_gen(input_ids, attention_mask, start_positions, end_positions):\n    \"\"\" Generator for data \"\"\"\n    for inps, attn, start_pos, end_pos in zip(input_ids, \n    attention_mask, start_positions, end_positions):\n        yield (inps, attn), (start_pos, end_pos) \n```", "```\n# Define the generator as a callable\ntrain_data_gen = partial(data_gen,\n    input_ids=train_encodings['input_ids'], attention_mask=train_\n    encodings['attention_mask'],\n    start_positions=train_encodings['start_positions'],\n    end_positions=train_encodings['end_positions']\n) \n```", "```\n# Define the dataset\ntrain_dataset = tf.data.Dataset.from_generator(\n    train_data_gen, output_types=(('int32', 'int32'), ('int32', 'int32'))\n) \n```", "```\n# Shuffling the data\ntrain_dataset = train_dataset.shuffle(1000)\nprint('\\tDone') \n```", "```\n# Valid set is taken as the first 10000 samples in the shuffled set\nvalid_dataset = train_dataset.take(10000)\nvalid_dataset = valid_dataset.batch(4)\n# Rest is kept as the training data\ntrain_dataset = train_dataset.skip(10000)\ntrain_dataset = train_dataset.batch(4) \n```", "```\n# Creating test data\nprint(\"Creating test data\")\n# Define the generator as a callable\ntest_data_gen = partial(data_gen,\n    input_ids=test_encodings['input_ids'], \n    attention_mask=test_encodings['attention_mask'],\n    start_positions=test_encodings['start_positions'], \n    end_positions=test_encodings['end_positions']\n)\ntest_dataset = tf.data.Dataset.from_generator(\n    test_data_gen, output_types=(('int32', 'int32'), ('int32', \n    'int32'))\n)\ntest_dataset = test_dataset.batch(8) \n```", "```\nfrom transformers import BertConfig, TFBertForQuestionAnswering \n```", "```\nconfig = BertConfig.from_pretrained(\"bert-base-uncased\", return_dict=False) \n```", "```\nBertConfig {\n  \"architectures\": [\n    \"BertForMaskedLM\"\n  ],\n  \"attention_probs_dropout_prob\": 0.1,\n  \"classifier_dropout\": null,\n  \"gradient_checkpointing\": false,\n  \"hidden_act\": \"gelu\",\n  \"hidden_dropout_prob\": 0.1,\n  \"hidden_size\": 768,\n  \"initializer_range\": 0.02,\n  \"intermediate_size\": 3072,\n  \"layer_norm_eps\": 1e-12,\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"bert\",\n  \"num_attention_heads\": 12,\n  \"num_hidden_layers\": 12,\n  \"pad_token_id\": 0,\n  \"position_embedding_type\": \"absolute\",\n  \"return_dict\": false,\n  \"transformers_version\": \"4.15.0\",\n  \"type_vocab_size\": 2,\n  \"use_cache\": true,\n  \"vocab_size\": 30522\n} \n```", "```\nmodel = TFBertForQuestionAnswering.from_pretrained(\"bert-base-uncased\", config=config) \n```", "```\nAll model checkpoint layers were used when initializing TFBertForQuestionAnswering.\nSome layers of TFBertForQuestionAnswering were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['qa_outputs']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference. \n```", "```\n TypeError: The two structures don't have the same sequence type. \n    Input structure has type <class 'tuple'>, while shallow structure has type \n    <class 'transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput'>. \n```", "```\ndef tf_wrap_model(model):\n    \"\"\" Wraps the huggingface's model with in the Keras Functional API \"\"\"\n    # Define inputs\n    input_ids = tf.keras.layers.Input([None,], dtype=tf.int32, \n    name=\"input_ids\")\n    attention_mask = tf.keras.layers.Input([None,], dtype=tf.int32, \n    name=\"attention_mask\")\n\n    # Define the output (TFQuestionAnsweringModelOutput)\n    out = model([input_ids, attention_mask])\n\n    # Get the correct attributes in the produced object to generate an\n    # output tuple\n    wrap_model = tf.keras.models.Model([input_ids, attention_mask], \n    outputs=(out.start_logits, out.end_logits))\n\n    return wrap_model \n```", "```\nloss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\nacc = tf.keras.metrics.SparseCategoricalAccuracy()\noptimizer = tf.keras.optimizers.Adam(learning_rate=1e-5)\nmodel_v2 = tf_wrap_model(model)\nmodel_v2.compile(optimizer=optimizer, loss=loss, metrics=[acc]) \n```", "```\nmodel_v2.fit(\n    train_dataset, \n    validation_data=valid_dataset,\n    epochs=3\n) \n```", "```\nEpoch 1/2\n19400/19400 [==============================] - 7175s 369ms/step \n- loss: 2.7193 - tf_bert_for_question_answering_loss: 1.4153 - tf_bert_for_question_answering_1_loss: 1.3040 - tf_bert_for_question_answering_sparse_categorical_accuracy: 0.5975 - tf_bert_for_question_answering_1_sparse_categorical_accuracy: 0.6376 - val_loss: 2.1615 - val_tf_bert_for_question_answering_loss: 1.0898 - val_tf_bert_for_question_answering_1_loss: 1.0717 - val_tf_bert_for_question_answering_sparse_categorical_accuracy: 0.7120 - val_tf_bert_for_question_answering_1_sparse_categorical_accuracy: 0.7350\nEpoch 2/2\n19400/19400 [==============================] - 7192s 370ms/step - loss: 1.6691 - tf_bert_for_question_answering_loss: 0.8865 - tf_bert_for_question_answering_1_loss: 0.7826 - tf_bert_for_question_answering_sparse_categorical_accuracy: 0.7245 - tf_bert_for_question_answering_1_sparse_categorical_accuracy: 0.7646 - val_loss: 2.1836 - val_tf_bert_for_question_answering_loss: 1.0988 - val_tf_bert_for_question_answering_1_loss: 1.0847 - val_tf_bert_for_question_answering_sparse_categorical_accuracy: 0.7289 - val_tf_bert_for_question_answering_1_sparse_categorical_accuracy: 0.7504\nIt took 14366.591783046722 seconds to complete the training \n```", "```\nmodel_v2.evaluate(test_dataset) \n```", "```\n1322/1322 [======================] - 345s 261ms/step - loss: 2.2205 - tf_bert_for_question_answering_loss: 1.1325 - tf_bert_for_question_answering_1_loss: 1.0881 - tf_bert_for_question_answering_sparse_categorical_accuracy: 0.6968 - tf_bert_for_question_answering_1_sparse_categorical_accuracy: 0.7250 \n```", "```\nimport os\n# Create folders\nif not os.path.exists('models'):\n    os.makedirs('models')\nif not os.path.exists('tokenizers'):\n    os.makedirs('tokenizers')\n\n# Save the model\nmodel_v2.get_layer(\"tf_bert_for_question_answering\").save_pretrained(os.path.join('models', 'bert_qa'))\n# Save the tokenizer\ntokenizer.save_pretrained(os.path.join('tokenizers', 'bert_qa')) \n```", "```\ni = 5\n# Define sample question\nsample_q = test_questions[i]\n# Define sample context\nsample_c = test_contexts[i]\n# Define sample answer \nsample_a = test_answers[i] \n```", "```\n# Get the input in the format BERT accepts\nsample_input = (test_encodings[\"input_ids\"][i:i+1],\ntest_encodings[\"attention_mask\"][i:i+1]) \n```", "```\ndef ask_bert(sample_input, tokenizer, model):\n    \"\"\" This function takes an input, a tokenizer, a model and returns the\n    prediciton \"\"\"\n    out = model.predict(sample_input)\n    pred_ans_start = tf.argmax(out[0][0])\n    pred_ans_end = tf.argmax(out[1][0])\n    print(\"{}-{} token ids contain the answer\".format(pred_ans_start, \n    pred_ans_end))\n    ans_tokens = sample_input[0][0][pred_ans_start:pred_ans_end+1]\n\n    return \" \".join(tokenizer.convert_ids_to_tokens(ans_tokens)) \n```", "```\nprint(\"Question\")\nprint(\"\\t\", sample_q, \"\\n\")\nprint(\"Context\")\nprint(\"\\t\", sample_c, \"\\n\")\nprint(\"Answer (char indexed)\")\nprint(\"\\t\", sample_a, \"\\n\")\nprint('='*50,'\\n')\nsample_pred_ans = ask_bert(sample_input, tokenizer, model_v2)\nprint(\"Answer (predicted)\")\nprint(sample_pred_ans)\nprint('='*50,'\\n') \n```", "```\nQuestion\n    What was the theme of Super Bowl 50? \nContext\n    Super Bowl 50 was an American football game to determine the champion of the National Football League (NFL) for the 2015 season. The American \nFootball Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24–10 to earn their third Super Bowl title. The game was played on February 7, 2016, at Levi's Stadium in the San Francisco Bay Area at Santa Clara, California. As this was the 50th Super Bowl, the league emphasized the \"golden anniversary\" with various gold-themed initiatives, as well as temporarily suspending the tradition of naming each Super Bowl game with Roman numerals (under which the game would have been known as \"Super Bowl L\"), so that the logo could prominently feature the Arabic numerals 50\\. \nAnswer (char indexed)\n    {'answer_start': 487, 'text': '\"golden anniversary\"', 'answer_end': 507} \n================================================== \n98-99 token ids contain the answer\nAnswer (predicted)\ngolden anniversary\n================================================== \n```"]