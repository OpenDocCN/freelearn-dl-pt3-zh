["```\nimport boto3\nimport numpy as np\nimport tensorflow as tf\nimport os.path\nimport re\nfrom urllib.request import urlretrieve\nimport json\nSESSION = None\nstrBucket = 'serverlessdeeplearning'\ndef handler(event, context):\n global strBucket\n if not os.path.exists('/tmp/imagenet/'):\n os.makedirs('/tmp/imagenet/')\nstrFile = '/tmp/imagenet/inputimage.jpg'\n```", "```\nif not os.path.exists('/tmp/imagenet/'):\n os.makedirs('/tmp/imagenet/')\nstrFile = '/tmp/imagenet/inputimage.jpg'\ndownloadFromS3(strBucket,'imagenet/inputimage.jpg',strFile)\nglobal SESSION\n if SESSION is None:\ndownloadFromS3(strBucket,'imagenet/imagenet_2012_challenge_label_map_proto.pbtxt','/tmp/imagenet/imagenet_2012_challenge_label_map_proto.pbtxt')\ndownloadFromS3(strBucket,'imagenet/imagenet_synset_to_human_label_map.txt','/tmp/imagenet/imagenet_synset_to_human_label_map.txt')\n image = os.path.join('/tmp/imagenet/', 'inputimage.jpg')\n strResult = run_inference_on_image(image)\nreturn strResult\ndef run_inference_on_image(image):\n```", "```\nglobal SESSION\n if SESSION is None:\n downloadFromS3(strBucket,'imagenet/imagenet_2012_challenge_label_map_proto.pbtxt','/tmp/imagenet/imagenet_2012_challenge_label_map_proto.pbtxt')\n downloadFromS3(strBucket,'imagenet/imagenet_synset_to_human_label_map.txt','/tmp/imagenet/imagenet_synset_to_human_label_map.txt')\n image = os.path.join('/tmp/imagenet/', 'inputimage.jpg')\n strResult = run_inference_on_image(image)\nreturn strResult\ndef run_inference_on_image(image):\n image_data = tf.gfile.FastGFile(image, 'rb').read()\n global SESSION\n if SESSION is None:\n SESSION = tf.InteractiveSession()\n create_graph()\n```", "```\nservice: deeplearninglambda\nframeworkVersion: \">=1.2.0 <2.0.0\"\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: python3.6\n  memorySize: 1536\n  timeout: 60\niamRoleStatements:\n - Effect: \"Allow\"\n Action:\n - \"s3:ListBucket\"\n Resource:\n - arn:aws:s3:::serverlessdeeplearning\n - Effect: \"Allow\"\n Action:\n - \"s3:GetObject\"\n Resource:\n - arn:aws:s3:::serverlessdeeplearning/*\nfunctions:\n main:\n handler: index.handler\n```", "```\nserverless invoke --function main\n```"]