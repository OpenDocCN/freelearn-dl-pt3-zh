["```\nthe quick brown fox jumped over the lazy dog\n```", "```\n([the, brown], quick), ([quick, fox], brown), ([brown, jumped], fox), ...\n```", "```\n(quick, the), (quick, brown), (brown, quick), (brown, fox), ...\n```", "```\n#importing the required packages for this implementation\nimport numpy as np\nimport tensorflow as tf\n\n#Packages for downloading the dataset\nfrom urllib.request import urlretrieve\nfrom os.path import isfile, isdir\nfrom tqdm import tqdm\nimport zipfile\n\n#packages for data preprocessing\nimport re\nfrom collections import Counter\nimport random\n```", "```\n# In this implementation we will use a cleaned up version of Wikipedia from Matt Mahoney.\n# So we will define a helper class that will helps to download the dataset\nwiki_dataset_folder_path = 'wikipedia_data'\nwiki_dataset_filename = 'text8.zip'\nwiki_dataset_name = 'Text8 Dataset'\n\nclass DLProgress(tqdm):\n\n    last_block = 0\n\n    def hook(self, block_num=1, block_size=1, total_size=None):\n        self.total = total_size\n        self.update((block_num - self.last_block) * block_size)\n        self.last_block = block_num\n\n# Cheking if the file is not already downloaded\nif not isfile(wiki_dataset_filename):\n    with DLProgress(unit='B', unit_scale=True, miniters=1, desc=wiki_dataset_name) as pbar:\n        urlretrieve(\n            'http://mattmahoney.net/dc/text8.zip',\n            wiki_dataset_filename,\n            pbar.hook)\n\n# Checking if the data is already extracted if not extract it\nif not isdir(wiki_dataset_folder_path):\n    with zipfile.ZipFile(wiki_dataset_filename) as zip_ref:\n        zip_ref.extractall(wiki_dataset_folder_path)\n\nwith open('wikipedia_data/text8') as f:\n    cleaned_wikipedia_text = f.read()\n\nOutput:\n\nText8 Dataset: 31.4MB [00:39, 794kB/s]                             \n```", "```\ncleaned_wikipedia_text[0:100]\n\n' anarchism originated as a term of abuse first used against early working class radicals including t'\n```", "```\ndef preprocess_text(input_text):\n\n    # Replace punctuation with some special tokens so we can use them in our model\n    input_text = input_text.lower()\n    input_text = input_text.replace('.', ' <PERIOD> ')\n    input_text = input_text.replace(',', ' <COMMA> ')\n    input_text = input_text.replace('\"', ' <QUOTATION_MARK> ')\n    input_text = input_text.replace(';', ' <SEMICOLON> ')\n    input_text = input_text.replace('!', ' <EXCLAMATION_MARK> ')\n    input_text = input_text.replace('?', ' <QUESTION_MARK> ')\n    input_text = input_text.replace('(', ' <LEFT_PAREN> ')\n    input_text = input_text.replace(')', ' <RIGHT_PAREN> ')\n    input_text = input_text.replace('--', ' <HYPHENS> ')\n    input_text = input_text.replace('?', ' <QUESTION_MARK> ')\n\n    input_text = input_text.replace(':', ' <COLON> ')\n    text_words = input_text.split()\n\n    # neglecting all the words that have five occurrences of fewer\n    text_word_counts = Counter(text_words)\n    trimmed_words = [word for word in text_words if text_word_counts[word] > 5]\n\n    return trimmed_words\n```", "```\npreprocessed_words = preprocess_text(cleaned_wikipedia_text)\nprint(preprocessed_words[:30])\n```", "```\nOutput:\n['anarchism', 'originated', 'as', 'a', 'term', 'of', 'abuse', 'first', 'used', 'against', 'early', 'working', 'class', 'radicals', 'including', 'the', 'diggers', 'of', 'the', 'english', 'revolution', 'and', 'the', 'sans', 'culottes', 'of', 'the', 'french', 'revolution', 'whilst']\n```", "```\nprint(\"Total number of words in the text: {}\".format(len(preprocessed_words)))\nprint(\"Total number of unique words in the text: {}\".format(len(set(preprocessed_words))))\n\nOutput:\n\nTotal number of words in the text: 16680599\nTotal number of unique words in the text: 63641\n```", "```\ndef create_lookuptables(input_words):\n \"\"\"\n Creating lookup tables for vocan\n\n Function arguments:\n param words: Input list of words\n \"\"\"\n input_word_counts = Counter(input_words)\n sorted_vocab = sorted(input_word_counts, key=input_word_counts.get, reverse=True)\n integer_to_vocab = {ii: word for ii, word in enumerate(sorted_vocab)}\n vocab_to_integer = {word: ii for ii, word in integer_to_vocab.items()}\n\n # returning A tuple of dicts\n return vocab_to_integer, integer_to_vocab\n```", "```\nvocab_to_integer, integer_to_vocab = create_lookuptables(preprocessed_words)\ninteger_words = [vocab_to_integer[word] for word in preprocessed_words]\n```", "```\n# removing context-irrelevant words threshold\nword_threshold = 1e-5\n\nword_counts = Counter(integer_words)\ntotal_number_words = len(integer_words)\n\n#Calculating the freqs for the words\nfrequencies = {word: count/total_number_words for word, count in word_counts.items()}\n\n#Calculating the discard probability\nprob_drop = {word: 1 - np.sqrt(word_threshold/frequencies[word]) for word in word_counts}\ntraining_words = [word for word in integer_words if random.random() < (1 - prob_drop[word])]\n```", "```\n# Defining a function that returns the words around specific index in a specific window\ndef get_target(input_words, ind, context_window_size=5):\n\n    #selecting random number to be used for genearting words form history and feature of the current word\n    rnd_num = np.random.randint(1, context_window_size+1)\n    start_ind = ind - rnd_num if (ind - rnd_num) > 0 else 0\n    stop_ind = ind + rnd_num\n\n    target_words = set(input_words[start_ind:ind] + input_words[ind+1:stop_ind+1])\n\n    return list(target_words)    \n```", "```\n#Defining a function for generating word batches as a tuple (inputs, targets)\ndef generate_random_batches(input_words, train_batch_size, context_window_size=5):\n\n    num_batches = len(input_words)//train_batch_size\n\n    # working on only only full batches\n    input_words = input_words[:num_batches*train_batch_size]\n\n    for ind in range(0, len(input_words), train_batch_size):\n        input_vals, target = [], []\n        input_batch = input_words[ind:ind+train_batch_size]\n\n        #Getting the context for each word\n        for ii in range(len(input_batch)):\n            batch_input_vals = input_batch[ii]\n            batch_target = get_target(input_batch, ii, context_window_size)\n\n            target.extend(batch_target)\n            input_vals.extend([batch_input_vals]*len(batch_target))\n        yield input_vals, target\n```", "```\ntrain_graph = tf.Graph()\n\n#defining the inputs placeholders of the model\nwith train_graph.as_default():\n    inputs_values = tf.placeholder(tf.int32, [None], name='inputs_values')\n    labels_values = tf.placeholder(tf.int32, [None, None], name='labels_values')\n```", "```\nnum_words X num_hidden_neurons\n```", "```\nnum_vocab = len(integer_to_vocab)\n\nnum_embedding =  300\nwith train_graph.as_default():\n    embedding_layer = tf.Variable(tf.random_uniform((num_vocab, num_embedding), -1, 1))\n\n    # Next, we are going to use tf.nn.embedding_lookup function to get the output of the hidden layer\n    embed_tensors = tf.nn.embedding_lookup(embedding_layer, inputs_values) \n```", "```\n# Number of negative labels to sample\nnum_sampled = 100\n\nwith train_graph.as_default():\n    # create softmax weights and biases\n    softmax_weights = tf.Variable(tf.truncated_normal((num_vocab, num_embedding))) \n    softmax_biases = tf.Variable(tf.zeros(num_vocab), name=\"softmax_bias\") \n\n    # Calculating the model loss using negative sampling\n    model_loss = tf.nn.sampled_softmax_loss(\n        weights=softmax_weights,\n        biases=softmax_biases,\n        labels=labels_values,\n        inputs=embed_tensors,\n        num_sampled=num_sampled,\n        num_classes=num_vocab)\n\n    model_cost = tf.reduce_mean(model_loss)\n    model_optimizer = tf.train.AdamOptimizer().minimize(model_cost)\n```", "```\nwith train_graph.as_default():\n\n    # set of random words for evaluating similarity on\n    valid_num_words = 16 \n    valid_window = 100\n\n    # pick 8 samples from (0,100) and (1000,1100) each ranges. lower id implies more frequent \n    valid_samples = np.array(random.sample(range(valid_window), valid_num_words//2))\n    valid_samples = np.append(valid_samples, \n                               random.sample(range(1000,1000+valid_window), valid_num_words//2))\n\n    valid_dataset_samples = tf.constant(valid_samples, dtype=tf.int32)\n\n    # Calculating the cosine distance\n    norm = tf.sqrt(tf.reduce_sum(tf.square(embedding_layer), 1, keep_dims=True))\n    normalized_embed = embedding_layer / norm\n    valid_embedding = tf.nn.embedding_lookup(normalized_embed, valid_dataset_samples)\n    cosine_similarity = tf.matmul(valid_embedding, tf.transpose(normalized_embed))\n```", "```\nnum_epochs = 10\ntrain_batch_size = 1000\ncontextual_window_size = 10\n\nwith train_graph.as_default():\n    saver = tf.train.Saver()\n\nwith tf.Session(graph=train_graph) as sess:\n\n    iteration_num = 1\n    average_loss = 0\n\n    #Initializing all the vairables\n    sess.run(tf.global_variables_initializer())\n\n    for e in range(1, num_epochs+1):\n\n        #Generating random batch for training\n        batches = generate_random_batches(training_words, train_batch_size, contextual_window_size)\n\n        #Iterating through the batch samples\n        for input_vals, target in batches:\n\n            #Creating the feed dict\n            feed_dict = {inputs_values: input_vals,\n                    labels_values: np.array(target)[:, None]}\n\n            train_loss, _ = sess.run([model_cost, model_optimizer], feed_dict=feed_dict)\n\n            #commulating the loss\n            average_loss += train_loss\n\n            #Printing out the results after 100 iteration\n            if iteration_num % 100 == 0: \n                print(\"Epoch Number {}/{}\".format(e, num_epochs),\n                      \"Iteration Number: {}\".format(iteration_num),\n                      \"Avg. Training loss: {:.4f}\".format(average_loss/100))\n                average_loss = 0\n\n            if iteration_num % 1000 == 0:\n\n                ## Using cosine similarity to get the nearest words to a word\n                similarity = cosine_similarity.eval()\n                for i in range(valid_num_words):\n                    valid_word = integer_to_vocab[valid_samples[i]]\n\n                    # number of nearest neighbors\n                    top_k = 8 \n                    nearest_words = (-similarity[i, :]).argsort()[1:top_k+1]\n                    msg = 'The nearest to %s:' % valid_word\n                    for k in range(top_k):\n                        similar_word = integer_to_vocab[nearest_words[k]]\n                        msg = '%s %s,' % (msg, similar_word)\n                    print(msg)\n\n            iteration_num += 1\n    save_path = saver.save(sess, \"checkpoints/cleaned_wikipedia_version.ckpt\")\n    embed_mat = sess.run(normalized_embed)\n```", "```\nEpoch Number 10/10 Iteration Number: 43100 Avg. Training loss: 5.0380\nEpoch Number 10/10 Iteration Number: 43200 Avg. Training loss: 4.9619\nEpoch Number 10/10 Iteration Number: 43300 Avg. Training loss: 4.9463\nEpoch Number 10/10 Iteration Number: 43400 Avg. Training loss: 4.9728\nEpoch Number 10/10 Iteration Number: 43500 Avg. Training loss: 4.9872\nEpoch Number 10/10 Iteration Number: 43600 Avg. Training loss: 5.0534\nEpoch Number 10/10 Iteration Number: 43700 Avg. Training loss: 4.8261\nEpoch Number 10/10 Iteration Number: 43800 Avg. Training loss: 4.8752\nEpoch Number 10/10 Iteration Number: 43900 Avg. Training loss: 4.9818\nEpoch Number 10/10 Iteration Number: 44000 Avg. Training loss: 4.9251\nThe nearest to nine: one, seven, zero, two, three, four, eight, five,\nThe nearest to such: is, as, or, some, have, be, that, physical,\nThe nearest to who: his, him, he, did, to, had, was, whom,\nThe nearest to two: zero, one, three, seven, four, five, six, nine,\nThe nearest to which: as, a, the, in, to, also, for, is,\nThe nearest to seven: eight, one, three, five, four, six, zero, two,\nThe nearest to american: actor, nine, singer, actress, musician, comedian, athlete, songwriter,\nThe nearest to many: as, other, some, have, also, these, are, or,\nThe nearest to powers: constitution, constitutional, formally, assembly, state, legislative, general, government,\nThe nearest to question: questions, existence, whether, answer, truth, reality, notion, does,\nThe nearest to channel: tv, television, broadcasts, broadcasting, radio, channels, broadcast, stations,\nThe nearest to recorded: band, rock, studio, songs, album, song, recording, pop,\nThe nearest to arts: art, school, alumni, schools, students, university, renowned, education,\nThe nearest to orthodox: churches, orthodoxy, church, catholic, catholics, oriental, christianity, christians,\nThe nearest to scale: scales, parts, important, note, between, its, see, measured,\nThe nearest to mean: is, exactly, defined, denote, hence, are, meaning, example,\n\nEpoch Number 10/10 Iteration Number: 45100 Avg. Training loss: 4.8466\nEpoch Number 10/10 Iteration Number: 45200 Avg. Training loss: 4.8836\nEpoch Number 10/10 Iteration Number: 45300 Avg. Training loss: 4.9016\nEpoch Number 10/10 Iteration Number: 45400 Avg. Training loss: 5.0218\nEpoch Number 10/10 Iteration Number: 45500 Avg. Training loss: 5.1409\nEpoch Number 10/10 Iteration Number: 45600 Avg. Training loss: 4.7864\nEpoch Number 10/10 Iteration Number: 45700 Avg. Training loss: 4.9312\nEpoch Number 10/10 Iteration Number: 45800 Avg. Training loss: 4.9097\nEpoch Number 10/10 Iteration Number: 45900 Avg. Training loss: 4.6924\nEpoch Number 10/10 Iteration Number: 46000 Avg. Training loss: 4.8999\nThe nearest to nine: one, eight, seven, six, four, five, american, two,\nThe nearest to such: can, example, examples, some, be, which, this, or,\nThe nearest to who: him, his, himself, he, was, whom, men, said,\nThe nearest to two: zero, five, three, four, six, one, seven, nine\nThe nearest to which: to, is, a, the, that, it, and, with,\nThe nearest to seven: one, six, eight, five, nine, four, three, two,\nThe nearest to american: musician, actor, actress, nine, singer, politician, d, one,\nThe nearest to many: often, as, most, modern, such, and, widely, traditional,\nThe nearest to powers: constitutional, formally, power, rule, exercised, parliamentary, constitution, control,\nThe nearest to question: questions, what, answer, existence, prove, merely, true, statements,\nThe nearest to channel: network, channels, broadcasts, stations, cable, broadcast, broadcasting, radio,\nThe nearest to recorded: songs, band, song, rock, album, bands, music, studio,\nThe nearest to arts: art, school, martial, schools, students, styles, education, student,\nThe nearest to orthodox: orthodoxy, churches, church, christianity, christians, catholics, christian, oriental,\nThe nearest to scale: scales, can, amounts, depends, tend, are, structural, for,\nThe nearest to mean: we, defined, is, exactly, equivalent, denote, number, above,\nEpoch Number 10/10 Iteration Number: 46100 Avg. Training loss: 4.8583\nEpoch Number 10/10 Iteration Number: 46200 Avg. Training loss: 4.8887\n```", "```\nnum_visualize_words = 500\ntsne_obj = TSNE()\nembedding_tsne = tsne_obj.fit_transform(embedding_matrix[:num_visualize_words, :])\n\nfig, ax = plt.subplots(figsize=(14, 14))\nfor ind in range(num_visualize_words):\n    plt.scatter(*embedding_tsne[ind, :], color='steelblue')\n    plt.annotate(integer_to_vocab[ind], (embedding_tsne[ind, 0], embedding_tsne[ind, 1]), alpha=0.7)\n```", "```\n\nOutput:\n```"]