["```\nimport numpy as np\nimport gym\nimport sys\n```", "```\nnhidden1 = 64 \nnhidden2 = 64 \n\nxavier = tf.contrib.layers.xavier_initializer()\nbias_const = tf.constant_initializer(0.05)\nrand_unif = tf.keras.initializers.RandomUniform(minval=-3e-3,maxval=3e-3)\nregularizer = tf.contrib.layers.l2_regularizer(scale=0.0\n```", "```\nclass PPO(object):\n\n    def __init__(self, sess, S_DIM, A_DIM, A_LR, C_LR, A_UPDATE_STEPS, C_UPDATE_STEPS, CLIP_METHOD):\n        self.sess = sess\n        self.S_DIM = S_DIM\n        self.A_DIM = A_DIM\n        self.A_LR = A_LR\n        self.C_LR = C_LR\n        self.A_UPDATE_STEPS = A_UPDATE_STEPS\n        self.C_UPDATE_STEPS = C_UPDATE_STEPS\n        self.CLIP_METHOD = CLIP_METHOD\n```", "```\n# tf placeholders\nself.tfs = tf.placeholder(tf.float32, [None, self.S_DIM], 'state')\nself.tfdc_r = tf.placeholder(tf.float32, [None, 1], 'discounted_r')\nself.tfa = tf.placeholder(tf.float32, [None, self.A_DIM], 'action')\nself.tfadv = tf.placeholder(tf.float32, [None, 1], 'advantage')\n```", "```\n# critic\nwith tf.variable_scope('critic'):\n    l1 = tf.layers.dense(self.tfs, nhidden1, activation=None, kernel_initializer=xavier, bias_initializer=bias_const, kernel_regularizer=regularizer)\n    l1 = tf.nn.relu(l1)\n    l2 = tf.layers.dense(l1, nhidden2, activation=None, kernel_initializer=xavier, bias_initializer=bias_const, kernel_regularizer=regularizer)\n    l2 = tf.nn.relu(l2)\n\n    self.v = tf.layers.dense(l2, 1, activation=None, kernel_initializer=rand_unif, bias_initializer=bias_const) \n    self.advantage = self.tfdc_r - self.v\n    self.closs = tf.reduce_mean(tf.square(self.advantage))\n    self.ctrain_op = tf.train.AdamOptimizer(self.C_LR).minimize(self.closs)\n```", "```\n# actor\nself.pi, self.pi_params = self._build_anet('pi', trainable=True) \nself.oldpi, self.oldpi_params = self._build_anet('oldpi', trainable=False)\n\nself.pi_mean = self.pi.mean()\nself.pi_sigma = self.pi.stddev()\n```", "```\nwith tf.variable_scope('sample_action'):\n    self.sample_op = tf.squeeze(self.pi.sample(1), axis=0) \n```", "```\nwith tf.variable_scope('update_oldpi'):\n    self.update_oldpi_op = [oldp.assign(p) for p, oldp in zip(self.pi_params, self.oldpi_params)]\n```", "```\nwith tf.variable_scope('loss'):\n    self.ratio = tf.exp(self.pi.log_prob(self.tfa) - self.oldpi.log_prob(self.tfa))\n    self.clipped_ratio = tf.clip_by_value(self.ratio, 1.-self.CLIP_METHOD['epsilon'], 1.+self.CLIP_METHOD['epsilon'])\n```", "```\nself.aloss = -tf.reduce_mean(tf.minimum(self.ratio*self.tfadv, self.clipped_ratio*self.tfadv))\n\n# entropy \nentropy = -tf.reduce_sum(self.pi.prob(self.tfa) * tf.log(tf.clip_by_value(self.pi.prob(self.tfa),1e-10,1.0)),axis=1)\nentropy = tf.reduce_mean(entropy,axis=0) \nself.aloss -= 0.0 #0.01 * entropy\n\nwith tf.variable_scope('atrain'):\n    self.atrain_op = tf.train.AdamOptimizer(self.A_LR).minimize(self.aloss) \n```", "```\ndef update(self, s, a, r):\n\n    self.sess.run(self.update_oldpi_op)\n    adv = self.sess.run(self.advantage, {self.tfs: s, self.tfdc_r: r})\n\n    # update actor\n    for _ in range(self.A_UPDATE_STEPS):\n        self.sess.run(self.atrain_op, feed_dict={self.tfs: s, self.tfa: a, self.tfadv: adv})\n\n    # update critic\n    for _ in range(self.C_UPDATE_STEPS):\n        self.sess.run(self.ctrain_op, {self.tfs: s, self.tfdc_r: r}) \n```", "```\n    def _build_anet(self, name, trainable):\n        with tf.variable_scope(name):\n            l1 = tf.layers.dense(self.tfs, nhidden1, activation=None, trainable=trainable, kernel_initializer=xavier, bias_initializer=bias_const, kernel_regularizer=regularizer)\n            l1 = tf.nn.relu(l1)\n            l2 = tf.layers.dense(l1, nhidden2, activation=None, trainable=trainable, kernel_initializer=xavier, bias_initializer=bias_const, kernel_regularizer=regularizer)\n            l2 = tf.nn.relu(l2)\n\n            mu = tf.layers.dense(l2, self.A_DIM, activation=tf.nn.tanh, trainable=trainable, kernel_initializer=rand_unif, bias_initializer=bias_const)\n\n            small = tf.constant(1e-6)\n            mu = tf.clip_by_value(mu,-1.0+small,1.0-small) \n\n            sigma = tf.layers.dense(l2, self.A_DIM, activation=None, trainable=trainable, kernel_initializer=rand_unif, bias_initializer=bias_const)\n            sigma = tf.nn.softplus(sigma) + 0.1 \n\n            norm_dist = tf.distributions.Normal(loc=mu, scale=sigma)\n        params = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=name)\n        return norm_dist, params\n```", "```\n   def choose_action(self, s):\n        s = s[np.newaxis, :]\n        a = self.sess.run(self.sample_op, {self.tfs: s})\n        return a[0]\n```", "```\n   def get_v(self, s):\n        if s.ndim < 2: s = s[np.newaxis, :]\n        vv = self.sess.run(self.v, {self.tfs: s})\n        return vv[0,0]\n```", "```\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gym\nimport sys\nimport time\n\nfrom class_ppo import *\n```", "```\ndef reward_shaping(s_):\n\n     r = 0.0\n\n     if s_[0] > -0.4:\n          r += 5.0*(s_[0] + 0.4)\n     if s_[0] > 0.1: \n          r += 100.0*s_[0]\n     if s_[0] < -0.7:\n          r += 5.0*(-0.7 - s_[0])\n     if s_[0] < 0.3 and np.abs(s_[1]) > 0.02:\n          r += 4000.0*(np.abs(s_[1]) - 0.02)\n\n     return r\n```", "```\nenv = gym.make('MountainCarContinuous-v0')\n\nEP_MAX = 1000\nGAMMA = 0.9\n\nA_LR = 2e-4\nC_LR = 2e-4\n\nBATCH = 32\nA_UPDATE_STEPS = 10\nC_UPDATE_STEPS = 10\n\nS_DIM = env.observation_space.shape[0]\nA_DIM = env.action_space.shape[0]\n\nprint(\"S_DIM: \", S_DIM, \"| A_DIM: \", A_DIM)\n\nCLIP_METHOD = dict(name='clip', epsilon=0.1)\n\n# train_test = 0 for train; =1 for test\ntrain_test = 0\n\n# irestart = 0 for fresh restart; =1 for restart from ckpt file\nirestart = 0\n\niter_num = 0\n\nif (irestart == 0):\n  iter_num = 0\n```", "```\nsess = tf.Session()\n\nppo = PPO(sess, S_DIM, A_DIM, A_LR, C_LR, A_UPDATE_STEPS, C_UPDATE_STEPS, CLIP_METHOD)\n\nsaver = tf.train.Saver()\n\nif (train_test == 0 and irestart == 0):\n  sess.run(tf.global_variables_initializer())\nelse:\n  saver.restore(sess, \"ckpt/model\") \n```", "```\nfor ep in range(iter_num, EP_MAX):\n\n    print(\"-\"*70)\n\n    s = env.reset()\n\n    buffer_s, buffer_a, buffer_r = [], [], []\n    ep_r = 0\n\n    max_pos = -1.0\n    max_speed = 0.0\n    done = False\n    t = 0\n```", "```\n    while not done: \n\n        env.render()\n\n        # sticky actions\n        #if (t == 0 or np.random.uniform() < 0.125): \n        if (t % 8 ==0):\n          a = ppo.choose_action(s) \n\n        # small noise for exploration\n        a += 0.1 * np.random.randn() \n\n        # clip\n        a = np.clip(a, -1.0, 1.0)\n\n        # take step \n        s_, r, done, _ = env.step(a)\n\n        if s_[0] > 0.4:\n            print(\"nearing flag: \", s_, a) \n\n        if s_[0] > 0.45:\n          print(\"reached flag on mountain! \", s_, a) \n          if done == False:\n             print(\"something wrong! \", s_, done, r, a)\n             sys.exit() \n\n        # reward shaping \n        if train_test == 0:\n          r += reward_shaping(s_)\n\n        if s_[0] > max_pos:\n           max_pos = s_[0]\n        if s_[1] > max_speed:\n           max_speed = s_[1]\n```", "```\nif (train_test == 0):\n    buffer_s.append(s)\n    buffer_a.append(a)\n    buffer_r.append(r) \n\n    s = s_\n    ep_r += r\n    t += 1\n```", "```\nif (train_test == 0):\n    if (t+1) % BATCH == 0 or done == True:\n        v_s_ = ppo.get_v(s_)\n        discounted_r = []\n        for r in buffer_r[::-1]:\n            v_s_ = r + GAMMA * v_s_\n            discounted_r.append(v_s_)\n            discounted_r.reverse()\n\n        bs = np.array(np.vstack(buffer_s))\n        ba = np.array(np.vstack(buffer_a)) \n        br = np.array(discounted_r)[:, np.newaxis]\n\n        buffer_s, buffer_a, buffer_r = [], [], []\n\n        ppo.update(bs, ba, br)\n```", "```\n    if (train_test == 1):\n        time.sleep(0.1)\n\n    if (done == True):\n        print(\"values at done: \", s_, a)\n        break\n\n    print(\"episode: \", ep, \"| episode reward: \", round(ep_r,4), \"| time steps: \", t)\n    print(\"max_pos: \", max_pos, \"| max_speed:\", max_speed)\n\n    if (train_test == 0):\n      with open(\"performance.txt\", \"a\") as myfile:\n        myfile.write(str(ep) + \" \" + str(round(ep_r,4)) + \" \" + str(round(max_pos,4)) + \" \" + str(round(max_speed,4)) + \"\\n\")\n\n    if (train_test == 0 and ep%10 == 0):\n      saver.save(sess, \"ckpt/model\")\n```", "```\npython train_test.py\n```", "```\ntrain_test = 1\n```", "```\nimport sys\nimport numpy as np\nimport gym\n\nenv = gym.make('MountainCarContinuous-v0')\n\nfor _ in range(100):\n  s = env.reset()\n  done = False\n\n  max_pos = -1.0\n  max_speed = 0.0 \n  ep_reward = 0.0\n\n  while not done:\n    env.render() \n    a = [1.0] # step on throttle\n    s_, r, done, _ = env.step(a)\n\n    if s_[0] > max_pos: max_pos = s_[0]\n    if s_[1] > max_speed: max_speed = s_[1] \n    ep_reward += r\n\n  print(\"ep_reward: \", ep_reward, \"| max_pos: \", max_pos, \"| max_speed: \", max_speed)\n```", "```\nimport sys\nimport numpy as np\nimport gym\n\nenv = gym.make('MountainCarContinuous-v0')\n\nfor _ in range(100):\n  s = env.reset()\n  done = False\n\n  max_pos = -1.0\n  max_speed = 0.0 \n  ep_reward = 0.0\n\n  while not done:\n    env.render() \n    a = [-1.0 + 2.0*np.random.uniform()] \n    s_, r, done, _ = env.step(a)\n\n    if s_[0] > max_pos: max_pos = s_[0]\n    if s_[1] > max_speed: max_speed = s_[1] \n    ep_reward += r\n\n  print(\"ep_reward: \", ep_reward, \"| max_pos: \", max_pos, \"| max_speed: \", max_speed)\n```"]