["```\n    $ jupyter notebook\n    ```", "```\n    bitcoin.set_index('date')['close'].plot(linewidth=2, \\\n                                            figsize=(14, 4),\\\n                                            color='#d35400')\n    #plt.plot(bitcoin['date'], bitcoin['close'])\n    ```", "```\n    bitcoin.set_index('date')['volume'].plot(linewidth=2, \\\n                                             figsize=(14, 4), \\\n                                             color='#d35400')\n    ```", "```\n    bitcoin_recent = bitcoin[bitcoin['date'] >= '2016-01-04']\n    ```", "```\n    bitcoin_recent['close_point_relative_normalization'] = \\\n    bitcoin_recent.groupby('iso_week')['close']\\\n    .apply(lambda x: normalizations.point_relative_normalization(x))\n    ```", "```\n    bitcoin_recent.set_index('date')\\\n    ['close_point_relative_normalization'].plot(linewidth=2, \\\n                                                figsize=(14,4), \\\n                                                color='#d35400')\n    ```", "```\n    bitcoin_recent.set_index('date')\\\n                            ['volume_point_relative_normalization'].\\\n                            plot(linewidth=2, \\\n                            figsize=(14,4), \\\n                            color='#d35400')\n    ```", "```\n    boundary = int(0.9 * bitcoin_recent['iso_week'].nunique())\n    train_set_weeks = bitcoin_recent['iso_week'].unique()[0:boundary]\n    test_set_weeks = bitcoin_recent[~bitcoin_recent['iso_week']\\\n                     .isin(train_set_weeks)]['iso_week'].unique()\n    test_set_weeks\n    train_set_weeks\n    ```", "```\n    train_dataset = bitcoin_recent[bitcoin_recent['iso_week']\\\n                                                 .isin(train_set_weeks)]\n    test_dataset = bitcoin_recent[bitcoin_recent['iso_week'].\\\n                                                isin(test_set_weeks)]\n    ```", "```\n    test_dataset.to_csv('data/test_dataset.csv', index=False)\n    train_dataset.to_csv('data/train_dataset.csv', index=False)\n    bitcoin_recent.to_csv('data/bitcoin_recent.csv', index=False)\n    ```", "```\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense, Activation\nmodel = Sequential()\nmodel.add(LSTM(units=number_of_periods, \\\n               input_shape=(period_length, number_of_periods) \\\n               return_sequences=False), stateful=True)\nmodel.add(Dense(units=period_length)) \\\n          model.add(Activation(\"linear\"))\nmodel.compile(loss=\"mse\", optimizer=\"rmsprop\")\n```", "```\nmodel.fit(X_train, Y_train,\n          batch_size=32, epochs=epochs)\n```", "```\nmodel.predict(x=X_train)\n```", "```\n    import warnings\n    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n    import tensorflow as tf\n    from tensorflow import keras\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import LSTM\n    from tensorflow.keras.layers import Dense, Activation\n    ```", "```\n    period_length = 7\n    number_of_periods = 208 - 21 - 1\n    number_of_periods\n    ```", "```\n    186\n    ```", "```\n    def build_model(period_length, number_of_periods, batch_size=1):\n        model = Sequential()\n        model.add(LSTM(units=period_length,\\\n                       batch_input_shape=(batch_size, \\\n                                          number_of_periods, \\\n                                          period_length),\\\n                       input_shape=(number_of_periods, \\\n                                    period_length),\\\n                       return_sequences=False, stateful=False))\n        model.add(Dense(units=period_length))\n        model.add(Activation(\"linear\"))\n        model.compile(loss=\"mse\", optimizer=\"rmsprop\")\n        return model\n    ```", "```\n    model = build_model(period_length=period_length, \\\n                        number_of_periods=number_of_periods)\n    model.save('bitcoin_lstm_v0.h5')\n    ```", "```\n    model = keras.models.load_model('bitcoin_lstm_v0.h5')\n    ```", "```\nimport pandas as pd\ntrain = pd.read_csv('data/train_dataset.csv')\n```", "```\ngroup_size = 7\nsamples = list()\nfor i in range(0, len(data), group_size):\nsample = list(data[i:i + group_size])\n         if len(sample) == group_size:samples\\\n                           .append(np.array(sample)\\\n                           .reshape(group_size, 1).tolist())\ndata = np.array(samples)\n```", "```\nX_train = data[:-1,:].reshape(1, 186, 7)\nY_validation = data[-1].reshape(1, 7)\n```", "```\nmodel.fit(x=X_train, y=Y_validation, epochs=100)\n```", "```\nmodel.predict(x=X_train)\n```"]