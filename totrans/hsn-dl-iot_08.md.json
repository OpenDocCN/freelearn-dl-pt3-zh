["```\n// Get the jquery into the JavaScript console\nvar script = document.createElement('script');\nscript.src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\";\ndocument.getElementsByTagName('head')[0].appendChild(script)\n```", "```\n// Grab the chosen URLs\nvar urls = $('.rg_di .rg_meta').map(function() { return JSON.parse($(this).text()).ou; });\n\n```", "```\n// write the URls to file (one per line)\nvar textToSave = urls.toArray().join('\\n');\nvar hiddenElement = document.createElement('a');\nhiddenElement.href = 'data:attachment/text,' + encodeURI(textToSave);\nhiddenElement.target = '_blank';\nhiddenElement.download = 'emotion_images_urls.txt';\nhiddenElement.click();\n```", "```\npython download_images.py emotion_images_urls.txt\n```", "```\nimport os\nimport csv\nimport argparse\nimport numpy as np\nimport scipy.misc\nparser = argparse.ArgumentParser()\nparser.add_argument('-f', '--file', *required*=True, *help*=\"path of the csv file\")\nparser.add_argument('-o', '--output', *required*=True, *help*=\"path of the output directory\")\nargs = parser.parse_args()\nw, h = 48, 48\nimage = np.zeros((h, w), dtype=np.uint8)\nid = 1\nwith open(args.file) as csvfile:\n    datareader = csv.reader(csvfile, delimiter =',')\n    next(datareader,None)\n    for row in datareader:       \n        emotion = row[0]\n        pixels = row[1].split()\n        usage = row[2]\n        pixels_array = np.asarray(pixels, dtype=np.int)\n        image = pixels_array.reshape(w, h)\n        stacked_image = np.dstack((image,) * 3)\n        image_folder = os.path.join(args.output, usage)\n        if not os.path.exists(image_folder):\n            os.makedirs(image_folder)\n        image_file =  os.path.join(image_folder , emotion +'_'+ str(id) +'.jpg')\n        scipy.misc.imsave(image_file, stacked_image)\n        id+=1\n        if id % 100 == 0:\n            print('Processed {} images'.format(id))\nprint(\"Finished conversion to {} images\".format(id))\n```", "```\npython imager_converter.py\n```", "```\npython image_explorer.py\n```", "```\n# Import the module\nimport Augmentor\nda = Augmentor.Pipeline(\"data_augmentation_test\")\n# Define the augmentation\nda.rotate90(probability=0.5)\nda.rotate270(probability=0.5)\nda.flip_left_right(probability=0.8)\nda.flip_top_bottom(probability=0.3)\nda.crop_random(probability=1, percentage_area=0.5)\nda.resize(probability=1.0, width=120, height=120)\n# Do the augmentation operation: sampling\nda.sample(25)\n```", "```\npython LSTM-HAR.py\n```", "```\npython CNN-FER2013.py\n```", "```\npython retrain.py \\\n\n--output_graph=trained_model_mobilenetv1/retrained_graph.pb \\\n--output_labels=trained_model_mobilenetv1/retrained_labels.txt   \\\n--architecture =mobilenet_1.0_224 \\\n--image_dir= your dataset directory\n```", "```\ntensorboard --logdir retrain_logs\n```", "```\npython label_image.py\n```"]