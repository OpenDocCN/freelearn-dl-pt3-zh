["```\nEffect: \"Allow\"\nAction:\n    \"sqs:ReceiveMessage\"\n    \"sqs:DeleteMessage\"\n    \"sqs:GetQueueAttributes\"\nResource:\n    arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:ReadSQS\n```", "```\nevents:\n    sqs:\n      arn:\n        Fn::GetAtt:\n          ReadSQS\n          Arn\n```", "```\nresources:\n  Resources: \n    WriteSQS: \n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: \"WriteSQS\"\n    ReadSQS: \n     Type: AWS::SQS::Queue\n     Properties:\n        QueueName: \"ReadSQS\"\n```", "```\nplugins:\n  - serverless-pseudo-parameters\n```", "```\npackage:\n  exclude:\n    - node_modules/**\n```", "```\nResource:\n  - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:ReadSQS\nEffect: \"Allow\"\nAction:\n  - \"sqs:SendMessage\"\n  - \"sqs:GetQueueUrl\"\nResource:\n  - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:WriteSQS\n```", "```\nimport boto3\n\ndef handler(event,context):\n    for message in event['Records']:\n        client = boto3.client('sqs')\n        sqsAddress = client.get_queue_url(QueueName='WriteSQS')\n        response = client.send_message(QueueUrl=sqsAddress['QueueUrl'],\n                                        MessageBody=message['body'])\n    return\n```", "```\nnpm install serverless-pseudo-parameters\n```", "```\nserverless deploy\n```", "```\naws sqs get-queue-url --queue-name ReadSQS\n```", "```\nEffect: \"Allow\"\nAction:\n  - \"s3:ListBucket\"\nResource:\n  - arn:aws:s3:::serverlessdeeplearning\nEffect: \"Allow\"\nAction:\n  - \"s3:GetObject\"\nResource:\n  - arn:aws:s3:::serverlessdeeplearning/*\n```", "```\n- sqs:\n    arn:\n      Fn::GetAtt:\n        - DLReadSQS\n        - Arn\n```", "```\nimport boto3\nimport numpy as np\nimport tensorflow as tf\nimport os.path\nimport re\nfrom urllib.request import urlretrieve\nimport json\nSESSION = None\nstrBucket = 'serverlessdeeplearning'\ndef handler(event, context):\n    global strBucket\n    global SESSION\n    if not os.path.exists('/tmp/imagenet/'):\n       os.makedirs('/tmp/imagenet/')\n       ...\n```", "```\nif ('Records' in event):\n    for message in event['Records']:\n        urlretrieve(message['body'].strip('\\''), strFile)\n        vecResult = run_inference_on_image(strFile)\n        client = boto3.client('sqs')\n        sqsAddress = client.get_queue_url(QueueName='DLWriteSQS')\n        response = client.send_message(QueueUrl=sqsAddress['QueueUrl'],\n                                       MessageBody=vecResult[0])\n else:\n        downloadFromS3(strBucket,'imagenet/inputimage.png',strFile)\n        strResult = run_inference_on_image(strFile)\n```"]