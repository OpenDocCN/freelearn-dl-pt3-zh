["```\nimport tensorflow as tf\n#To check the version of TensorFlow\nprint(tf.__version__)\n```", "```\n2.8.0\n```", "```\nimport numpy as np\nfrom numpy import *\n```", "```\n#Creating a tensor object using tf.constant\na_constant = tf.constant([1, 2, 3, 4 ,5, 6])\na_constant\n```", "```\n<tf.Tensor: shape=(6,), dtype=int32,\n    numpy=array([1, 2, 3, 4, 5, 6], dtype=int32)>\n```", "```\n#Creating a tensor object using tf.Variable\na_variable = tf.Variable([1, 2, 3, 4 ,5, 6])\na_variable\n```", "```\n<tf.Variable 'Variable:0' shape=(6,) dtype=int32,\n    numpy=array([1, 2, 3, 4, 5, 6], dtype=int32)>\n```", "```\n# Creating tensors using the range function\na_range = tf.range(start=1, limit=7)\na_range\n```", "```\n<tf.Tensor: shape=(6,), dtype=int32,\n    numpy=array([1, 2, 3, 4, 5, 6], dtype=int32)>\n```", "```\n#scalar\na = tf.constant(1)\na\n```", "```\n<tf.Tensor: shape=(), dtype=int32, numpy=1>\n```", "```\n#vector\nb= tf.constant([1.2,2.3,3.4,4.5])\nb\n```", "```\n<tf.Tensor: shape=(4,), dtype=float32,\n    numpy=array([1.2, 2.3, 3.4, 4.5], dtype=float32)>\n```", "```\n#matrix\nc =tf.constant([[1,2],[3,4]])\nc\n<tf.Tensor: shape=(2, 2), dtype=int32,\n    numpy= array([[1, 2], [3, 4]], dtype=int32)>\n```", "```\n#3-dimensional tensor\nd=tf.constant([[[1,2],[3,4],[5,6]],[[7,8],[9,10],[11,12]]])\nd\n```", "```\n<tf.Tensor: shape=(2, 3, 2), dtype=int32,\n    numpy= array([[[ 1,  2],[ 3,  4],[ 5,  6]],\n       [[ 7,  8], [ 9, 10], [11, 12]]], dtype=int32)>\n```", "```\n#scalar\na = tf.Variable(1.1, name=\"TDC\", dtype=float16)\na\n<tf.Variable 'TDC:0' shape=() dtype=float16, numpy=1.1>\n```", "```\n#vector\nb= tf.Variable([1.2,2.3,3.4,4.5], name=\"Vector\", dtype=float16)\nb\n```", "```\n<tf.Variable ''Vector:0' shape=(4,) dtype=float16,\n    numpy=array([1.2, 2.3, 3.4, 4.5])>\n```", "```\n#scalar\na = tf.constant(1.1)\n#vector\nb= tf.constant([1.2,2.3,3.4,4.5])\n#matrix\nc =tf.constant([[1,2],[3,4]])\n#Generating tensor rank\nprint(\"The rank of the scalar is: \",tf.rank(a))\nprint(\" \")\nprint(\"The rank of the vector is: \",tf.rank(b))\nprint(\" \")\nprint(\"The rank of the matrix is: \",tf.rank(c))\n```", "```\nThe rank of the scalar is: tf.Tensor(0, shape=(), dtype=int32)\nThe rank of the vector is: tf.Tensor(1, shape=(), dtype=int32)\nThe rank of the matrix is: tf.Tensor(2, shape=(), dtype=int32)\n```", "```\nprint(\"The rank of the scalar is: \",tf.rank(a).numpy())\nThe rank of the scalar is:  0\n```", "```\n#Generating details of the dimension\nprint(\"The dimension of the scalar is: \",a.ndim)\nprint(\" \")\nprint(\"The dimension of the vector is: \",b.ndim)\nprint(\" \")\nprint(\"The dimension of the matrix is: \",c.ndim)\n```", "```\nThe dimension of the scalar is: 0\nThe dimension of the vector is: 1\nThe dimension of the matrix is: 2\n```", "```\n#printing the data type\nprint(\"The data type of the scalar is: \",a.dtype)\nprint(\" \")\nprint(\"The data type of the vector is: \",b.dtype)\nprint(\" \")\nprint(\"The data type of the matrix is: \",c.dtype)\n```", "```\nThe data type of the scalar is:  <dtype: 'float32'>\nThe data type of the vector is:  <dtype: 'float32'>\nThe data type of the matrix is:  <dtype: 'int32'>\n```", "```\n#Generating details of the tensor shape\nprint(\"The Shape of the scalar is: \",a.shape)\nprint(\" \")\nprint(\"The Shape of the vector is: \",b.shape)\nprint(\" \")\nprint(\"The Shape of the matrix is: \",c.shape)\n```", "```\nThe Shape of the scalar is:  ()\nThe Shape of the vector is:  (4,)\nThe Shape of the matrix is:  (2, 2)\n```", "```\n#Generating number of elements in a tensor\nprint(\"The Size of the scalar is: \",tf.size(a))\nprint(\" \")\nprint(\"The Size of the vector is: \",tf.size(b))\nprint(\" \")\nprint(\"The Size of the matrix is: \",tf.size(c))\n```", "```\nThe Size of the scalar is:  tf.Tensor(1, shape=(), dtype=int32)\nThe Size of the vector is:  tf.Tensor(4, shape=(), dtype=int32)\nThe Size of the matrix is:  tf.Tensor(4, shape=(), dtype=int32)\n```", "```\na=tf.constant([1,2,3,4,5])\na\n```", "```\n<tf.Tensor: shape=(5,), dtype=int32, numpy=array([1, 2, 3, 4, 5], dtype=int32)>\n```", "```\na =tf.cast(a,dtype=tf.float32)\na\n```", "```\n<tf.Tensor: shape=(5,), dtype=float32,\n    numpy=array([1., 2., 3., 4., 5.], dtype=float32)>\n```", "```\n# Create a 2 x 2 matrix\na = tf.constant([[1, 2],[3, 4]], dtype=float32)\na\n```", "```\n<tf.Tensor: shape=(2, 2), dtype=float32, \n    numpy=array([[1., 2.], [3., 4.]], dtype=float32)>\n```", "```\n# Indexing\na[0]\n```", "```\n<tf.Tensor: shape=(2,), dtype=float32,\n    numpy=array([1., 2.], dtype=float32)>\n```", "```\n# Indexing\na[0][1]\n```", "```\n<tf.Tensor: shape=(), dtype=float32, numpy=2.0>\n```", "```\nc = tf.constant([0, 1, 2, 3, 4, 5])\nprint(tf.slice(c,begin=[2],size=[4]))\n```", "```\ntf.Tensor([2 3 4 5], shape=(4,), dtype=int32)\n```", "```\ntf.expand_dims(a,axis=0)\n```", "```\n<tf.Tensor: shape=(1, 2, 2), dtype=float32,\n    numpy= array([[[1., 2.], [3., 4.]]], dtype=float32)>\n```", "```\n(tf.expand_dims(a,axis=0)).shape,\n(tf.expand_dims(a,axis=1)).shape,\n(tf.expand_dims(a,axis=-1)).shape\n```", "```\n(TensorShape([1, 2, 2]), TensorShape([2, 1, 2]),\n    TensorShape([2, 2, 1]))\n```", "```\nimport random\nrandom.seed(22)\na = random.sample(range(1, 100), 50)\na = tf.constant(a)\n```", "```\n<tf.Tensor: shape=(50,), dtype=int32, numpy=array(\n    [16, 83,  6, 74, 19, 80, 95, 68, 66, 86, 54, 12, 91,\n    13, 23,  9, 82, 84, 30, 62, 89, 33, 78,  2, 97, 21,\n    59, 34, 48, 38, 35, 18, 46, 60, 27, 26, 73, 76, 94,\n    72, 15, 40, 96, 44, 61,  8, 79, 93, 11, 14],\n    dtype=int32)>\n```", "```\nprint(\"The smallest number in our vector is : \",\n    tf.reduce_min(a).numpy())\nprint(\" \")\nprint(\"The largest number in our vector is: \",\n    tf.reduce_max(a).numpy())\nprint(\" \")\nprint(\"The sum of our vector is : \",\n    tf.reduce_sum(a).numpy())\nprint(\" \")\nprint(\"The mean of our vector is: \",\n    tf.reduce_mean(a).numpy())\n```", "```\nThe smallest number in our vector is :  1\nThe largest number in our vector is:  99\nThe sum of our vector is :  2273\nThe mean of our vector is:  45\n```", "```\nprint(\"The position that holds the lowest value is : \",\n    tf.argmin(a).numpy())\nprint(\" \")\nprint(\"The position that holds the highest value is: \",\n    tf.argmax(a).numpy())\n```", "```\nThe position that holds the lowest value is :  14\nThe position that holds the highest value is:  44\n```", "```\na[14].numpy(), a[44].numpy()\n```", "```\n(1,99)\n```", "```\n# Create a 3 x 4 matrix\na = tf.constant([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\na\n```", "```\n<tf.Tensor: shape=(3, 4), dtype=int32, \n    numpy=array([[ 1,  2,  3,  4],\n        [ 5,  6,  7,  8],\n        [ 9, 10, 11, 12]], dtype=int32)>\n```", "```\ntf.reshape(a, shape=(2, 2, 3))\n```", "```\n<tf.Tensor: shape=(2, 2, 3), dtype=int32, \n    numpy=array([[[ 1,  2,  3], [ 4,  5,  6]],\n        [[ 7,  8,  9], [10, 11, 12]]], dtype=int32)>\n```", "```\ntf.transpose(a)\n```", "```\n<tf.Tensor: shape=(4, 3), dtype=int32, \n    numpy=array([[ 1,  5,  9],\n        [ 2,  6, 10],\n        [ 3,  7, 11],\n        [ 4,  8, 12]], dtype=int32)>\n```", "```\na= tf.constant([1,2,3])\na\n```", "```\n<tf.Tensor: shape=(3,), dtype=int32, numpy=array([1, 2, 3],\n    dtype=int32)>\n```", "```\n#Addition operation\nprint((a+4).numpy())\nprint(\" \")\n#Subtraction operation\nprint((a-4).numpy())\nprint(\" \")\n#Multiplication Operation\nprint((a*4).numpy())\nprint(\" \")\n#Division Operation\nprint((a/4).numpy())\nprint(\" \")\n```", "```\n[5 6 7]\n[-3 -2 -1]\n[ 4  8 12]\n[0.25 0.5  0.75]\n```", "```\n# 3 X 2 MATRIX\na = tf.constant([[1, 2], [3, 4], [5, 6]])\n#2 X 3 MATRIX\nb = tf.constant([[7,8,9], [10,11,12]])\n```", "```\ntf.matmul(a,b)\n```", "```\n<tf.Tensor: shape=(3, 3), dtype=int32,\nnumpy= array([[ 27,  30,  33],[ 61,  68,  75],\n    [ 95, 106, 117]], dtype=int32)>\n```", "```\ntf.matmul(a,tf.transpose(a, perm=[1,0]))\n```", "```\n<tf.Tensor: shape=(3, 3), dtype=int32,\n    numpy= array([[ 5, 11, 17], [11, 25, 39],\n    [17, 39, 61]], dtype=int32)>\n```", "```\n    import tensorflow as tf\n    ```", "```\n    from tensorflow import keras\n    ```", "```\n    from tensorflow.keras import Sequential\n    ```", "```\n    from tensorflow.keras.layers import Dense\n    ```", "```\n    print(tf.__version__)\n    ```", "```\n    #import additional libraries\n    ```", "```\n    import numpy as np\n    ```", "```\n    import matplotlib.pyplot as plt\n    ```", "```\n    # Hours of study\n    ```", "```\n    X = [20,23,25,28,30,37,40,43,46]\n    ```", "```\n    # Test Scores\n    ```", "```\n    y = [45, 51, 55, 61, 65, 79, 85, 91, 97]\n    ```", "```\n    plt.plot(X, y)\n    ```", "```\n    plt.title(\"Exam Performance graph\")\n    ```", "```\n    plt.xlabel('Hours of Study')\n    ```", "```\n    plt.ylabel('Test Score')\n    ```", "```\n    plt.show()\n    ```", "```\n    study_model = Sequential([Dense(units=1,\n    ```", "```\n        input_shape=[1])])\n    ```", "```\n    study_model.compile(optimizer='adam',\n    ```", "```\n        loss='mean_squared_error')\n    ```", "```\n    X= np.array(X, dtype=int)\n    ```", "```\n    y= np.array(y, dtype=int)\n    ```", "```\n    #fitting the model\n    ```", "```\n    history= study_model.fit(X, y, epochs=2500)\n    ```", "```\n#Let us predict how well a student will perform based on their study time\nn=38 #Hours of study\nresult =study_model.predict([n])[0][0] #Result\nrounded_number = round(81.0729751586914, 2)\n```", "```\nprint(f\"If I study for {n} hours,\n     I will get { rounded_number} marks as my grade.\")\nIf I study for 38 hours, I will get 81.07 marks as my grade.\n```", "```\ntf.variable([1,2,3,4])\n```"]