["```\n    import tensorflow as tf\n    ```", "```\n    from tensorflow import keras\n    ```", "```\n    import pandas as pd\n    ```", "```\n    import random\n    ```", "```\n    import numpy as np\n    ```", "```\n    import matplotlib.pyplot as plt #helper libraries\n    ```", "```\n    from tensorflow.keras.utils import plot_model\n    ```", "```\n    #Lets import the fashion mnist\n    ```", "```\n    fashion_data = keras.datasets.fashion_mnist\n    ```", "```\n    #Lets create of numpy array of training and testing data\n    ```", "```\n    (train_images, train_labels), (test_images,\n    ```", "```\n        test_labels) = fashion_data.load_data()\n    ```", "```\n    #We create a list of the categories\n    ```", "```\n    class_names=['Top', 'Trouser','Pullover', 'Dress', 'Coat', \n    ```", "```\n        'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankleboot']\n    ```", "```\n    # Display a sample image from the training data (index 7)\n    ```", "```\n    plt.imshow(train_images[7])\n    ```", "```\n    plt.grid(False)\n    ```", "```\n    plt.axis('off')\n    ```", "```\n    plt.show()\n    ```", "```\n    #Lets check the shape of our training images and testing images\n    ```", "```\n    train_images.shape, test_images.shape\n    ```", "```\n    ((60000, 28, 28), (10000, 28, 28))\n    ```", "```\n    df=pd.DataFrame(np.unique(train_labels,\n    ```", "```\n        return_counts=True)).T\n    ```", "```\n    dict = {0: ‹Label›,1: ‹Count›}\n    ```", "```\n    df.rename(columns=dict,\n    ```", "```\n        inplace=True)\n    ```", "```\n    df\n    ```", "```\n    plt.figure(figsize=(9,9))\n    ```", "```\n    for i in range(16):\n    ```", "```\n        plt.subplot(4,4,i+1)\n    ```", "```\n        plt.xticks([])\n    ```", "```\n        plt.yticks([])\n    ```", "```\n        plt.grid(False)\n    ```", "```\n        plt.imshow(train_images[i])\n    ```", "```\n        plt.title(class_names[train_labels[i]])\n    ```", "```\n    plt.show()\n    ```", "```\n#it's important that the training and testing set are preprocessed in the same way.\ntrain_images=train_images/255.0\ntest_images=test_images/255.0\n```", "```\n#Step 1:  Model configuration\nmodel=keras.Sequential([\n    keras.layers.Flatten(input_shape=(28,28)),\n    keras.layers.Dense(64, activation=\"relu\"),\n    keras.layers.Dense(10,activation=\"softMax\")\n])\n#Here we flatten the data\n```", "```\n#Step 2: Compiling the model, we add the loss, optimizer and evaluation metrics here\nmodel.compile(optimizer='adam',\n    loss=›sparse_categorical_crossentropy',\n    metrics=[‹accuracy›])\n```", "```\nmodel.summary()\n```", "```\nplot_model(model, to_file='model_plot.png', show_shapes=True, \n    show_layer_names=True)\n```", "```\n#Step 3: We fit our data to the model\n history= model.fit(train_images, train_labels, epochs=5)\n```", "```\n1875/1875 [==============================] – 4s 2ms/step – loss: 0.5206 – accuracy: 0.8183\nEpoch 2/5\n1875/1875 [==============================] – 4s 2ms/step – loss: 0.3937 – accuracy: 0.8586\nEpoch 3/5\n1875/1875 [==============================] – 4s 2ms/step – loss: 0.3540 – accuracy: 0.8722\nEpoch 4/5\n1875/1875 [==============================] – 4s 2ms/step – loss: 0.3301 – accuracy: 0.8790\nEpoch 5/5\n1875/1875 [==============================] – 4s 2ms/step – loss: 0.3131 – accuracy: 0.8850\n```", "```\n# Plot history for accuracy\nplt.plot(history.history['accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['Train'], loc='lower right')\nplt.show()\n# Plot history for loss\nplt.plot(history.history['loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['Train'], loc='upper right')\nplt.show()\n```", "```\ntest_loss,test_acc =model.evaluate(test_images,test_labels)\nprint('Test Accuracy: ', test_acc)\n```", "```\npredictions=model.predict(test_images)\npredictions[0].round(2)\n```", "```\narray([0.  , 0.  , 0.  , 0.  , 0.  ,\n    0.13, 0.  , 0.16, 0.  , 0.7 ],\n    dtype=float32)\n```", "```\nnp.argmax(predictions[0]),test_labels[0]\n```", "```\n# Let us plot 16 random images and compare the labels with the model's prediction\nfigure = plt.figure(figsize=(9, 9))\nfor i, index in enumerate(np.random.choice(test_images.shape[0],\nsize=16, replace=False)):\n    ax = figure.add_subplot(4,4,i + 1,xticks=[], yticks=[])\n    # Display each image\n    ax.imshow(np.squeeze(test_images[index]))\n    predict_index = np.argmax(predictions[index])\n    true_index = test_labels[index]\n    # Set the title for each image\n    ax.set_title(f»{class_names[predict_index]} (\n    {class_names[true_index]})\",color=(\n        \"green\" if predict_index == true_index else «red»))\n```"]