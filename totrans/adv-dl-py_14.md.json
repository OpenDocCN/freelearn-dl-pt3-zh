["```\nimport random\n\nimport numpy as np\nimport tensorflow as tf\n```", "```\ndef create_pairs(inputs: np.ndarray, labels: np.ndarray):\n    num_classes = 10\n\n    digit_indices = [np.where(labels == i)[0] for i in range(num_classes)]\n    pairs = list()\n    labels = list()\n    n = min([len(digit_indices[d]) for d in range(num_classes)]) - 1\n    for d in range(num_classes):\n        for i in range(n):\n            z1, z2 = digit_indices[d][i], digit_indices[d][i + 1]\n            pairs += [[inputs[z1], inputs[z2]]]\n            inc = random.randrange(1, num_classes)\n            dn = (d + inc) % num_classes\n            z1, z2 = digit_indices[d][i], digit_indices[dn][i]\n            pairs += [[inputs[z1], inputs[z2]]]\n            labels += [1, 0]\n\n    return np.array(pairs), np.array(labels, dtype=np.float32)\n```", "```\ndef create_base_network():\n    return tf.keras.models.Sequential([\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dropout(0.1),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dropout(0.1),\n        tf.keras.layers.Dense(64, activation='relu'),\n    ])\n```", "```\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\nx_train = x_train.astype(np.float32)\nx_test = x_test.astype(np.float32)\nx_train /= 255\nx_test /= 255\ninput_shape = x_train.shape[1:]\n```", "```\ntrain_pairs, tr_labels = create_pairs(x_train, y_train)\ntest_pairs, test_labels = create_pairs(x_test, y_test)\n```", "```\nbase_network = create_base_network()\n```", "```\n# Create first half of the siamese system\ninput_a = tf.keras.layers.Input(shape=input_shape)\n\n# Note how we reuse the base_network in both halfs\nencoder_a = base_network(input_a)\n\n# Create the second half of the siamese system\ninput_b = tf.keras.layers.Input(shape=input_shape)\nencoder_b = base_network(input_b)\n```", "```\nl1_dist = tf.keras.layers.Lambda(\n    lambda embeddings: tf.keras.backend.abs(embeddings[0] - embeddings[1])) \\\n    ([encoder_a, encoder_b])\n```", "```\nflattened_weighted_distance = tf.keras.layers.Dense(1, activation='sigmoid') \\\n    (l1_dist)\n```", "```\n# Build the model\nmodel = tf.keras.models.Model([input_a, input_b], flattened_weighted_distance)\n\n# Train\nmodel.compile(loss='binary_crossentropy',\n              optimizer=tf.keras.optimizers.Adam(),\n              metrics=['accuracy'])\n\nmodel.fit([train_pairs[:, 0], train_pairs[:, 1]], tr_labels,\n          batch_size=128,\n          epochs=20,\n          validation_data=([test_pairs[:, 0], test_pairs[:, 1]], test_labels))\n```"]