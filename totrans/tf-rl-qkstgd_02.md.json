["```\nsudo apt-get install python-numpy python-scipy python-matplotlib\n```", "```\nimport numpy as np \nimport sys \nimport matplotlib.pyplot as plt\n```", "```\nnrows = 3\nncols = 12\nnact = 4 \n```", "```\nnepisodes = 100000\nepsilon = 0.1\nalpha = 0.1\ngamma = 0.95\n```", "```\nreward_normal = -1\nreward_cliff = -100\nreward_destination = -1\n```", "```\nQ = np.zeros((nrows,ncols,nact),dtype=np.float)\n```", "```\ndef go_to_start():\n    # start coordinates\n    y = nrows\n    x = 0\n    return x, y\n```", "```\ndef random_action():\n    # a = 0 : top/north\n    # a = 1 : right/east\n    # a = 2 : bottom/south\n    # a = 3 : left/west\n    a = np.random.randint(nact)\n    return a\n```", "```\ndef move(x,y,a):\n    # state = 0: OK\n    # state = 1: reached destination\n    # state = 2: fell into cliff\n    state = 0\n\n   if (x == 0 and y == nrows and a == 0):\n     # start location\n     x1 = x\n     y1 = y - 1\n     return x1, y1, state\n   elif (x == ncols-1 and y == nrows-1 and a == 2):\n     # reached destination\n     x1 = x\n     y1 = y + 1\n     state = 1\n     return x1, y1, state\n   else:\n     # inside grid; perform action\n     if (a == 0):\n       x1 = x\n       y1 = y - 1\n     elif (a == 1):\n       x1 = x + 1\n       y1 = y\n     elif (a == 2):\n       x1 = x\n       y1 = y + 1\n     elif (a == 3):\n       x1 = x - 1\n       y1 = y\n\n     # don't allow agent to leave boundary\n     if (x1 < 0):\n       x1 = 0\n     if (x1 > ncols-1):\n       x1 = ncols-1\n     if (y1 < 0):\n       y1 = 0\n     if (y1 > nrows-1):\n       state = 2\n\n   return x1, y1, state\n```", "```\ndef exploit(x,y,Q):\n   # start location\n   if (x == 0 and y == nrows):\n     a = 0\n     return a\n\n   # destination location\n   if (x == ncols-1 and y == nrows-1):\n     a = 2\n     return a\n\n   if (x == ncols-1 and y == nrows):\n     print(\"exploit at destination not possible \")\n     sys.exit()\n\n   # interior location\n   if (x < 0 or x > ncols-1 or y < 0 or y > nrows-1):\n     print(\"error \", x, y)\n     sys.exit()\n\n   a = np.argmax(Q[y,x,:])\n   return a\n```", "```\ndef bellman(x,y,a,reward,Qs1a1,Q):\n  if (y == nrows and x == 0):\n    # at start location; no Bellman update possible\n    return Q\n\n  if (y == nrows and x == ncols-1):\n    # at destination location; no Bellman update possible\n    return Q\n\n  # perform the Bellman update \n  Q[y,x,a] = Q[y,x,a] + alpha*(reward + gamma*Qs1a1 - Q[y,x,a])\n  return Q\n```", "```\ndef explore_exploit(x,y,Q):\n  # if we end up at the start location, then exploit\n  if (x == 0 and y == nrows):\n     a = 0\n     return a\n\n  # call a uniform random number\n  r = np.random.uniform()\n\n  if (r < epsilon):\n    # explore\n    a = random_action()\n  else:\n    # exploit\n    a = exploit(x,y,Q)\n  return a\n```", "```\nfor n in range(nepisodes+1):\n\n  # print every 1000 episodes \n  if (n % 1000 == 0):\n    print(\"episode #: \", n)\n\n  # start\n  x, y = go_to_start()\n\n  # explore or exploit\n  a = explore_exploit(x,y,Q)\n\n  while(True):\n   # move one step\n   x1, y1, state = move(x,y,a)\n```", "```\n   # Bellman update\n   if (state == 1):\n      reward = reward_destination\n      Qs1a1 = 0.0\n      Q = bellman(x,y,a,reward,Qs1a1,Q)\n      break\n   elif (state == 2):\n      reward = reward_cliff\n      Qs1a1 = 0.0\n      Q = bellman(x,y,a,reward,Qs1a1,Q)\n      break\n   elif (state == 0):\n      reward = reward_normal\n      # Sarsa\n      a1 = explore_exploit(x1,y1,Q)\n      if (x1 == 0 and y1 == nrows):\n        # start location\n        Qs1a1 = 0.0\n      else:\n        Qs1a1 = Q[y1,x1,a1]\n\n      Q = bellman(x,y,a,reward,Qs1a1,Q)\n      x = x1\n      y = y1\n      a = a1\n```", "```\nfor i in range(nact):\n  plt.subplot(nact,1,i+1)\n  plt.imshow(Q[:,:,i])\n  plt.axis('off')\n  plt.colorbar()\n  if (i == 0):\n    plt.title('Q-north')\n  elif (i == 1):\n    plt.title('Q-east')\n  elif (i == 2):\n    plt.title('Q-south')\n  elif (i == 3):\n    plt.title('Q-west')\n  plt.savefig('Q_sarsa.png')\n  plt.clf()\n  plt.close()\n```", "```\npath = np.zeros((nrows,ncols,nact),dtype=np.float)\nx, y = go_to_start()\nwhile(True):\n a = exploit(x,y,Q)\n print(x,y,a)\n x1, y1, state = move(x,y,a)\n if (state == 1 or state == 2):\n print(\"breaking \", state)\n break\n elif (state == 0):\n x = x1\n y = y1\n if (x >= 0 and x <= ncols-1 and y >= 0 and y <= nrows-1):\n path[y,x] = 100.0\nplt.imshow(path)\nplt.savefig('path_sarsa.png')\n```", "```\ndef max_Q(x,y,Q):\n  a = np.argmax(Q[y,x,:]) \n  return Q[y,x,a]\n```", "```\nQs1a1 = max_Q(x1,y1,Q)\n```", "```\n# explore or exploit\na = explore_exploit(x,y,Q)\n```", "```\nimport numpy as np\nimport sys\nimport matplotlib.pyplot as plt\n\nnrows = 3\nncols = 12\nnact = 4\n\nnepisodes = 100000\nepsilon = 0.1\nalpha = 0.1\ngamma = 0.95\n\nreward_normal = -1\nreward_destination = -1\n\n# obstacles\nobstacle_cells = [(4,1), (4,2), (8,0), (8,1)]\n```", "```\ndef move(x,y,a):\n  # state = 0: OK\n  # state = 1: reached destination\n  state = 0 \n\n  if (x == 0 and y == nrows and a == 0):\n    # start location\n    x1 = x\n    y1 = y - 1 \n    return x1, y1, state \n  elif (x == ncols-1 and y == nrows-1 and a == 2):\n    # reached destination\n    x1 = x\n    y1 = y + 1\n    state = 1\n    return x1, y1, state\n  else: \n\n    if (a == 0):\n      x1 = x\n      y1 = y - 1\n    elif (a == 1):\n      x1 = x + 1\n      y1 = y\n    elif (a == 2):\n      x1 = x\n      y1 = y + 1\n    elif (a == 3):\n      x1 = x - 1 \n      y1 = y\n\n    if (x1 < 0):\n     x1 = 0\n    if (x1 > ncols-1):\n     x1 = ncols-1\n    if (y1 < 0):\n     y1 = 0\n    if (y1 > nrows-1):\n     y1 = nrows-1\n\n    # check for obstacles; reset to original (x,y) if inside obstacle\n    for i in range(len(obstacle_cells)):\n      if (x1 == obstacle_cells[i][0] and y1 == obstacle_cells[i][1]):\n         x1 = x\n         y1 = y \n\n    return x1, y1, state \n```"]