["```\npip install boto3\n```", "```\nimport os\naws_access_key_id= os.environ['aws_access_key_id']\naws_secret_access_key = os.environ['aws_secret_access_key']\n```", "```\nimport boto3\ns3 = boto3.resource(\n    's3',\n    aws_access_key_id=aws_access_key_id,\n    aws_secret_access_key=aws_secret_access_key\n)\n```", "```\nfor bucket in s3.buckets.all():\n print(bucket.name)\n```", "```\ndata = open('my_image.jpeg', 'rb')\ns3.Bucket('demo-bucket-sayak').put_object(Key='my_image.jpeg', Body=data)\n```", "```\ns3.Object(bucket_name='demo-bucket-sayak', key='my_image.jpeg')\n```", "```\nimport os\naws_access_key_id= os.environ['aws_access_key_id']\naws_secret_access_key = os.environ['aws_secret_access_key']\n```", "```\nimport boto3\nclient=boto3.client('rekognition', region_name='us-east-1', aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key) \n```", "```\nimage = open(\"image.jpg\", \"rb\")\n```", "```\nresponse = client.recognize_celebrities(Image={'Bytes':image.read()})\n```", "```\n{'CelebrityFaces': [{'Urls': ['www.imdb.com/name/nm1682433'],\n 'Name': 'Barack Obama',\n 'Id': '3R3sg9u',\n 'Face': {'BoundingBox': {'Width': 0.3392857015132904,\n 'Height': 0.27056020498275757,\n 'Left': 0.324404776096344,\n 'Top': 0.06436233967542648},\n 'Confidence': 99.97088623046875,\n 'Landmarks': [{'Type': 'eyeLeft',\n 'X': 0.44199424982070923,\n 'Y': 0.17130307853221893},\n {'Type': 'eyeRight', 'X': 0.5501364469528198, 'Y': 0.1697501391172409},\n {'Type': 'nose', 'X': 0.4932120144367218, 'Y': 0.2165488302707672},\n {'Type': 'mouthLeft', 'X': 0.43547138571739197, 'Y': 0.25405779480934143},\n {'Type': 'mouthRight', 'X': 0.552975058555603, 'Y': 0.2527817189693451}],\n 'Pose': {'Roll': -1.301725149154663,\n 'Yaw': -1.5216708183288574,\n 'Pitch': 1.9823487997055054},\n 'Quality': {'Brightness': 82.28946685791016,\n 'Sharpness': 96.63640594482422}},\n 'MatchConfidence': 96.0}],\n 'UnrecognizedFaces': [],\n 'ResponseMetadata': {'RequestId': 'ba909ea2-67f1-11e9-8ac8-39b792b4a620',\n 'HTTPStatusCode': 200,\n 'HTTPHeaders': {'content-type': 'application/x-amz-json-1.1',\n 'date': 'Fri, 26 Apr 2019 07:05:55 GMT',\n 'x-amzn-requestid': 'ba909ea2-67f1-11e9-8ac8-39b792b4a620',\n 'content-length': '813',\n 'connection': 'keep-alive'},\n 'RetryAttempts': 0}}\n```", "```\nfrom PIL import Image\nfrom IPython.display import display\n\nim=Image.open('image.jpg')\nw, h = im.size\n\nceleb = response['CelebrityFaces'][0]['Face']['BoundingBox']\n\nx1 = (celeb[\"Left\"])*w\ny1 = (celeb[\"Top\"])*h\nx2 = (celeb[\"Left\"] + celeb[\"Width\"])*w\ny2 = (celeb[\"Top\"] + celeb[\"Height\"])*h\n\nbox=(x1,y1,x2,y2)\nim1=im.crop(box)\n\ndisplay(im1)\n```", "```\n[LWA Client ID]\namzn1.application-oa2-client.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n[LWA Client Secret]\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n[Alexa Skill ID]\namzn1.ask.skill.XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\n[AWS Lambda ARN]\narn:aws:lambda:us-east-1:XXXXXXXXXXXX:function:skill-sample-language-smarthome-switch\n\n[APIs]\nhttps://pitangui.amazon.com/api/skill/link/XXXXXXXXXXXXXX\nhttps://layla.amazon.com/api/skill/link/XXXXXXXXXXXXXX\nhttps://alexa.amazon.co.jp/api/skill/link/XXXXXXXXXXXXXX\n```", "```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Effect\": \"Allow\",\n \"Action\": [\n \"logs:CreateLogStream\",\n \"dynamodb:UpdateItem\",\n \"logs:CreateLogGroup\",\n \"logs:PutLogEvents\"\n ],\n \"Resource\": \"*\"\n }\n ]\n }\n```", "```\nimport boto3\nimport json\nimport random\nimport uuid\nimport time\n```", "```\nclass AlexaResponse:\n\n    def __init__(self, **kwargs):\n\n        self.context_properties = []\n        self.payload_endpoints = []\n\n        # Set up the response structure\n        self.context = {}\n        self.event = {\n            'header': {\n                'namespace': kwargs.get('namespace', 'Alexa'),\n                'name': kwargs.get('name', 'Response'),\n                'messageId': str(uuid.uuid4()),\n                'payloadVersion': kwargs.get('payload_version', '3')\n            },\n            'endpoint': {\n                \"scope\": {\n                    \"type\": \"BearerToken\",\n                    \"token\": kwargs.get('token', 'INVALID')\n                },\n                \"endpointId\": kwargs.get('endpoint_id', 'INVALID')\n            },\n            'payload': kwargs.get('payload', {})\n        }\n\n        if 'correlation_token' in kwargs:\n            self.event['header']['correlation_token'] = kwargs.get('correlation_token', 'INVALID')\n\n        if 'cookie' in kwargs:\n            self.event['endpoint']['cookie'] = kwargs.get('cookie', '{}')\n\n        if self.event['header']['name'] == 'AcceptGrant.Response' or self.event['header']['name'] == 'Discover.Response':\n            self.event.pop('endpoint')\n```", "```\ndef add_context_property(self, **kwargs):\n    self.context_properties.append(self.create_context_property(**kwargs))\n\ndef add_cookie(self, key, value):\n\n    if \"cookies\" in self is None:\n        self.cookies = {}\n\n    self.cookies[key] = value\n\ndef add_payload_endpoint(self, **kwargs):\n    self.payload_endpoints.append(self.create_payload_endpoint(**kwargs))\n```", "```\n    def get(self, remove_empty=True):\n\n        response = {\n            'context': self.context,\n            'event': self.event\n        }\n\n        if len(self.context_properties) > 0:\n            response['context']['properties'] = self.context_properties\n\n        if len(self.payload_endpoints) > 0:\n            response['event']['payload']['endpoints'] = self.payload_endpoints\n\n        if remove_empty:\n            if len(response['context']) < 1:\n                response.pop('context')\n\n        return response\n\n    def set_payload(self, payload):\n        self.event['payload'] = payload\n\n    def set_payload_endpoint(self, payload_endpoints):\n        self.payload_endpoints = payload_endpoints\n\n    def set_payload_endpoints(self, payload_endpoints):\n        if 'endpoints' not in self.event['payload']:\n            self.event['payload']['endpoints'] = []\n\n        self.event['payload']['endpoints'] = payload_endpoints\n```", "```\naws_dynamodb = boto3.client('dynamodb')\n```", "```\ndef lambda_handler(request, context):\n\n    # JSON dump for the request\n    print('Request: ')\n    print(json.dumps(request))\n\n    if context is not None:\n        print('Context: ')\n        print(context)\n```", "```\n    # Validate we have an Alexa directive\n    if 'directive' not in request:\n        aer = AlexaResponse(\n            name='ErrorResponse',\n            payload={'type': 'INVALID_DIRECTIVE',\n                     'message': 'Missing key: directive, Is the request a valid Alexa Directive?'})\n        return send_response(aer.get())\n```", "```\n    # Check the payload version\n    payload_version = request['directive']['header']['payloadVersion']\n    if payload_version != '3':\n        aer = AlexaResponse(\n            name='ErrorResponse',\n            payload={'type': 'INTERNAL_ERROR',\n                     'message': 'This skill only supports Smart Home API version 3'})\n        return send_response(aer.get())\n```", "```\n    name = request['directive']['header']['name']\n    namespace = request['directive']['header']['namespace']\n```", "```\n    if namespace == 'Alexa.Authorization':\n        if name == 'AcceptGrant':\n            grant_code = request['directive']['payload']['grant']['code']\n            grantee_token = request['directive']['payload']['grantee']['token']\n            aar = AlexaResponse(namespace='Alexa.Authorization', name='AcceptGrant.Response')\n            return send_response(aar.get())\n```", "```\n    if namespace == 'Alexa.Discovery':\n        if name == 'Discover':\n            adr = AlexaResponse(namespace='Alexa.Discovery', name='Discover.Response')\n            capability_alexa = adr.create_payload_endpoint_capability()\n            capability_alexa_powercontroller = adr.create_payload_endpoint_capability(\n                interface='Alexa.PowerController',\n                supported=[{'name': 'powerState'}])\n            adr.add_payload_endpoint(\n                friendly_name='Sample Switch',\n                endpoint_id='sample-switch-01',\n                capabilities=[capability_alexa, capability_alexa_powercontroller])\n            return send_response(adr.get())\n\n        if namespace == 'Alexa.PowerController':\n            endpoint_id = request['directive']['endpoint']['endpointId']\n            power_state_value = 'OFF' if name == 'TurnOff' else 'ON'\n            correlation_token = request['directive']['header']['correlationToken']\n```", "```\n        state_set = set_device_state(endpoint_id=endpoint_id, state='powerState', value=power_state_value)\n        if not state_set:\n            return AlexaResponse(\n                name='ErrorResponse',\n                payload={'type': 'ENDPOINT_UNREACHABLE', 'message': 'Unable to reach endpoint database.'}).get()\n\n        apcr = AlexaResponse(correlation_token=correlation_token)\n        apcr.add_context_property(namespace='Alexa.PowerController', name='powerState', value=power_state_value)\n        return send_response(apcr.get())\n```", "```\ndef send_response(response):\n    print('Response: ')\n    print(json.dumps(response))\n    return response\n```", "```\ndef set_device_state(endpoint_id, state, value):\n    attribute_key = state + 'Value'\n    response = aws_dynamodb.update_item(\n        TableName='SmartHome',\n        Key={'ItemId': {'S': endpoint_id}},\n        AttributeUpdates={attribute_key: {'Action': 'PUT', 'Value': {'S': value}}})\n    print(response)\n    if response['ResponseMetadata']['HTTPStatusCode'] == 200:\n        return True\n    else:\n        return False\n```", "```\n{\n  \"directive\": {\n    \"header\": {\n      \"namespace\": \"Alexa.Discovery\",\n      \"name\": \"Discover\",\n      \"payloadVersion\": \"3\",\n      \"messageId\": \"1bd5d003-31b9-476f-ad03-71d471922820\"\n    },\n    \"payload\": {\n      \"scope\": {\n        \"type\": \"BearerToken\",\n        \"token\": \"access-token-from-skill\"\n      }\n    }\n  }\n}\n```"]