["```\n$ pip install tensorflow\n```", "```\n$ pip install tensorflow-gpu\n```", "```\n$ brew install cmake boost boost-python sdl2 swig wget\n```", "```\n$ apt-get install -y python-pyglet python3-opengl zlib1g-dev libjpeg-dev patchelf cmake swig libboost-all-dev libsdl2-dev libosmesa6-dev xvfb ffmpeg\n```", "```\n$ sudo apt install -y python3-dev zlib1g-dev libjpeg-dev cmake swig python-pyglet python3-opengl libboost-all-dev libsdl2-dev libosmesa6-dev patchelf ffmpeg xvfb \n```", "```\n$ git clone https://github.com/openai/gym.git \n$ cd gym\n$ pip install -e '.[all]'\n```", "```\n$ git clone https://github.com/pybox2d/pybox2d [](https://github.com/pybox2d/pybox2d) $ cd pybox2d\n$ pip install -e .\n```", "```\n$ pip install roboschool\n```", "```\nimport gym\n\n# create the environment \nenv = gym.make(\"CartPole-v1\")\n# reset the environment before starting\nenv.reset()\n\n# loop 10 times\nfor i in range(10):\n    # take a random action\n    env.step(env.action_space.sample())\n    # render the game\n   env.render()\n\n# close the environment\nenv.close()\n\n```", "```\nimport gym\n\n# create and initialize the environment\nenv = gym.make(\"CartPole-v1\")\nenv.reset()\n\n# play 10 games\nfor i in range(10):\n    # initialize the variables\n    done = False\n    game_rew = 0\n\n    while not done:\n        # choose a random action\n        action = env.action_space.sample()\n        # take a step in the environment\n        new_obs, rew, done, info = env.step(action)\n        game_rew += rew\n\n        # when is done, print the cumulative reward of the game and reset the environment\n        if done:\n            print('Episode %d finished, reward:%d' % (i, game_rew))\n            env.reset()\n```", "```\nEpisode: 0, Reward:13\nEpisode: 1, Reward:16\nEpisode: 2, Reward:23\nEpisode: 3, Reward:17\nEpisode: 4, Reward:30\nEpisode: 5, Reward:18\nEpisode: 6, Reward:14\nEpisode: 7, Reward:28\nEpisode: 8, Reward:22\nEpisode: 9, Reward:16\n```", "```\nimport gym\n\nenv = gym.make('CartPole-v1')\nprint(env.observation_space)\n\n```", "```\n>>  Box(4,)\n```", "```\nprint(env.action_space)\n```", "```\n>> Discrete(2)\n```", "```\nprint(env.action_space.sample())\n>> 0\nprint(env.action_space.sample())\n>> 1\n```", "```\nprint(env.observation_space.low)\n>> [-4.8000002e+00 -3.4028235e+38 -4.1887903e-01 -3.4028235e+38]\nprint(env.observation_space.high)\n>> [4.8000002e+00 3.4028235e+38 4.1887903e-01 3.4028235e+38]\n```", "```\nimport tensorflow as tf\n\n# create two constants: a and b\na = tf.constant(4)\nb = tf.constant(3)\n\n# perform a computation\nc = a + b\n\n# create a session\nsession = tf.Session()\n# run the session. It computes the sum\nres = session.run(c)\nprint(res)\n```", "```\n>> Tensor(\"add:0\", shape=(), dtype=int32)\n```", "```\nsession = tf.Session()\nres = session.run(c)\nprint(res)\n\n>> 7\n```", "```\n# constant\na = tf.constant(1)\nprint(a.shape)\n>> ()\n\n# array of five elements\nb = tf.constant([1,2,3,4,5])\nprint(b.shape)\n>> (5,)\n```", "```\na = tf.constant([1,2,3,4,5])\nfirst_three_elem = a[:3]\nfourth_elem = a[3]\n\nsess = tf.Session()\nprint(sess.run(first_three_elem))\n\n>> array([1,2,3])\n\nprint(sess.run(fourth_elem))\n\n>> 4\n```", "```\na = tf.constant([1.0, 1.1, 2.1, 3.1], dtype=tf.float32, name='a_const')\nprint(a)\n\n>> Tensor(\"a_const:0\", shape=(4,), dtype=float32)\n```", "```\nimport tensorflow as tf\n\na = tf.placeholder(shape=(1,3), dtype=tf.float32)\nb = tf.constant([[10,10,10]], dtype=tf.float32)\n\nc = a + b\n\nsess = tf.Session()\nres = sess.run(c, feed_dict={a:[[0.1,0.2,0.3]]})\nprint(res)\n\n>> [[10.1 10.2 10.3]]\n```", "```\nimport tensorflow as tf\nimport numpy as np\n\n# NB: the first dimension is 'None', meaning that it can be of any length\na = tf.placeholder(shape=(None,3), dtype=tf.float32)\nb = tf.placeholder(shape=(None,3), dtype=tf.float32)\n\nc = a + b\nprint(a)\n\n>> Tensor(\"Placeholder:0\", shape=(?, 3), dtype=float32)\n\nsess = tf.Session()\nprint(sess.run(c, feed_dict={a:[[0.1,0.2,0.3]], b:[[10,10,10]]}))\n\n>> [[10.1 10.2 10.3]]\n\nv_a = np.array([[1,2,3],[4,5,6]])\nv_b = np.array([[6,5,4],[3,2,1]])\nprint(sess.run(c, feed_dict={a:v_a, b:v_b}))\n\n>> [[7\\. 7\\. 7.]\n [7\\. 7\\. 7.]]\n```", "```\nimport tensorflow as tf\nimport numpy as np\n\n# variable initialized randomly\nvar = tf.get_variable(\"first_variable\", shape=[1,3], dtype=tf.float32)\n\n# variable initialized with constant values\ninit_val = np.array([4,5])\nvar2 = tf.get_variable(\"second_variable\", shape=[1,2], dtype=tf.int32, initializer=tf.constant_initializer(init_val))\n\n# create the session\nsess = tf.Session()\n# initialize all the variables\nsess.run(tf.global_variables_initializer())\n\nprint(sess.run(var))\n\n>> [[ 0.93119466 -1.0498083  -0.2198658 ]]\n\nprint(sess.run(var2))\n\n>> [[4 5]]\n```", "```\nvar2 = tf.get_variable(\"variable\", shape=[1,2], trainable=False, dtype=tf.int32)\n```", "```\nprint(tf.global_variables())\n\n>> [<tf.Variable 'first_variable:0' shape=(1, 3) dtype=float32_ref>, <tf.Variable 'second_variable:0' shape=(1, 2) dtype=int32_ref>]\n```", "```\nimport tensorflow as tf\nimport numpy as np\n\nconst1 = tf.constant(3.0, name='constant1')\n\nvar = tf.get_variable(\"variable1\", shape=[1,2], dtype=tf.float32)\nvar2 = tf.get_variable(\"variable2\", shape=[1,2], trainable=False, dtype=tf.float32)\n\nop1 = const1 * var\nop2 = op1 + var2\nop3 = tf.reduce_mean(op2)\n\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\nsess.run(op3)\n```", "```\nimport tensorflow as tf\nimport numpy as np\nfrom datetime import datetime\n\nnp.random.seed(10)\ntf.set_random_seed(10)\n```", "```\nW, b = 0.5, 1.4\n# create a dataset of 100 examples\nX = np.linspace(0,100, num=100)\n# add random noise to the y labels\ny = np.random.normal(loc=W * X + b, scale=2.0, size=len(X))\n```", "```\n# create the placeholders\nx_ph = tf.placeholder(shape=[None,], dtype=tf.float32)\ny_ph = tf.placeholder(shape=[None,], dtype=tf.float32)\n\n# create the variables\nv_weight = tf.get_variable(\"weight\", shape=[1], dtype=tf.float32)\nv_bias = tf.get_variable(\"bias\", shape=[1], dtype=tf.float32)\n```", "```\n# linear computation\nout = v_weight * x_ph + v_bias\n\n# compute the mean squared error\nloss = tf.reduce_mean((out - y_ph)**2)\n```", "```\nopt = tf.train.AdamOptimizer(0.4).minimize(loss)\n```", "```\nsession = tf.Session()\nsession.run(tf.global_variables_initializer())\n```", "```\n# loop to train the parameters\nfor ep in range(210):\n    # run the optimizer and get the loss\n    train_loss, _ = session.run([loss, opt], feed_dict={x_ph:X, y_ph:y})\n\n    # print epoch number and loss\n    if ep % 40 == 0:\n        print('Epoch: %3d, MSE: %.4f, W: %.3f, b: %.3f' % (ep, train_loss, session.run(v_weight), session.run(v_bias)))\n```", "```\nprint('Final weight: %.3f, bias: %.3f' % (session.run(v_weight), session.run(v_bias)))\n```", "```\n>>  Epoch: 0, MSE: 4617.4390, weight: 1.295, bias: -0.407\n Epoch: 40, MSE: 5.3334, weight: 0.496, bias: -0.727\n Epoch: 80, MSE: 4.5894, weight: 0.529, bias: -0.012\n Epoch: 120, MSE: 4.1029, weight: 0.512, bias: 0.608\n Epoch: 160, MSE: 3.8552, weight: 0.506, bias: 1.092\n Epoch: 200, MSE: 3.7597, weight: 0.501, bias: 1.418\n Final weight: 0.500, bias: 1.473\n```", "```\ntf.summary.scalar('MSEloss', loss)\ntf.summary.histogram('model_weight', v_weight)\ntf.summary.histogram('model_bias', v_bias)\n```", "```\nall_summary = tf.summary.merge_all()\n```", "```\nnow = datetime.now()\nclock_time = \"{}_{}.{}.{}\".format(now.day, now.hour, now.minute, now.second)\nfile_writer = tf.summary.FileWriter('log_dir/'+clock_time, tf.get_default_graph())\n```", "```\ntrain_loss, _, train_summary = session.run([loss, opt, all_summary], feed_dict={x_ph:X, y_ph:y})\nfile_writer.add_summary(train_summary, ep)\n```", "```\nfile_writer.close()\n```", "```\n$ tensorboard --logdir=log_dir\n```"]