- en: Chapter 1. From Data to Decisions – Getting Started with TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite the huge availability of data and significant investments, many business
    organizations still go on gut feel because they neither make the proper use of
    the data nor do they take appropriate and effective business decisions. TensorFlow,
    on the other hand, can be used to help take the business decision from this huge
    collection of data. TensorFlow is mathematical software and an open source software
    library for Machine Intelligence, developed in 2011 by the Google Brain Team and
    it can be used to help us analyze data to predict the effective business outcome.
    Although the initial target of TensorFlow was to conduct research in machine learning
    and in deep neural networks, however, the system is general enough to be applicable
    in a wide variety of other domains as well.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping in mind your needs and based on all the latest and exciting features
    of TensorFlow 1.x, in this lesson, we will give a description of the main TensorFlow
    capabilities that are mostly motivated by a real-life example using the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this lesson:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From data to decision: Titanic example'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General overview of TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow computational graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow programming model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing through TensorBoard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting started with TensorFlow: linear regression and beyond'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking Decisions Based on Data – Titanic Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The growing demand for data is a key challenge. Decision support teams such
    as institutional research and business intelligence often cannot take the right
    decisions on how to expand their business and research outcomes from a huge collection
    of data. Although data plays an important role in driving the decision, however,
    in reality, taking the right decision at right time is the goal.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the goal is the decision support, not the data support. This
    can be achieved through an advanced use of data management and analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Data Value Chain for Making Decisions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram in figure 1 (source: *H. Gilbert Miller and Peter Mork,
    From Data to Decisions: A Value Chain for Big Data, Proc. Of IT Professional,
    Volume: 15, Issue: 1, Jan.-Feb. 2013, DOI: 10.1109/MITP.2013.11*) shows the data
    chain towards taking actual decisions–that is, the goal. The value chains start
    through the data discovery stage consisting of several steps such as data collection
    and annotating data preparation, and then organizing them in a logical order having
    the desired flow. Then comes the data integration for establishing a common data
    representation of the data. Since the target is to take the right decision, for
    future reference having the appropriate provenance of the data–that is, where
    it comes from, is important:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Value Chain for Making Decisions](img/01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: From data to decisions: a value chain for big data'
  prefs: []
  type: TYPE_NORMAL
- en: Well, now your data is somehow integrated into a presentable format, it's time
    for the data exploration stage, which consists of several steps such as analyzing
    the integrated data and visualization before taking the actions to take on the
    basis of the interpreted results.
  prefs: []
  type: TYPE_NORMAL
- en: However, is this enough before taking the right decision? Probably not! The
    reason is that it lacks enough analytics, which eventually helps to take the decision
    with an actionable insight. Predictive analytics comes in here to fill the gap
    between. Now let's see an example of how in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: From Disaster to Decision – Titanic Survival Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the challenge, Titanic–Machine Learning from Disaster from Kaggle ([https://www.kaggle.com/c/titanic](https://www.kaggle.com/c/titanic)):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The sinking of the RMS Titanic is one of the most infamous shipwrecks in
    history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding
    with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational
    tragedy shocked the international community and led to better safety regulations
    for ships. One of the reasons that the shipwreck led to such loss of life was
    that there were not enough lifeboats for the passengers and crew. Although there
    was some element of luck involved in surviving the sinking, some groups of people
    were more likely to survive than others, such as women, children, and the upper-class.
    In this challenge, we ask you to complete the analysis of what sorts of people
    were likely to survive. In particular, we ask you to apply the tools of machine
    learning to predict which passengers survived the tragedy."*'
  prefs: []
  type: TYPE_NORMAL
- en: But going into this deeper, we need to know about the data of passengers travelling
    in the Titanic during the disaster so that we can develop a predictive model that
    can be used for survival analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset can be downloaded from the preceding URL. Table 1 here shows the
    metadata about the Titanic survival dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![From Disaster to Decision – Titanic Survival Example](img/01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A snapshot of the dataset can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![From Disaster to Decision – Titanic Survival Example](img/01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: A snapshot of the Titanic survival dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ultimate target of using this dataset is to predict what kind of people
    survived the Titanic disaster. However, a bit of exploratory analysis of the dataset
    is a mandate. At first, we need to import necessary packages and libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now read the dataset and create a panda''s DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Before drawing the distribution of the dataset, let''s specify the parameters
    for the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw a bar diagram for showing who survived versus who did not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a graph showing survival by `Age`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a graph showing distribution of the `passengers` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a kernel density estimate of the subset of the 1st class passengers''
    age:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a graph showing `passengers per boarding location`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The figure shows the survival distribution, survival by age, age distribution,
    and the passengers per boarding location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![From Disaster to Decision – Titanic Survival Example](img/01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Titanic survival data distribution across age, class, and age within
    classes and boarding location'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, to execute the preceding code, you need to install several packages
    such as matplotlib, pandas, and scipy. They are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing pandas**: Pandas is a Python package for data manipulation. It
    can be installed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Installing matplotlib**: In the preceding code, matplotlib is a plotting
    library for mathematical objects. It can be installed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Installing scipy**: Scipy is a Python package for scientific computing. Installing
    `blas` and `lapack`and `gfortran` are a prerequisite for this one. Now just execute
    the following command on your terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Mac, use the following command to install the above modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For windows, I am assuming that Python 2.7 is already installed at C:\Python27\.
    Then open the command prompt and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For Python3, issue the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Well, we have seen the data. Now it's your turn to do some analytics on top
    of the data. Say predicting what kinds of people survived from that disaster.
    Don't you agree that we have enough information about the passengers, but how
    could we do the predictive modeling so that we can draw some fairly straightforward
    conclusions from this data?
  prefs: []
  type: TYPE_NORMAL
- en: For example, say being a woman, being in 1st class, and being a child were all
    factors that could boost passenger chances of survival during this disaster.
  prefs: []
  type: TYPE_NORMAL
- en: In a brute-force approach–for example, using if/else statements with some sort
    of weighted scoring system, you could write a program to predict whether a given
    passenger would survive the disaster. However, does writing such a program in
    Python make much sense? Naturally, it would be very tedious to write, difficult
    to generalize, and would require extensive fine tuning for each variable and samples
    (that is, passenger).
  prefs: []
  type: TYPE_NORMAL
- en: This is where predictive analytics with machine learning algorithms and emerging
    tools comes in so that you could build a program that learns from the sample data
    to predict whether a given passenger would survive. In such cases, we will see
    throughout this book that TensorFlow could be a perfect solution to achieve outstanding
    accuracies across your predictive models. We will start describing the general
    overview of the TensorFlow framework. Then we will show how to install and configure
    TensorFlow on Linux, Mac OS and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: General Overview of TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow is an open source framework from Google for scientific and numerical
    computation based on dataflow graphs that stand for the TensorFlow's execution
    model. The dataflow graphs used in TensorFlow help the machine learning experts
    to perform more advanced and intensive training on the data for developing deep
    learning and predictive analytics models. In 2015, Google open sourced the TensorFlow
    and all of its reference implementation and made all the source code available
    on GitHub under the Apache 2.0 license. Since then, TensorFlow has achieved wide
    adoption from academia and research to the industry, and following that recently
    the most stable version 1.x has been released with a unified API.
  prefs: []
  type: TYPE_NORMAL
- en: As the name TensorFlow implies, operations are performed by neural networks
    on multidimensional data arrays (aka flow of tensors). This way, TensorFlow provides
    some widely used and robust implementation linear models and deep learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a predictive or general purpose model using TensorFlow is pretty straightforward.
    The thing is that once you have constructed your neural networks model after necessary
    feature engineering, you can simply perform the training interactively using plotting
    or TensorBoard (we will see more on it in upcoming sections). Finally, you deploy
    it eventually after evaluating it by feeding it some test data.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are talking about the dataflow graphs, nodes in a flow graph correspond
    to the mathematical operations, such as addition, multiplication, matrix factorization,
    and so on, whereas, edges correspond to tensors that ensure communication between
    edges and nodes, that is dataflow and controlflow.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform the numerical computation on a CPU. Nevertheless, using TensorFlow,
    it is also possible to distribute the training across multiple devices on the
    same system and train on them, especially if you have more than one GPU on your
    system so that these can share the computational load. But the precondition is
    if TensorFlow can access these devices, it will automatically distribute the computations
    to the multiple devices via a greedy process. But TensorFlow also allows the program,
    to specify which operations will be on which devices via name scope placement.
  prefs: []
  type: TYPE_NORMAL
- en: The APIs in TensorFlow 1.x have changed in ways that are not all backward compatible.
    That is, TensorFlow programs that worked on TensorFlow 0.x won't necessarily work
    on TensorFlow 1.x.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features offered by the latest release of TensorFlow are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Faster computing**: The latest release of TensorFlow is incredibly faster.
    For example, it is 7.3 times faster on 8 GPUs for Inception v3 and 58 times speedup
    for distributed inception (v3 training on 64 GPUs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility**: TensorFlow is not just a deep learning library, but it comes
    with almost everything you need for powerful mathematical operations through functions
    for solving the most difficult problems. TensorFlow 1.x introduces some high-level
    APIs for high-dimensional arrays or tensors, with `tf.layers`, `tf.metrics`, `tf.losses`,
    and `tf.keras` modules. These have made TensorFlow very suitable for high-level
    neural networks computing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portability**: TensorFlow runs on Windows, Linux, and Mac machines and on
    mobile computing platforms (that is, Android).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy** **debugging**: TensorFlow provides the TensorBoard tool for the analysis
    of the developed models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unified** **API**: TensorFlow offers you a very flexible architecture that
    enables you to deploy computation to one or more CPUs or GPUs in a desktop, server,
    or mobile device with a single API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transparent** **use** **of** **GPU** **computing**: Automating management
    and optimization of the same memory and the data used. You can now use your machine
    for large-scale and data-intensive GPU computing with NVIDIA cuDNN and CUDA toolkits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy** **use**: TensorFlow is for everyone, it''s for students, researchers,
    deep learning practitioners, and also for readers of this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production** **ready** **at** **scale**: Recently it has evolved as the neural
    network for machine translation, at production scale. TensorFlow 1.x promises
    Python API stability, making it easier to choose new features without worrying
    too much about breaking your existing code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensibility**: TensorFlow is relatively newer technology and it''s still
    under active development. However, it is extensible because it was released with
    source code available on GitHub ([https://github.com/tensorflow/tensorflow](https://github.com/tensorflow/tensorflow)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported**: There is a large community of developers and users working together
    to make TensorFlow a better product, both by providing feedback and by actively
    contributing to the source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wide** **adoption**: Numerous tech giants are using TensorFlow for increasing
    their business intelligence. For example, ARM, Google, Intel, eBay, Qualcomm,
    SAM, Drobox, DeepMind, Airbnb, Twitter, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the next lesson, we will see how to achieve these features for predictive
    analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Configuring TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can install and use TensorFlow on a number of platforms such as Linux, Mac
    OS, and Windows. Moreover, you can also build and install TensorFlow from the
    latest GitHub source of TensorFlow. Furthermore, if you have a Windows machine,
    you can install TensorFlow via native pip or Anacondas. It is to be noted that
    TensorFlow supports Python 3.5.x and 3.6.x on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Also, Python 3 comes with the pip3 package manager, which is the program you'll
    use to install TensorFlow. So you don't need to install pip if you're using this
    Python version. For simplicity, in this section, I will show you how to install
    TensorFlow using native pip. Now to install TensorFlow, start a terminal. Then
    issue the appropriate `pip3 install`command in that terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the CPU-only version of TensorFlow, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the GPU version of TensorFlow, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When it comes to Linux, the TensorFlow Python API supports Python 2.7 and Python
    3.3+, so you need to install Python to start the TensorFlow installation. You
    must install Cuda Toolkit 7.5 and cuDNN v5.1+ to get the GPU support. In this
    section, we will show you how to install and get started with TensorFlow. More
    details on installing TensorFlow on Linux will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Installing on Mac OS is more or less similar to Linux. Please refer to the [https://www.tensorflow.org/install/install_mac](https://www.tensorflow.org/install/install_mac)
    for more details. On the other hand, Windows users should refer to [https://www.tensorflow.org/install/install_windows](https://www.tensorflow.org/install/install_windows).
  prefs: []
  type: TYPE_NORMAL
- en: Note that for this and the rest of the lesson, we will provide most of the source
    codes with Python 3.x compatible.
  prefs: []
  type: TYPE_NORMAL
- en: Installing TensorFlow on Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will show you how to install TensorFlow on Ubuntu 14.04
    or higher. The instructions presented here also might be applicable for other
    Linux distributions with minimal adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, before proceeding with formal steps, we need to determine which TensorFlow
    to install on your platform. TensorFlow has been developed such that you can run
    data intensive tensor applications on a GPU as well as a CPU. Thus, you should
    choose one of the following types of TensorFlow to install on your platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TensorFlow** **with** **CPU** **support** **only**: If there is no GPU such
    as NVIDIA® installed on your machine, you must install and start computing using
    this version. This is very easy and you can do it in just 5 to 10 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorFlow** **with** **GPU** **support**: As you might know, a deep learning
    application requires typically very high intensive computing resources. Thus TensorFlow
    is no exception, but can typically speed up the data computation and analytics
    significantly faster on a GPU rather than on a CPU. Therefore, if there''s NVIDIA®
    GPU hardware on your machine, you should ultimately install and use this version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From our experience, even if you have NVIDIA GPU hardware integrated on your
    machine, it would be worth installing and trying the CPU-only version first and
    if you don't experience good performance you should switch for GPU support then.
  prefs: []
  type: TYPE_NORMAL
- en: The GPU-enabled version of TensorFlow has several requirements such as 64-bit
    Linux, Python 2.7 (or 3.3+ for Python 3), NVIDIA CUDA® 7.5 or higher (CUDA 8.0
    required for Pascal GPUs), and NVIDIA cuDNN v4.0 (minimum) or v5.1 (recommended).
    More specifically, the current development of TensorFlow supports only GPU computing
    using NVIDIA toolkits and software. Therefore, the following software must have
    to be installed on your Linux machine to get the GPU support on your predictive
    analytics applications:.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NVIDIA Driver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUDA with **compute capability >= 3.0**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CudNN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python and nVidia Driver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already seen how to install Python on a different platform, so we can
    skip this one. Also, I'm assuming that your machine already has a NVIDIA GPU installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out if your GPU is really installed properly and working, issue the
    following command on the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Since predictive analytics largely depend on machine learning and deep learning
    algorithms, make sure you check that some essential packages are installed on
    your machine such as GCC and some of the scientific Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply issue the following command for doing so on the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now download the NVIDIA driver (don''t forget to choose the right version for
    your machine) via `wget` and run the script in silent mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some GPU cards such as NVidia GTX 1080 comes with the built in–driver. Thus,
    if your machine has a different GPU other than the GTX 1080, you have to download
    the driver for that GPU.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure if the driver was installed correctly, issue the following command
    on the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The outcome of the command should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Python and nVidia Driver](img/01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Outcome of the nvidia-smi command'
  prefs: []
  type: TYPE_NORMAL
- en: Installing NVIDIA CUDA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use TensorFlow with NVIDIA GPUs, CUDA® Toolkit 8.0, and associated NVIDIA
    drivers with CUDA toolkit 8+ are required to be installed. The CUDA toolkit includes:'
  prefs: []
  type: TYPE_NORMAL
- en: GPU-accelerated libraries such as cuFFT for **Fast** **Fourier** **Transforms**
    (**FFT**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuBLAS for **Basic** **Linear** **Algebra** **Subroutines** (**BLAS**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuSPARSE for sparse matrix routines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuSOLVER for dense and sparse direct solvers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cuRAND for random number generation, NPP for image, and video processing primitives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nvGRAPH** for **NVIDIA** **Graph** **Analytics** **Library**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thrust for template parallel algorithms and data structures and a dedicated
    CUDA math library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Linux, download and install required packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads)
    using the `wget` command on Ubuntu as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, ensure that you have added the CUDA installation path to the `LD_LIBRARY_PATH`
    environment variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Installing NVIDIA cuDNN v5.1+
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the CUDA Toolkit is installed, you should download the cuDNN v5.1 library
    from for Linux and once downloaded, uncompress the files and copy them into the
    CUDA Toolkit directory (assumed here to be in /usr/local/cuda/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that to install the cuDNN v5.1 library, you must need to register for the
    Accelerated Computing Developer Program at [https://developer.nvidia.com/accelerated-computing-developer](https://developer.nvidia.com/accelerated-computing-developer).
    Now when you have installed the cuDNN v5.1 library, ensure that you create the
    `CUDA_HOME` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the libcupti-dev Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lastly, you need to have the libcupti-dev library installed on your machine.
    This is the NVIDIA CUDA that provides advanced profiling support. To install this
    library, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Installing TensorFlow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the following section for more step-by-step guidelines on how to install
    the latest version of TensorFlow for the CPU only and GPU supports with NVIDIA
    cuDNN and CUDA computing capability. You can install TensorFlow on your machine
    in a number of ways, such as using virtualenv, pip, Docker, and Anaconda. However,
    using Docker and Anaconda is a bit advanced and this is why we have decided to
    use pip and virtualenv instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interested readers can try using Docker and Anaconda from [https://www.tensorflow.org/install/](https://www.tensorflow.org/install/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing TensorFlow with native pip
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If steps 1 to 6 are completed, install TensorFlow by invoking one of the following
    commands. For Python 2.7 and, of course, with only CPU support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If step 3 failed somehow, install the latest version of TensorFlow by issuing
    a command manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: For both cases, `TF_PYTHON_URL` signifies the URL of the TensorFlow Python package
    presented at [https://www.tensorflow.org/install/install_linux#the_url_of_the_tensorflow_python_package](https://www.tensorflow.org/install/install_linux#the_url_of_the_tensorflow_python_package).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to install the latest version with CPU-only support (at the time
    of writing v1.1.0), use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Installing with virtualenv
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We assume that you already have Python 2+ (or 3+) and pip (or pip3) installed
    on your system. If so, follow these steps to install TensorFlow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a virtualenv environment as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `targetDirectory` signifies the root of the `virtualenv` tree. By default,
    it is `~/tensorflow` (however, you may choose any directory).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activate virtualenv environment as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the command succeeds in step 2, then you should see the following on your
    terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing TensorFlow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow one of the following commands to install TensorFlow in the active virtualenv
    environment. For Python 2.7 with CPU-only support, use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the preceding command succeeds, skip step 5\. If the preceding command fails,
    perform step 5\. Moreover, if step 3 failed somehow, try to install TensorFlow
    in the active virtualenv environment by issuing a command of the following format:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Validate the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To validate the installation in step 3, you must activate the virtual environment.
    If the virtualenv environment is not currently active, issue one of the following
    commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Uninstalling TensorFlow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To uninstall TensorFlow, simply remove the tree you created. For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, if you want to control which devices are visible to TensorFlow manually,
    you should set the `CUDA_VISIBLE_DEVICES`. For example, the following command
    can be used to force the use of only GPU 0:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing TensorFlow from Source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pip installation can cause problems using TensorBoard (this will be discussed
    later in this lesson). For this reason, I suggest you build TensorFlow directly
    from the source. The steps are described as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Follow the instructions and guidelines on how to install Bazel on your platform
    at [http://bazel.io/docs/install.html](http://bazel.io/docs/install.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, clone the entire TensorFlow repository as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then it''s time to install Bazel, which is a tool that automates software builds
    and tests. Also, for building TensorFlow from source, Bazel build system must
    be installed on your machine. For this, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the Bazel installer by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Moreover, you might need some Python dependencies such as `python-numpy`, `swig`,
    and `python-dev`. Now, issue the following command for doing so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to configure the installation (GPU or CPU). Let''s do it by
    executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create your TensorFlow package using `bazel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'However, to build with the GPU support, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, install TensorFlow. Here I have listed, as per the Python version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Python 2.7:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Python 3.4:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing Your TensorFlow Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start with the popular TensorFlow alias `tf`. Open a Python terminal (just
    type `python` or `python3` on terminal) and issue the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If your favourite Python interpreter doesn't complain, then you're ready to
    start using TensorFlow!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now to verify your installation just type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If the installation is OK, you''ll see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlow Computational Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When thinking of execution of a TensorFlow program we should be familiar with
    a graph creation and a session execution. Basically the first one is for building
    the model and the second one is for feeding the data in and getting the results.
    An interesting thing is that TensorFlow does each and everything on the C++ engine,
    which means even a little multiplication or addition is not executed on Python
    but Python is just a wrapper. Fundamentally, TensorFlow C++ engine consists of
    following two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Efficient implementations for operations like convolution, max pool, sigmoid,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Derivatives of forwarding mode operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we/you''re performing a little complex operation with TensorFlow, for
    example training a linear regression, TensorFlow internally represents its computation
    using a dataflow graph. The graph is called a computational graph, which is a
    directed graph consisting of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A set of nodes, each one representing an operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of directed arcs, each one representing the data on which the operations
    are performed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TensorFlow has two types of edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normal**: They carry the data structures between the nodes. The output of
    one operation from one node, becomes input for another operation. The edge connecting
    two nodes carries the values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Special**: This edge doesn''t carry values, but only represents a control
    dependency between two nodes, say X and Y. It means that the node Y will be executed
    only if the operation in X is executed already, but before the relationship between
    operations on the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TensorFlow implementation defines control dependencies to enforce orderings
    between otherwise independent operations as a way of controlling the peak memory
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'A computational graph is basically like a dataflow graph. Figure 5 shows a
    computational graph for a simple computation like *z=d×c=(a+b) ×c*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TensorFlow Computational Graph](img/01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: A very simple execution graph that computes a simple equation'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding figure, the circles in the graph indicate the operations,
    while rectangles indicate a data computational graph. As stated earlier, a TensorFlow
    graph contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A set of tf.Operation objects**: This is used to represent units of computation
    to be performed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A tf.Tensor object**: This is used to represent units of data that control
    the dataflow between operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TensorFlow, it is also possible to perform a deferred execution. To give
    an idea, once you have composed a highly compositional expression during the building
    phase of the computational graph, you can still evaluate them in the running session
    phase. Technically saying TensorFlow schedules the job and executes on time in
    an efficient manner. For example, parallel execution of independent parts of the
    code using the GPU is shown in figure 6.
  prefs: []
  type: TYPE_NORMAL
- en: '![TensorFlow Computational Graph](img/01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Edges and nodes in TensorFlow graph to be executed under a session
    on devices such as CPUs or GPUs'
  prefs: []
  type: TYPE_NORMAL
- en: 'After a computational graph is created, TensorFlow needs to have an active
    session to be executed by multiple CPUs (and GPUs if available) in a distributed
    way. In general, you really don''t need to specify whether to use a CPU or a GPU
    explicitly, since TensorFlow can choose and use which one is to be used. By default,
    a GPU will be picked for as many operations as possible; otherwise, a CPU will
    be used. So in a broad view, here are the main components of TensorFlow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables**: Used to contain values for the weights and bias between TensorFlow
    sessions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tensors**: A set of values that pass in between nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Placeholders**: Is used to send data between the program and the TensorFlow
    graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session**: When a session is started, TensorFlow automatically calculates
    gradients for all the operations in the graph and use them in a chain rule. In
    fact, a session is invoked when the graph is to be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t worry much, each of the preceding components will be discussed in later
    sections. Technically saying, the program you will be writing can be considered
    as a client. The client is then used to create the execution graph in C/C++ or
    Python symbolically, and then your code can ask TensorFlow to execute this graph.
    See details in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TensorFlow Computational Graph](img/01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Using a client–master architecture for executing TensorFlow graph'
  prefs: []
  type: TYPE_NORMAL
- en: A computational graph helps to distribute the work load across multiple computing
    nodes having a CPU or a GPU. This way, a neural network can further be equaled
    to a composite function where each layer (input, hidden or output layer) can be
    represented as a function. Now to understand the operations performed on the tensors,
    knowing a good workaround about TensorFlow programming model is a mandate. The
    next section explains the role of the computational graph to implement a neural
    network.
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow Programming Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The TensorFlow programming model signifies how to structure your predictive
    models. A TensorFlow program is generally divided into four phases once you have
    imported TensorFlow library for associated resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Construction of the computational graph that involves some operations on tensors
    (we will see what is a tensor soon)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a session, that is performed for the operations defined in the graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computation for data collection and analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These main steps define the programming model in TensorFlow. Consider the following
    example, in which we want to multiply two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code segment can be represented by the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TensorFlow Programming Model](img/01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: A simple multiplication executed and returned the product on client-master
    architecture'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the preceding program more efficient, TensorFlow also allows you to
    exchange data in your graph variables through placeholders (to be discussed later).
    Now imagine the following code segment that does the same but in a more efficient
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlow is not necessary to multiply two numbers; also the number of lines
    of the code for this simple operation is so many. However, the example wants to
    clarify how to structure any code, from the simplest as in this instance, to the
    most complex. Furthermore, the example also contains some basic instructions that
    we will find in all the other examples given in the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will demonstrate most of the examples in this book with Python 3.x compatible.
    However, a few examples will be given using Python 2.7.x too.
  prefs: []
  type: TYPE_NORMAL
- en: 'This single import in the first line helps to import the TensorFlow for your
    command that can be instantiated with `tf as stated earlier. Then the` TensorFlow
    operator will then be expressed by `tf` and the dot ''`.`'' and by the name of
    the operator to use. In the next line, we construct the object `session`, by means
    of the instruction `tf.Session()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The session object (that is, sess) encapsulates the environment for the TensorFlow
    so that all the operation objects are executed, and Tensor objects are evaluated.
    We will see them in upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: This object contains the computation graph, which as we said earlier, are the
    calculations to be carried out.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following two lines define variables x and y, using the notion of placeholder.
    Through a placeholder you may define both an input (such as the variable x of
    our example) and an output variable (such as the variable y):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Placeholder provides an interface between the elements of the graph and the
    computational data of the problem, it allows us to create our operations and build
    our computation graph, without needing the data, but only a reference to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a data or tensor (soon I will introduce you to the concept of tensor)
    via the placeholder function, three arguments are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data** **type**: Is the type of element in the tensor to be fed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shape**: Of the placeholder–that is, shape of the tensor to be fed (optional).
    If the shape is not specified, you can feed a tensor of any shape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Very useful for debugging and code analysis purposes, but it is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more, refer to [https://www.tensorflow.org/api_docs/python/tf/Tensor](https://www.tensorflow.org/api_docs/python/tf/Tensor).
  prefs: []
  type: TYPE_NORMAL
- en: So, we may introduce the model that we want to compute with two arguments, the
    placeholder and the constant that are previously defined. Next, we define the
    computational model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following statement, inside the session, builds the data structures of
    the `x` product with `y`, and the subsequent assignment of the result of the operation
    to the placeholder `z`. Then it goes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now since the result is already held by the placeholder `z`, we execute the
    graph, through the `sess.run`statement. Here we feed two values to patch a tensor
    into a graph node. It temporarily replaces the output of an operation with a tensor
    value (more in upcoming sections):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we close the TensorFlow session when we''re done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In the final instruction, we print out the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This essentially prints output 72.0.
  prefs: []
  type: TYPE_NORMAL
- en: Data Model in TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data model in TensorFlow is represented by **tensors**. Without using complex
    mathematical definitions, we can say that a tensor (in TensorFlow) identifies
    a multidimensional numerical array. But we will see more details on tensor in
    the next sub-section.
  prefs: []
  type: TYPE_NORMAL
- en: Tensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see a formal definition of tensors from Wikipedia ([https://en.wikipedia.org/wiki/Tensor](https://en.wikipedia.org/wiki/Tensor))
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Tensors are geometric objects that describe linear relations between geometric
    vectors, scalars, and other tensors. Elementary examples of such relations include
    the dot product, the cross product, and linear maps. Geometric vectors, often
    used in physics and engineering applications, and scalars themselves are also
    tensors."*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This data structure is characterized by three parameters: Rank, Shape, and
    Type, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tensors](img/01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Tensors are nothing but geometrics objects having shape, rank, and
    type used to hold multidimensional arrays'
  prefs: []
  type: TYPE_NORMAL
- en: A tensor thus can be thought of as a generalization of a matrix that specifies
    an element by an arbitrary number of indices. While practically used, the syntax
    for tensors is even more or less like nested vectors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tensors just define the type of this value and the means by which this value
    should be calculated during the session. Therefore, essentially, they do not represent
    or hold any value produced by an operation.
  prefs: []
  type: TYPE_NORMAL
- en: A few people love to compare NumPy versus TensorFlow comparison; however, in
    reality, TensorFlow and NumPy are quite similar in a sense that both are N-d array
    libraries!
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, it''s true that NumPy has the n–dimensional array support, but it doesn''t
    offer methods to create tensor functions and automatically compute derivatives
    (+ no GPU support). The following table can be seen as a short and one-to-one
    comparison that could make some sense of such comparisons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tensors](img/01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: NumPy versus TensorFlow'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see an alternative way of creating tensors before they could be
    fed (we will see other feeding mechanisms later on) by the TensorFlow graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `X` is a list, `Y` is an n-dimensional array from the NumPy library, and
    `Z` is itself the TensorFlow''s Tensor object. Now let''s see their types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, their types are printed correctly. However, a more convenient function
    that we''re formally dealing with tensors, as opposed to the other types is `tf.convert_to_tensor()`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s see their type using the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Fantastic! I think up to now it's enough discussion already carried out on tensors,
    so now we can think about the structure that is characterized by the term **rank**.
  prefs: []
  type: TYPE_NORMAL
- en: Rank
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each tensor is described by a unit of dimensionality called rank. It identifies
    the number of dimensions of the tensor, for this reason, a rank is known as order
    or n–dimensions of a tensor. A rank zero tensor is a scalar, a rank one tensor
    id a vector, while a rank two tensor is a matrix. The following code defines a
    TensorFlow scalar, a `vector`, a `matrix`, and a `cube_matrix`, in the next example
    we will show how the rank works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are printed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Shape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The shape of a tensor is the number of rows and columns it has. Now we will
    see how to relate the shape to a rank of a tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Data Type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to rank and shape, tensors have a data type. The following is the
    list of the data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Type](img/01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We believe the preceding table is self-explanatory hence we did not provide
    detailed discussion on the preceding data types. Now the TensorFlow APIs are implemented
    to manage data **to** and **from** NumPy arrays. Thus, to build a tensor with
    a constant value, pass a NumPy array to the `tf.constant()` operator, and the
    result will be a TensorFlow tensor with that value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the example, we obtain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To build a tensor, with variable values, use a `NumPy` array and pass it to
    the `tf.Variable` constructor, the result will be a TensorFlow variable tensor
    with that initial value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'For ease of use in interactive Python environments, we can use the `InteractiveSession`
    class, and then use that session for all `Tensor.eval()` and `Operation.run()`
    calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`tf.InteractiveSession()` is just a convenient syntactic sugar for keeping
    a default session open in IPython.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This can be easier in an interactive setting, such as the shell or an IPython
    notebook, when it's tedious to pass around a session object everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The IPython Notebook is now known as the Jupyter Notebook. It is an interactive
    computational environment, in which you can combine code execution, rich text,
    mathematics, plots and rich media. For more information, interested readers should
    refer to the web page at [https://ipython.org/notebook.html](https://ipython.org/notebook.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to define a tensor is using the TensorFlow statement `tf.convert_to_tensor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Variables are TensorFlow objects to hold and update parameters. A variable
    must be initialized; also you can save and restore it to analyze your code. Variables
    are created by using the `tf.Variable()` statement. In the following example,
    we want to count the numbers from 1 to 10, but let''s import TensorFlow first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'We created a variable that will be initialized to the scalar value `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `assign()` and `add()`operators are just nodes of the computation graph,
    so they do not execute the assignment until the run of the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We can instantiate the computation graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s recall that a tensor object is a symbolic handle to the result of an
    operation, but it does not actually hold the values of the operation''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Fetches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To fetch the outputs of operations, execute the graph by calling `run()` on
    the session object and pass in the tensors to retrieve. Except fetching the single
    tensor node, you can also fetch multiple tensors. In the following example, the
    sum and multiply tensors are fetched together, using the `run()` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: All the ops needed to produce the values of the requested tensors are run once
    (not once per requested tensor).
  prefs: []
  type: TYPE_NORMAL
- en: Feeds and Placeholders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four methods of getting data into a TensorFlow program (see details
    at [https://www.tensorflow.org/api_guides/python/reading_data](https://www.tensorflow.org/api_guides/python/reading_data)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Dataset API**: This enables you to build complex input pipelines from
    simple and reusable pieces from distributed file systems and perform complex operations.
    Using the Dataset API is recommended while dealing with large amounts of data
    in different data formats. The Dataset API introduces two new abstractions to
    TensorFlow for creating feedable dataset using either `tf.contrib.data.Dataset`
    (by creating a source or applying a transformation operations) or using a `tf.contrib.data.Iterator`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feeding**: Allows us to inject data into any Tensor in a computation graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reading from files**: We can develop an input pipeline using Python''s built-in
    mechanism for reading data from data files at the beginning of a TensorFlow graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preloaded data**: For small datasets, we can use either constants or variables
    in the TensorFlow graph for holding all the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will see an example of the feeding mechanism only. For the
    other methods, we will see them in upcoming lesson. TensorFlow provides the feed
    mechanism that allows us inject data into any tensor in a computation graph. You
    can provide the feed data through the `feed_dict` argument to a `run()` or `eval()`invoke
    that initiates the computation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feeding using the `feed_dict` argument is the least efficient way to feed data
    into a TensorFlow execution graph and should only be used for small experiments
    needing small datasets. It can also be used for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: We can also replace any tensor with feed data (that is variables and constants),
    the best practice is to use a TensorFlow placeholder node using `tf.placeholder()`
    invocation. A placeholder exists exclusively to serve as the target of feeds.
    An empty placeholder is not initialized so it does not contain any data. Therefore,
    it will always generate an error if it is executed without a feed, so you won't
    forget to feed it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example shows how to feed data to build a random 2×3 matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: TensorBoard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow includes functions to debug and optimize programs in a visualization
    tool called **TensorBoard**. Using TensorBoard, you can observe different types
    of statistics concerning the parameters and details of any part of the graph computing
    graphically.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, while doing predictive modeling using the complex deep neural network,
    the graph can be complex and confusing. Thus to make it easier to understand,
    debug, and optimize TensorFlow programs, you can use TensorBoard to visualize
    your TensorFlow graph, plot quantitative metrics about the execution of your graph,
    and show additional data such as images that pass through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, the TensorBoard can be thought of as a framework designed for analysis
    and debugging of predictive models. TensorBoard uses the so-called summaries to
    view the parameters of the model: once a TensorFlow code is executed, we can call
    TensorBoard to view summaries in a GUI.'
  prefs: []
  type: TYPE_NORMAL
- en: How Does TensorBoard Work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As explained previously, TensorFlow uses the computation graph to execute an
    application, where each node represents an operation and the arcs are the data
    between operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main idea in TensorBoard is to associate the so-called summary with nodes
    (operations) of the graph. Upon running the code, the summary operations will
    serialize the data of the node that is associated with it and output the data
    into a file that can be read by TensorBoard. Then TensorBoard can be run and visualize
    the summarized operations. The workflow when using TensorBoard is:'
  prefs: []
  type: TYPE_NORMAL
- en: Build your computational graph/code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attach summary ops to the nodes you are interested in examining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start running your graph as you normally would
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, run the summary ops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the code is done running, run TensorBoard to visualize the summary outputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you type `$ which tensorboard` in your terminal, it should exist if you
    installed with `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to give it a log directory, so you are in the directory where you
    ran your graph; you can launch it from your terminal with something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Then open your favorite web browser and type in `localhost:6006` to connect.
    When TensorBoard is fully configured, this can be accessed by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you simply need to access the local port `6006` from the browser `http://localhost:6006/`.
    Then it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How Does TensorBoard Work?](img/01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Using TensorBoard on browser'
  prefs: []
  type: TYPE_NORMAL
- en: Is this already too much? Don't worry, in the last section, we'll combine all
    the ideas previously explained to build a single input neuron model and to analyze
    it with TensorBoard.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with TensorFlow – Linear Regression and Beyond
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will take a closer look at TensorFlow's and TensorBoard's
    main concepts and try to do some basic operations to get you started. The model
    we want to implement simulates the linear regression.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the statistics and machine learning realm, linear regression is a technique
    frequently used to measure the relationship between variables. This is also a
    quite simple but effective algorithm that can be used in predictive modeling too.
    Linear regression models the relationship between a dependent variable **yi**,
    an interdependent variable **xi**, and a random term **b**. This can be seen as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with TensorFlow – Linear Regression and Beyond](img/01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to conceptualize the preceding equation, I am going to write a simple Python
    program for creating data into a 2D space. Then I will use TensorFlow to look
    for the line that best fits in the data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'If your compiler does not make any complaints, you should observe the following
    graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with TensorFlow – Linear Regression and Beyond](img/01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Randomly generated (but original) data'
  prefs: []
  type: TYPE_NORMAL
- en: Well, so far we have just created a few data points without any associated model
    that could be executed through TensorFlow. So the next step is to create a linear
    regression model to be able to obtain the output values `y` that is estimated
    from the input data points–that is, `x_data`. In this context, we have only two
    associated parameters–that is, `W` and `b`. Now the objective is to create a graph
    that allows finding the values for these two parameters based on the input data
    `x_data` by adjusting them to `y_data`–that is, optimization problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'So the target function in our case would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with TensorFlow – Linear Regression and Beyond](img/01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you recall, we defined **W = 0.1** and **b = 0.4** while creating the data
    points in the 2D space. Now TensorFlow has to optimize these two values so that
    `W` tends to 0.1 and `b` to 0.4, but without knowing any optimization function,
    TensorFlow does not even know anything.
  prefs: []
  type: TYPE_NORMAL
- en: A standard way to solve such optimization problems is to iterate through each
    value of the data points and adjust the value of `W` and `b` in order to get a
    more precise answer on each iteration. Now to realize if the values are really
    improving, we need to define a cost function that measures how good a certain
    line is.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the cost function is the mean squared error that helps find the
    average of the errors based on the distance function between the real data points
    and the estimated ones on each iteration. We start by importing the TensorFlow
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code segment, we are generating a random point using a different
    strategy and storing in variable W. Now let''s define a loss function **loss=mean
    [(y−y_data) 2]** and this returns a scalar value with the mean of all distances
    between our data and the model prediction. In terms of TensorFlow convention,
    the loss function can be expressed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Without going into further detail, we can use some widely used optimization
    algorithms such as gradient descent. At a minimal level, the gradient descent
    is an algorithm that works on a set of given parameters that we already have.
    It starts with an initial set of parameter values and iteratively moves toward
    a set of values that minimize the function by taking another parameter called
    learning rate. This iterative minimization is achieved by taking steps in the
    negative direction of the function called gradient.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Before running this optimization function, we need to initialize all the variables
    that we have so far. Let''s do it using TensorFlow convention as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have created a TensorFlow session, we are ready for the iterative
    process that helps us find the optimal values of `W` and `b`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'You should observe the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Thus you can see the algorithm starts with the initial values of **W = 0.18418592
    and b = 0.47198644** where the loss is pretty high. Then the algorithm iteratively
    adjusted the values by minimizing the cost function. In the eighth iteration,
    all the values tend to our desired values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now what if we could plot them? Let''s do it by adding the plotting line under
    the `for` loop as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with TensorFlow – Linear Regression and Beyond](img/01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Linear regression after eight iteration that optimizes the loss
    function'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s iterate the same up to the 16th iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Much better and we're closer to the optimized values, right? Now, what if we
    further improve our visual analytics through TensorFlow that help visualize what
    is happening in these graphs. TensorBoard provides a web page for debugging your
    graph as well as inspecting the used variables, node, edges, and their corresponding
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: However, to get the facility of the preceding regression analysis, you need
    to annotate the preceding graphs with the variables such as loss function, `W`,
    `b`, `y_data`, `x_data`, and so on. Then you need to generate all the summaries
    by invoking the function `tf.summary.merge_all()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to make the following changes to the preceding code. However,
    it is a good practice to group related nodes on the graph using the `tf.name_scope()`
    function. Thus, we can use `tf.name_scope()` to organize things on the TensorBoard
    graph view, but let''s give it a better name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let''s annotate the loss function in a similar way, but by giving a suitable
    name such as `LossFunction`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s annotate the loss, weights, and bias that are needed for the TensorBoard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Well, once you annotate the graph, it''s time to configure the summary by merging
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Now before running the training (after the initialization), write the summary
    using the `tf.summary.FileWriter()` API as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Then start the TensorBoard as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, it could be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s move to `http://localhost:6006` and on clicking on the **GRAPHS**
    tab, you should see the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with TensorFlow – Linear Regression and Beyond](img/01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Main graph and auxiliary nodes on TensorBoard'
  prefs: []
  type: TYPE_NORMAL
- en: Source Code for the Linear Regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We reported for the entire source code for the example previously described:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Ubuntu may ask you to install the python-tk package. You can do it by executing
    the following command on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TensorFlow is designed to make the predictive analytics through the machine
    and deep learning easy for everyone, but using it does require understanding some
    general principles and algorithms. Furthermore, the latest release of TensorFlow
    comes with lots of exciting features. Thus I also tried to cover them so that
    you can use them with ease. I have shown how to install TensorFlow on different
    platforms including Linux, Windows, and Mac OS. In summary, here is a brief recap
    of the key concepts of TensorFlow explained in this lesson:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Graph**: each TensorFlow computation can be represented as a set of dataflow
    graphs where each graph is built as a set of operation objects. There are three
    core graph data structures:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tf.Graph`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tf.Operation`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tf.Tensor`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Operation**: A graph node takes tensors as input and also produces a tensor
    as output. A node can be represented by an operation object for performing units
    of computations such as addition, multiplication, division, subtraction or more
    complex operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tensor**: Tensors are like high-dimensional array objects. In other words,
    they can be represented as edges of a dataflow graph but still they don''t hold
    any value produced out of an operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session**: A session object is an entity that encapsulates the environment
    in which operation objects are executed for running calculations on the dataflow
    graph. As a result, the tensors objects are evaluated inside the `run()` or `eval()`
    invocation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a later section of the lesson, we introduced TensorBoard, which is a powerful
    tool for analyzing and debugging neural network models, the lesson ended with
    an example that shows how to implement a simple neuron model and how to analyze
    its learning phase with TensorBoard.
  prefs: []
  type: TYPE_NORMAL
- en: Predictive models often perform calculations during live transactions, for example,
    to evaluate the risk or opportunity of a given customer or transaction, in order
    to guide a decision. With advancements in computing speed, individual agent modeling
    systems have become capable of simulating human behavior or reactions to given
    stimuli or scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we will cover linear models for regression, classification,
    and clustering and dimensionality reduction and will also give some insights about
    some performance measures.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each tensor is described by a unit of dimensionality called ____.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data type
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rank
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetches
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State whether the following statement is True or False: TensorFlow uses the
    computation graph to execute an application, where each node represents an operation
    and the arcs are the data between operations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State whether the following statement is True or False: NumPy has the n–dimensional
    array support, but it doesn''t offer methods to create tensor functions and automatically
    compute derivatives (+ no GPU support).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which objects does a TensorFlow graph contains?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you're performing a little complex operation with TensorFlow, for example
    training a linear regression, TensorFlow internally represents its computation
    using a dataﬂow graph. The graph is called as?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dataflow graph
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Linear graph
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Computational graph
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Regression graph
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
