["```\nimport argparse\nfrom datetime import datetime\nimport os\nimport random\nfrom collections import deque\nimport gym\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\n```", "```\n            parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-DQN\")\n    parser.add_argument(\"--env , default=\"CartPole-v0\")\n    parser.add_argument(\"--lr\", type=float, default=0.005)\n    parser.add_argument(\"--batch_size\", type=int, default=256)\n    parser.add_argument(\"--gamma\", type=float, default=0.95)\n    parser.add_argument(\"--eps\", type=float, default=1.0)\n    parser.add_argument(\"--eps_decay\", type=float, default=0.995)\n    parser.add_argument(\"--eps_min\", type=float, default=0.01)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \n        datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    class ReplayBuffer:\n        def __init__(self, capacity=10000):\n            self.buffer = deque(maxlen=capacity)\n        def store(self, state, action, reward, next_state,\n        done):\n            self.buffer.append([state, action, reward, \n            next_state, done])\n        def sample(self):\n            sample = random.sample(self.buffer, \n                                   args.batch_size)\n            states, actions, rewards, next_states, done = \\\n                                map(np.asarray, zip(*sample))\n            states = np.array(states).reshape(\n                                        args.batch_size, -1)\n            next_states = np.array(next_states).\\\n                                reshape(args.batch_size, -1)\n            return states, actions, rewards, next_states,\n            done\n        def size(self):\n            return len(self.buffer)\n    ```", "```\n    class DQN:\n        def __init__(self, state_dim, aciton_dim):\n            self.state_dim = state_dim\n            self.action_dim = aciton_dim\n            self.epsilon = args.eps\n            self.model = self.nn_model()\n        def nn_model(self):\n            model = tf.keras.Sequential(\n                [\n                    Input((self.state_dim,)),\n                    Dense(32, activation=\"relu\"),\n                    Dense(16, activation=\"relu\"),\n                    Dense(self.action_dim),\n                ]\n            )\n            model.compile(loss=\"mse\", \n                          optimizer=Adam(args.lr))\n            return model\n    ```", "```\n        def predict(self, state):\n            return self.model.predict(state)\n        def get_action(self, state):\n            state = np.reshape(state, [1, self.state_dim])\n            self.epsilon *= args.eps_decay\n            self.epsilon = max(self.epsilon, args.eps_min)\n            q_value = self.predict(state)[0]\n            if np.random.random() < self.epsilon:\n                return random.randint(0, self.action_dim - 1)\n            return np.argmax(q_value)\n        def train(self, states, targets):\n            self.model.fit(states, targets, epochs=1)\n    ```", "```\n    class Agent:\n        def __init__(self, env):\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.n\n            self.model = DQN(self.state_dim, self.action_dim)\n            self.target_model = DQN(self.state_dim, \n                                    self.action_dim)\n            self.update_target()\n            self.buffer = ReplayBuffer()\n        def update_target(self):\n            weights = self.model.model.get_weights()\n            self.target_model.model.set_weights(weights)\n    ```", "```\n        def replay_experience(self):\n            for _ in range(10):\n                states, actions, rewards, next_states, done=\\\n                    self.buffer.sample()\n                targets = self.target_model.predict(states)\n                next_q_values = self.target_model.\\\n                             predict(next_states).max(axis=1)\n                targets[range(args.batch_size), actions] = (\n                    rewards + (1 - done) * next_q_values * \\\n                    args.gamma\n                )\n                self.model.train(states, targets)\n    ```", "```\n    def train(self, max_episodes=1000):\n            with writer.as_default():  # Tensorboard logging\n                for ep in range(max_episodes):\n                    done, episode_reward = False, 0\n                    observation = self.env.reset()\n                    while not done:\n                        action = \\\n                           self.model.get_action(observation)\n                        next_observation, reward, done, _ = \\\n                           self.env.step(action)\n                        self.buffer.store(\n                            observation, action, reward * \\\n                            0.01, next_observation, done\n                        )\n                        episode_reward += reward\n                        observation = next_observation\n                    if self.buffer.size() >= args.batch_size:\n                        self.replay_experience()\n                    self.update_target()\n                    print(f\"Episode#{ep} Reward:{\n                                            episode_reward}\")\n                    tf.summary.scalar(\"episode_reward\",\n                                     episode_reward, step=ep)\n                    writer.flush()\n    ```", "```\n    if __name__ == \"__main__\":\n        env = gym.make(\"CartPole-v0\")\n        agent = Agent(env)\n        agent.train(max_episodes=20000)\n    ```", "```\n    python ch3-deep-rl-agents/1_dqn.py\n    ```", "```\n    python ch3-deep-rl-agents/1_dqn.py –env \"MountainCar-v0\"\n    ```", "```\n        def replay_experience(self):\n            for _ in range(10):\n                states, actions, rewards, next_states, done=\\\n                    self.buffer.sample()\n                targets = self.target_model.predict(states)\n                next_q_values = \\\n                    self.target_model.predict(next_states)[\n                    range(args.batch_size),\n                    np.argmax(self.model.predict(\n                                       next_states), axis=1),\n                ]\n                targets[range(args.batch_size), actions] = (\n                    rewards + (1 - done) * next_q_values * \\\n                        args.gamma\n                )\n                self.model.train(states, targets)\n    ```", "```\n    python ch3-deep-rl-agents/1_double_dqn.py\n    ```", "```\nimport argparse\nimport os\nimport random\nfrom collections import deque\nfrom datetime import datetime\nimport gym\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Add, Dense, Input\nfrom tensorflow.keras.optimizers import Adam\n```", "```\n    parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-DuelingDQN\")\n    parser.add_argument(\"--env\", default=\"CartPole-v0\")\n    parser.add_argument(\"--lr\", type=float, default=0.005)\n    parser.add_argument(\"--batch_size\", type=int, default=64)\n    parser.add_argument(\"--gamma\", type=float, default=0.95)\n    parser.add_argument(\"--eps\", type=float, default=1.0)\n    parser.add_argument(\"--eps_decay\", type=float, default=0.995)\n    parser.add_argument(\"--eps_min\", type=float, default=0.01)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \n        datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    class ReplayBuffer:\n        def __init__(self, capacity=10000):\n            self.buffer = deque(maxlen=capacity)\n        def store(self, state, action, reward, next_state,\n        done):\n            self.buffer.append([state, action, reward, \n                                next_state, done])\n        def sample(self):\n            sample = random.sample(self.buffer, \n                                   args.batch_size)\n            states, actions, rewards, next_states, done = \\\n                                map(np.asarray, zip(*sample))\n            states = np.array(states).reshape(\n                                         args.batch_size, -1)\n            next_states = np.array(next_states).reshape(\n                                         args.batch_size, -1)\n            return states, actions, rewards, next_states,\n            done\n        def size(self):\n            return len(self.buffer)\n    ```", "```\n    class DuelingDQN:\n        def __init__(self, state_dim, aciton_dim):\n            self.state_dim = state_dim\n            self.action_dim = aciton_dim\n            self.epsilon = args.eps\n            self.model = self.nn_model()\n        def nn_model(self):\n            backbone = tf.keras.Sequential(\n                [\n                    Input((self.state_dim,)),\n                    Dense(32, activation=\"relu\"),\n                    Dense(16, activation=\"relu\"),\n                ]\n            )\n            state_input = Input((self.state_dim,))\n            backbone_1 = Dense(32, activation=\"relu\")\\\n                              (state_input)\n            backbone_2 = Dense(16, activation=\"relu\")\\\n                              (backbone_1)\n            value_output = Dense(1)(backbone_2)\n            advantage_output = Dense(self.action_dim)\\\n                                    (backbone_2)\n            output = Add()([value_output, advantage_output])\n            model = tf.keras.Model(state_input, output)\n            model.compile(loss=\"mse\", \n                          optimizer=Adam(args.lr))\n            return model\n    ```", "```\n            def predict(self, state):\n            return self.model.predict(state)\n        def get_action(self, state):\n            state = np.reshape(state, [1, self.state_dim])\n            self.epsilon *= args.eps_decay\n            self.epsilon = max(self.epsilon, args.eps_min)\n            q_value = self.predict(state)[0]\n            if np.random.random() < self.epsilon:\n                return random.randint(0, self.action_dim - 1)\n            return np.argmax(q_value)\n        def train(self, states, targets):\n            self.model.fit(states, targets, epochs=1)\n    ```", "```\n    class Agent:\n        def __init__(self, env):\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.n\n            self.model = DuelingDQN(self.state_dim, \n                                    self.action_dim)\n            self.target_model = DuelingDQN(self.state_dim,\n                                           self.action_dim)\n            self.update_target()\n            self.buffer = ReplayBuffer()\n        def update_target(self):\n            weights = self.model.model.get_weights()\n            self.target_model.model.set_weights(weights)\n    ```", "```\n        def replay_experience(self):\n            for _ in range(10):\n                states, actions, rewards, next_states, done=\\\n                    self.buffer.sample()\n                targets = self.target_model.predict(states)\n                next_q_values = self.target_model.\\\n                             predict(next_states).max(axis=1)\n                targets[range(args.batch_size), actions] = (\n                    rewards + (1 - done) * next_q_values * \\\n                    args.gamma\n                )\n                self.model.train(states, targets)\n    ```", "```\n    def train(self, max_episodes=1000):\n            with writer.as_default():\n                for ep in range(max_episodes):\n                    done, episode_reward = False, 0\n                    state = self.env.reset()\n                    while not done:\n                        action = self.model.get_action(state)\n                        next_state, reward, done, _ = \\\n                                        self.env.step(action)\n                        self.buffer.put(state, action, \\\n                                        reward * 0.01, \\\n                                        next_state, done)\n                        episode_reward += reward\n                        state = next_state\n                    if self.buffer.size() >= args.batch_size:\n                        self.replay_experience()\n                    self.update_target()\n                    print(f\"Episode#{ep} \\\n                          Reward:{episode_reward}\")\n                    tf.summary.scalar(\"episode_reward\",\\\n                                     episode_reward, step=ep)\n    ```", "```\n    if __name__ == \"__main__\":\n        env = gym.make(\"CartPole-v0\")\n        agent = Agent(env)\n        agent.train(max_episodes=20000)\n    ```", "```\n    python ch3-deep-rl-agents/2_dueling_dqn.py\n    ```", "```\n    python ch3-deep-rl-agents/2_dueling_dqn.py –env \"MountainCar-v0\"\n    ```", "```\nimport argparse\nfrom datetime import datetime\nimport os\nimport random\nfrom collections import deque\nimport gym\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Add, Dense, Input\nfrom tensorflow.keras.optimizers import Adam\n```", "```\n    parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-DuelingDoubleDQN\")\n    parser.add_argument(\"--env\", default=\"CartPole-v0\")\n    parser.add_argument(\"--lr\", type=float, default=0.005)\n    parser.add_argument(\"--batch_size\", type=int, default=256)\n    parser.add_argument(\"--gamma\", type=float, default=0.95)\n    parser.add_argument(\"--eps\", type=float, default=1.0)\n    parser.add_argument(\"--eps_decay\", type=float, default=0.995)\n    parser.add_argument(\"--eps_min\", type=float, default=0.01)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \\\n        datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    class ReplayBuffer:\n        def __init__(self, capacity=10000):\n            self.buffer = deque(maxlen=capacity)\n        def store(self, state, action, reward, next_state, done):\n            self.buffer.append([state, action, reward, \\\n            next_state, done])\n        def sample(self):\n            sample = random.sample(self.buffer, \\\n                                   args.batch_size)\n            states, actions, rewards, next_states, done = \\\n                                map(np.asarray, zip(*sample))\n            states = np.array(states).reshape(\n                                         args.batch_size, -1)\n            next_states = np.array(next_states).\\\n                                 reshape(args.batch_size, -1)\n            return states, actions, rewards, next_states, \\\n            done\n        def size(self):\n            return len(self.buffer)\n    ```", "```\n    class DuelingDQN:\n        def __init__(self, state_dim, aciton_dim):\n            self.state_dim = state_dim\n            self.action_dim = aciton_dim\n            self.epsilon = args.eps\n            self.model = self.nn_model()\n        def nn_model(self):\n            state_input = Input((self.state_dim,))\n            fc1 = Dense(32, activation=\"relu\")(state_input)\n            fc2 = Dense(16, activation=\"relu\")(fc1)\n            value_output = Dense(1)(fc2)\n            advantage_output = Dense(self.action_dim)(fc2)\n            output = Add()([value_output, advantage_output])\n            model = tf.keras.Model(state_input, output)\n            model.compile(loss=\"mse\", \\\n                          optimizer=Adam(args.lr))\n            return model\n    ```", "```\n        def predict(self, state):\n            return self.model.predict(state)\n        def get_action(self, state):\n            state = np.reshape(state, [1, self.state_dim])\n            self.epsilon *= args.eps_decay\n            self.epsilon = max(self.epsilon, args.eps_min)\n            q_value = self.predict(state)[0]\n            if np.random.random() < self.epsilon:\n                return random.randint(0, self.action_dim - 1)\n            return np.argmax(q_value)\n        def train(self, states, targets):\n            self.model.fit(states, targets, epochs=1)\n    ```", "```\n    class Agent:\n        def __init__(self, env):\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.n\n            self.model = DuelingDQN(self.state_dim, \n                                    self.action_dim)\n            self.target_model = DuelingDQN(self.state_dim,\n                                           self.action_dim)\n            self.update_target()\n            self.buffer = ReplayBuffer()\n        def update_target(self):\n            weights = self.model.model.get_weights()\n            self.target_model.model.set_weights(weights)\n    ```", "```\n        def replay_experience(self):\n            for _ in range(10):\n                states, actions, rewards, next_states, done=\\\n                                         self.buffer.sample()\n                targets = self.target_model.predict(states)\n                next_q_values = \\\n                    self.target_model.predict(next_states)[\n                    range(args.batch_size),\n                    np.argmax(self.model.predict(\n                                       next_states), axis=1),\n                ]\n                targets[range(args.batch_size), actions] = (\n                    rewards + (1 - done) * next_q_values * \\\n                    args.gamma\n                )\n                self.model.train(states, targets)\n    ```", "```\n    def train(self, max_episodes=1000):\n            with writer.as_default():\n                for ep in range(max_episodes):\n                    done, episode_reward = False, 0\n                    observation = self.env.reset()\n                    while not done:\n                        action = \\\n                           self.model.get_action(observation)\n                        next_observation, reward, done, _ = \\\n                            self.env.step(action)\n                        self.buffer.store(\n                            observation, action, reward * \\\n                                                              0.01, next_observation, done\n                        )\n                        episode_reward += reward\n                        observation = next_observation\n                    if self.buffer.size() >= args.batch_size:\n                        self.replay_experience()\n                    self.update_target()\n                    print(f\"Episode#{ep} \\\n                          Reward:{episode_reward}\")\n                    tf.summary.scalar(\"episode_reward\", \n                                       episode_reward, \n                                       step=ep)\n    ```", "```\n    if __name__ == \"__main__\":\n        env = gym.make(\"CartPole-v0\")\n        agent = Agent(env)\n        agent.train(max_episodes=20000)\n    ```", "```\n    python ch3-deep-rl-agents/3_dueling_double_dqn.py\n    ```", "```\n    python ch3-deep-rl-agents/3_dueling_double_dqn.py –env \"MountainCar-v0\"\n    ```", "```\nimport tensorflow as tf\nfrom datetime import datetime\nimport os\nfrom tensorflow.keras.layers import Input, Dense, LSTM\nfrom tensorflow.keras.optimizers import Adam\nimport gym\nimport argparse\nimport numpy as np\nfrom collections import deque\nimport random\n```", "```\n    parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-DRQN\")\n    parser.add_argument(\"--env\", default=\"CartPole-v0\")\n    parser.add_argument(\"--lr\", type=float, default=0.005)\n    parser.add_argument(\"--batch_size\", type=int, default=64)\n    parser.add_argument(\"--time_steps\", type=int, default=4)\n    parser.add_argument(\"--gamma\", type=float, default=0.95)\n    parser.add_argument(\"--eps\", type=float, default=1.0)\n    parser.add_argument(\"--eps_decay\", type=float, default=0.995)\n    parser.add_argument(\"--eps_min\", type=float, default=0.01)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \\\n        datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    class ReplayBuffer:\n        def __init__(self, capacity=10000):\n            self.buffer = deque(maxlen=capacity)\n        def store(self, state, action, reward, next_state,\\\n        done):\n            self.buffer.append([state, action, reward, \\\n                                next_state, done])\n        def sample(self):\n            sample = random.sample(self.buffer, \n                                   args.batch_size)\n            states, actions, rewards, next_states, done = \\\n                map(np.asarray, zip(*sample))\n            states = np.array(states).reshape(\n                                         args.batch_size, -1)\n            next_states = np.array(next_states).reshape(\n                                         args.batch_size, -1)\n            return states, actions, rewards, next_states, \\\n            done\n        def size(self):\n            return len(self.buffer)\n    ```", "```\n    class DRQN:\n        def __init__(self, state_dim, action_dim):\n            self.state_dim = state_dim\n            self.action_dim = action_dim\n            self.epsilon = args.eps\n            self.opt = Adam(args.lr)\n            self.compute_loss = \\\n                tf.keras.losses.MeanSquaredError()\n            self.model = self.nn_model()\n        def nn_model(self):\n            return tf.keras.Sequential(\n                [\n                    Input((args.time_steps, self.state_dim)),\n                    LSTM(32, activation=\"tanh\"),\n                    Dense(16, activation=\"relu\"),\n                    Dense(self.action_dim),\n                ]\n            )\n    ```", "```\n        def predict(self, state):\n            return self.model.predict(state)\n        def get_action(self, state):\n            state = np.reshape(state, [1, args.time_steps,\n                                       self.state_dim])\n            self.epsilon *= args.eps_decay\n            self.epsilon = max(self.epsilon, args.eps_min)\n            q_value = self.predict(state)[0]\n            if np.random.random() < self.epsilon:\n                return random.randint(0, self.action_dim - 1)\n            return np.argmax(q_value)\n        def train(self, states, targets):\n            targets = tf.stop_gradient(targets)\n            with tf.GradientTape() as tape:\n                logits = self.model(states, training=True)\n                assert targets.shape == logits.shape\n                loss = self.compute_loss(targets, logits)\n            grads = tape.gradient(loss, \n                              self.model.trainable_variables)\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n    ```", "```\n    class Agent:\n        def __init__(self, env):\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.n\n            self.states = np.zeros([args.time_steps, \n                                    self.state_dim])\n            self.model = DRQN(self.state_dim, \n                              self.action_dim)\n            self.target_model = DRQN(self.state_dim, \n                                     self.action_dim)\n            self.update_target()\n            self.buffer = ReplayBuffer()\n        def update_target(self):\n            weights = self.model.model.get_weights()\n            self.target_model.model.set_weights(weights)\n    ```", "```\n        def replay_experience(self):\n            for _ in range(10):\n                states, actions, rewards, next_states, done=\\\n                    self.buffer.sample()\n                targets = self.target_model.predict(states)\n                next_q_values = self.target_model.\\\n                             predict(next_states).max(axis=1)\n                targets[range(args.batch_size), actions] = (\n                    rewards + (1 - done) * next_q_values * \\\n                    args.gamma\n                )\n                self.model.train(states, targets)\n    ```", "```\n        def update_states(self, next_state):\n            self.states = np.roll(self.states, -1, axis=0)\n            self.states[-1] = next_state\n    ```", "```\n    def train(self, max_episodes=1000):\n            with writer.as_default():\n                for ep in range(max_episodes):\n                    done, episode_reward = False, 0\n                    self.states = np.zeros([args.time_steps, \n                                            self.state_dim])\n                    self.update_states(self.env.reset())\n                    while not done:\n                        action = self.model.get_action(\n                                                 self.states)\n                        next_state, reward, done, _ = \\\n                                        self.env.step(action)\n                        prev_states = self.states\n                        self.update_states(next_state)\n                        self.buffer.store(\n                            prev_states, action, reward * \\\n                            0.01, self.states, done\n                        )\n                        episode_reward += reward\n                    if self.buffer.size() >= args.batch_size:\n                        self.replay_experience()\n                    self.update_target()\n                    print(f\"Episode#{ep} \\\n                          Reward:{episode_reward}\")\n                    tf.summary.scalar(\"episode_reward\", episode_reward, step=ep)\n    ```", "```\n    if __name__ == \"__main__\":\n        env = gym.make(\"Pong-v0\")\n        agent = Agent(env)\n        agent.train(max_episodes=20000)\n    ```", "```\n    python ch3-deep-rl-agents/4_drqn.py\n    ```", "```\n    python ch3-deep-rl-agents/4_drqn.py –env \"MountainCar-v0\"\n    ```", "```\nimport argparse\nimport os\nfrom datetime import datetime\nfrom multiprocessing import cpu_count\nfrom threading import Thread\nimport gym\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input, Dense, Lambda\n```", "```\n    parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-A3C\")\n    parser.add_argument(\"--env\", default=\"MountainCarContinuous-v0\")\n    parser.add_argument(\"--actor-lr\", type=float, default=0.001)\n    parser.add_argument(\"--critic-lr\", type=float, default=0.002)\n    parser.add_argument(\"--update-interval\", type=int, default=5)\n    parser.add_argument(\"--gamma\", type=float, default=0.99)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \\\n           datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    GLOBAL_EPISODE_NUM = 0\n    ```", "```\n    class Actor:\n        def __init__(self, state_dim, action_dim, \n        action_bound, std_bound):\n            self.state_dim = state_dim\n            self.action_dim = action_dim\n            self.action_bound = action_bound\n            self.std_bound = std_bound\n            self.model = self.nn_model()\n            self.opt = tf.keras.optimizers.Adam(\n                                               args.actor_lr)\n            self.entropy_beta = 0.01\n        def nn_model(self):\n            state_input = Input((self.state_dim,))\n            dense_1 = Dense(32, activation=\"relu\")\\\n                            (state_input)\n            dense_2 = Dense(32, activation=\"relu\")(dense_1)\n            out_mu = Dense(self.action_dim, \\\n                           activation=\"tanh\")(dense_2)\n            mu_output = Lambda(lambda x: x * \\\n                               self.action_bound)(out_mu)\n            std_output = Dense(self.action_dim, \n                              activation=\"softplus\")(dense_2)\n            return tf.keras.models.Model(state_input, \n                                     [mu_output, std_output])\n    ```", "```\n        def get_action(self, state):\n            state = np.reshape(state, [1, self.state_dim])\n            mu, std = self.model.predict(state)\n            mu, std = mu[0], std[0]\n            return np.random.normal(mu, std, \n                                    size=self.action_dim)\n    ```", "```\n        def log_pdf(self, mu, std, action):\n            std = tf.clip_by_value(std, self.std_bound[0],\n                                   self.std_bound[1])\n            var = std ** 2\n            log_policy_pdf = -0.5 * (action - mu) ** 2 / var\\\n                              - 0.5 * tf.math.log(\n                var * 2 * np.pi\n            )\n            return tf.reduce_sum(log_policy_pdf, 1,\n                                 keepdims=True)\n    ```", "```\n        def compute_loss(self, mu, std, actions, advantages):\n            log_policy_pdf = self.log_pdf(mu, std, actions)\n            loss_policy = log_policy_pdf * advantages\n            return tf.reduce_sum(-loss_policy)\n    ```", "```\n        def train(self, states, actions, advantages):\n            with tf.GradientTape() as tape:\n                mu, std = self.model(states, training=True)\n                loss = self.compute_loss(mu, std, actions,\n                                         advantages)\n            grads = tape.gradient(loss, \n                             self.model.trainable_variables)\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n            return loss\n    ```", "```\n    class Critic:\n        def __init__(self, state_dim):\n            self.state_dim = state_dim\n            self.model = self.nn_model()\n            self.opt = tf.keras.optimizers.Adam\\\n                                (args.critic_lr)\n        def nn_model(self):\n            return tf.keras.Sequential(\n                [\n                    Input((self.state_dim,)),\n                    Dense(32, activation=\"relu\"),\n                    Dense(32, activation=\"relu\"),\n                    Dense(16, activation=\"relu\"),\n                    Dense(1, activation=\"linear\"),\n                ]\n            )\n    ```", "```\n        def compute_loss(self, v_pred, td_targets):\n            mse = tf.keras.losses.MeanSquaredError()\n            return mse(td_targets, v_pred)\n        def train(self, states, td_targets):\n            with tf.GradientTape() as tape:\n                v_pred = self.model(states, training=True)\n                assert v_pred.shape == td_targets.shape\n                loss = self.compute_loss(v_pred, \\\n                                tf.stop_gradient(td_targets))\n            grads = tape.gradient(loss, \\\n                             self.model.trainable_variables)\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n            return loss\n    ```", "```\n    class A3CWorker(Thread):\n        def __init__(self, env, global_actor, global_critic,\n        max_episodes):\n            Thread.__init__(self)\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.shape[0]\n            self.action_bound = self.env.action_space.high[0]\n            self.std_bound = [1e-2, 1.0]\n            self.max_episodes = max_episodes\n            self.global_actor = global_actor\n            self.global_critic = global_critic\n            self.actor = Actor(\n                self.state_dim, self.action_dim, \n                self.action_bound, self.std_bound\n            )\n            self.critic = Critic(self.state_dim)\n            self.actor.model.set_weights(\n                self.global_actor.model.get_weights())\n            self.critic.model.set_weights(\n                self.global_critic.model.get_weights())\n    ```", "```\n        def n_step_td_target(self, rewards, next_v_value,\n        done):\n            td_targets = np.zeros_like(rewards)\n            cumulative = 0\n            if not done:\n                cumulative = next_v_value\n            for k in reversed(range(0, len(rewards))):\n                cumulative = args.gamma * cumulative + \\\n                             rewards[k]\n                td_targets[k] = cumulative\n            return td_targets\n    ```", "```\n        def advantage(self, td_targets, baselines):\n            return td_targets - baselines\n    ```", "```\n        def train(self):\n            global GLOBAL_EPISODE_NUM\n            while self.max_episodes >= GLOBAL_EPISODE_NUM:\n                state_batch = []\n                action_batch = []\n                reward_batch = []\n                episode_reward, done = 0, False\n                state = self.env.reset()\n                while not done:\n                    # self.env.render()\n                    action = self.actor.get_action(state)\n                    action = np.clip(action, \n                                     -self.action_bound,\n                                     self.action_bound)\n                    next_state, reward, done, _ = \\\n                        self.env.step(action)\n                    state = np.reshape(state, [1, \n                                            self.state_dim])\n                    action = np.reshape(action, [1, 1])\n                    next_state = np.reshape(next_state, \n                                         [1, self.state_dim])\n                    reward = np.reshape(reward, [1, 1])\n                    state_batch.append(state)\n                    action_batch.append(action)\n                    reward_batch.append(reward)\n    ```", "```\n                    if len(state_batch) >= args.update_\\\n                    interval or done:\n                        states = np.array([state.squeeze() \\\n                                   for state in state_batch])\n                        actions = np.array([action.squeeze()\\\n                                 for action in action_batch])\n                        rewards = np.array([reward.squeeze()\\\n                                 for reward in reward_batch])\n                        next_v_value = self.critic.model.\\\n                                          predict(next_state)\n                        td_targets = self.n_step_td_target(\n                            (rewards + 8) / 8, next_v_value,\n                             done\n                        )\n                        advantages = td_targets - \\\n                            self.critic.model.predict(states)\n                        actor_loss = self.global_actor.train(\n                                states, actions, advantages)\n                        critic_loss = self.global_critic.\\\n                                train(states, td_targets)\n                        self.actor.model.set_weights(self.\\\n                            global_actor.model.get_weights())\n                        self.critic.model.set_weights(\n                            self.global_critic.model.\\\n                            get_weights()\n                        )\n                        state_batch = []\n                        action_batch = []\n                        reward_batch = []\n                    episode_reward += reward[0][0]\n                    state = next_state[0]\n                print(f\"Episode#{GLOBAL_EPISODE_NUM}\\\n                      Reward:{episode_reward}\")\n                tf.summary.scalar(\"episode_reward\", \n                                   episode_reward,\n                                   step=GLOBAL_EPISODE_NUM)\n                GLOBAL_EPISODE_NUM += 1\n    ```", "```\n        def run(self):\n            self.train()\n    ```", "```\n    class Agent:\n        def __init__(self, env_name, \n                     num_workers=cpu_count()):\n            env = gym.make(env_name)\n            self.env_name = env_name\n            self.state_dim = env.observation_space.shape[0]\n            self.action_dim = env.action_space.shape[0]\n            self.action_bound = env.action_space.high[0]\n            self.std_bound = [1e-2, 1.0]\n            self.global_actor = Actor(\n                self.state_dim, self.action_dim, \n                self.action_bound, self.std_bound\n            )\n            self.global_critic = Critic(self.state_dim)\n            self.num_workers = num_workers\n    ```", "```\n    def train(self, max_episodes=20000):\n            workers = []\n            for i in range(self.num_workers):\n                env = gym.make(self.env_name)\n                workers.append(\n                    A3CWorker(env, self.global_actor, \n                            self.global_critic, max_episodes)\n                )\n            for worker in workers:\n                worker.start()\n            for worker in workers:\n                worker.join()\n    ```", "```\n    if __name__ == \"__main__\":\n        env_name = \"MountainCarContinuous-v0\"\n        agent = Agent(env_name, args.num_workers)\n        agent.train(max_episodes=20000)\n    ```", "```\nimport argparse\nimport os\nfrom datetime import datetime\nimport gym\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input, Lambda \n```", "```\n    parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-PPO\")\n    parser.add_argument(\"--env\", default=\"Pendulum-v0\")\n    parser.add_argument(\"--update-freq\", type=int, default=5)\n    parser.add_argument(\"--epochs\", type=int, default=3)\n    parser.add_argument(\"--actor-lr\", type=float, default=0.0005)\n    parser.add_argument(\"--critic-lr\", type=float, default=0.001)\n    parser.add_argument(\"--clip-ratio\", type=float, default=0.1)\n    parser.add_argument(\"--gae-lambda\", type=float, default=0.95)\n    parser.add_argument(\"--gamma\", type=float, default=0.99)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \n        datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    class Actor:\n        def __init__(self, state_dim, action_dim, \n        action_bound, std_bound):\n            self.state_dim = state_dim\n            self.action_dim = action_dim\n            self.action_bound = action_bound\n            self.std_bound = std_bound\n            self.model = self.nn_model()\n            self.opt = \\\n                tf.keras.optimizers.Adam(args.actor_lr)\n\n        def nn_model(self):\n            state_input = Input((self.state_dim,))\n            dense_1 = Dense(32, activation=\"relu\")\\\n                           (state_input)\n            dense_2 = Dense(32, activation=\"relu\")\\\n                           (dense_1)\n            out_mu = Dense(self.action_dim,\n                           activation=\"tanh\")(dense_2)\n            mu_output = Lambda(lambda x: x * \\\n                               self.action_bound)(out_mu)\n            std_output = Dense(self.action_dim, \n                              activation=\"softplus\")(dense_2)\n            return tf.keras.models.Model(state_input, \n                                     [mu_output, std_output])\n    ```", "```\n        def get_action(self, state):\n            state = np.reshape(state, [1, self.state_dim])\n            mu, std = self.model.predict(state)\n            action = np.random.normal(mu[0], std[0], \n                                      size=self.action_dim)\n            action = np.clip(action, -self.action_bound, \n                             self.action_bound)\n            log_policy = self.log_pdf(mu, std, action)\n            return log_policy, action\n    ```", "```\n        def log_pdf(self, mu, std, action):\n            std = tf.clip_by_value(std, self.std_bound[0], \n                                   self.std_bound[1])\n            var = std ** 2\n            log_policy_pdf = -0.5 * (action - mu) ** 2 / var\\\n                              - 0.5 * tf.math.log(\n                var * 2 * np.pi\n            )\n            return tf.reduce_sum(log_policy_pdf, 1,\n                                 keepdims=True)\n    ```", "```\n        def compute_loss(self, log_old_policy, \n                         log_new_policy, actions, gaes):\n            ratio = tf.exp(log_new_policy - \\\n                           tf.stop_gradient(log_old_policy))\n            gaes = tf.stop_gradient(gaes)\n            clipped_ratio = tf.clip_by_value(\n                ratio, 1.0 - args.clip_ratio, 1.0 + \\\n                args.clip_ratio\n            )\n            surrogate = -tf.minimum(ratio * gaes, \\\n                                    clipped_ratio * gaes)\n            return tf.reduce_mean(surrogate)\n    ```", "```\n        def train(self, log_old_policy, states, actions,\n        gaes):\n            with tf.GradientTape() as tape:\n                mu, std = self.model(states, training=True)\n                log_new_policy = self.log_pdf(mu, std,\n                                              actions)\n                loss = self.compute_loss(log_old_policy, \n                              log_new_policy, actions, gaes)\n            grads = tape.gradient(loss, \n                              self.model.trainable_variables)\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n            return loss\n    ```", "```\n    class Critic:\n        def __init__(self, state_dim):\n            self.state_dim = state_dim\n            self.model = self.nn_model()\n            self.opt = tf.keras.optimizers.Adam(\n                                             args.critic_lr)\n        def nn_model(self):\n            return tf.keras.Sequential(\n                [\n                    Input((self.state_dim,)),\n                    Dense(32, activation=\"relu\"),\n                    Dense(32, activation=\"relu\"),\n                    Dense(16, activation=\"relu\"),\n                    Dense(1, activation=\"linear\"),\n                ]\n            )\n    ```", "```\n        def compute_loss(self, v_pred, td_targets):\n            mse = tf.keras.losses.MeanSquaredError()\n            return mse(td_targets, v_pred)\n        def train(self, states, td_targets):\n            with tf.GradientTape() as tape:\n                v_pred = self.model(states, training=True)\n                assert v_pred.shape == td_targets.shape\n                loss = self.compute_loss(v_pred, \n                                tf.stop_gradient(td_targets))\n            grads = tape.gradient(loss, \n                             self.model.trainable_variables)\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n            return loss\n    ```", "```\n    class Agent:\n        def __init__(self, env):\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.shape[0]\n            self.action_bound = self.env.action_space.high[0]\n            self.std_bound = [1e-2, 1.0]\n            self.actor_opt = \\\n                tf.keras.optimizers.Adam(args.actor_lr)\n            self.critic_opt = \\\n                tf.keras.optimizers.Adam(args.critic_lr)\n            self.actor = Actor(\n                self.state_dim, self.action_dim, \n                self.action_bound, self.std_bound\n            )\n            self.critic = Critic(self.state_dim)    \n    ```", "```\n        def gae_target(self, rewards, v_values, next_v_value,\n        done):\n            n_step_targets = np.zeros_like(rewards)\n            gae = np.zeros_like(rewards)\n            gae_cumulative = 0\n            forward_val = 0\n            if not done:\n                forward_val = next_v_value\n            for k in reversed(range(0, len(rewards))):\n                delta = rewards[k] + args.gamma * \\\n                        forward_val - v_values[k]\n                gae_cumulative = args.gamma * \\\n                    args.gae_lambda * gae_cumulative + delta\n                gae[k] = gae_cumulative\n                forward_val = v_values[k]\n                n_step_targets[k] = gae[k] + v_values[k]\n            return gae, n_step_targets\n    ```", "```\n        def train(self, max_episodes=1000):\n            with writer.as_default():\n                for ep in range(max_episodes):\n                    state_batch = []\n                    action_batch = []\n                    reward_batch = []\n                    old_policy_batch = []\n                    episode_reward, done = 0, False\n                    state = self.env.reset()\n    ```", "```\n                    while not done:\n                        # self.env.render()\n                        log_old_policy, action = \\\n                            self.actor.get_action(state)\n                        next_state, reward, done, _ = \\\n                                       self.env.step(action)\n                        state = np.reshape(state, [1, \n                                             self.state_dim])\n                        action = np.reshape(action, [1, 1])\n                        next_state = np.reshape(next_state, \n                                         [1, self.state_dim])\n                        reward = np.reshape(reward, [1, 1])\n                        log_old_policy = \\\n                           np.reshape(log_old_policy, [1, 1])\n                        state_batch.append(state)\n                        action_batch.append(action)\n                        reward_batch.append((reward + 8) / 8)\n                        old_policy_batch.append(log_old_policy)\n    ```", "```\n        if len(state_batch) >= args.update_freq or done:\n                            states = np.array([state.\\\n                                       squeeze() for state \\\n                                       in state_batch])\n                            actions = np.array(\n                                [action.squeeze() for action\\\n                                 in action_batch]\n                            )\n                            rewards = np.array(\n                                [reward.squeeze() for reward\\\n                                 in reward_batch]\n                            )\n                            old_policies = np.array(\n                                [old_pi.squeeze() for old_pi\\\n                                 in old_policy_batch]\n                            )\n                            v_values = self.critic.model.\\\n                                        predict(states)\n                            next_v_value =self.critic.model.\\\n                                          predict(next_state)\n                            gaes, td_targets = \\\n                                 self.gae_target(\n                                     rewards, v_values, \\\n                                     next_v_value, done\n                            )\n    ```", "```\n                            actor_losses, critic_losses=[],[]\n                            for epoch in range(args.epochs):\n                                actor_loss =self.actor.train(\n                                    old_policies, states,\\\n                                    actions, gaes\n                                )\n                                actor_losses.append(\n                                                 actor_loss)\n                                critic_loss = self.critic.\\\n                                    train(states, td_targets)\n                                critic_losses.append(\n                                                 critic_loss)\n                            # Plot mean actor & critic losses \n                            # on every update\n                            tf.summary.scalar(\"actor_loss\", \n                              np.mean(actor_losses), step=ep)\n                            tf.summary.scalar(\n                                \"critic_loss\", \n                                 np.mean(critic_losses), \n                                 step=ep\n                            )\n    ```", "```\n                            state_batch = []\n                            action_batch = []\n                            reward_batch = []\n                            old_policy_batch = []\n                        episode_reward += reward[0][0]\n                        state = next_state[0]\n                    print(f\"Episode#{ep} \\\n                            Reward:{episode_reward}\")\n                    tf.summary.scalar(\"episode_reward\", \\\n                                       episode_reward, \\\n                                       step=ep)\n    ```", "```\n    if __name__ == \"__main__\":\n        env_name = \"Pendulum-v0\"\n        env = gym.make(env_name)\n        agent = Agent(env)\n        agent.train(max_episodes=20000)\n    ```", "```\nimport argparse\nimport os\nimport random\nfrom collections import deque\nfrom datetime import datetime\nimport gym\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input, Lambda, concatenate\n```", "```\n    parser = argparse.ArgumentParser(prog=\"TFRL-Cookbook-Ch3-DDPG\")\n    parser.add_argument(\"--env\", default=\"Pendulum-v0\")\n    parser.add_argument(\"--actor_lr\", type=float, default=0.0005)\n    parser.add_argument(\"--critic_lr\", type=float, default=0.001)\n    parser.add_argument(\"--batch_size\", type=int, default=64)\n    parser.add_argument(\"--tau\", type=float, default=0.05)\n    parser.add_argument(\"--gamma\", type=float, default=0.99)\n    parser.add_argument(\"--train_start\", type=int, default=2000)\n    parser.add_argument(\"--logdir\", default=\"logs\")\n    args = parser.parse_args()\n    ```", "```\n    logdir = os.path.join(\n        args.logdir, parser.prog, args.env, \\\n        datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    )\n    print(f\"Saving training logs to:{logdir}\")\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    class ReplayBuffer:\n        def __init__(self, capacity=10000):\n            self.buffer = deque(maxlen=capacity)\n        def store(self, state, action, reward, next_state,\n                  done):\n            self.buffer.append([state, action, reward, \n                                next_state, done])\n        def sample(self):\n            sample = random.sample(self.buffer, \n                                   args.batch_size)\n            states, actions, rewards, next_states, done = \\\n                                map(np.asarray, zip(*sample))\n            states = np.array(states).reshape(\n                                         args.batch_size, -1)\n            next_states = np.array(next_states).\\\n                              reshape(args.batch_size, -1)\n            return states, actions, rewards, next_states, \\\n            done\n        def size(self):\n            return len(self.buffer)\n    ```", "```\n    class Actor:\n        def __init__(self, state_dim, action_dim, \n        action_bound):\n            self.state_dim = state_dim\n            self.action_dim = action_dim\n            self.action_bound = action_bound\n            self.model = self.nn_model()\n            self.opt = tf.keras.optimizers.Adam(args.actor_lr)\n        def nn_model(self):\n            return tf.keras.Sequential(\n                [\n                    Input((self.state_dim,)),\n                    Dense(32, activation=\"relu\"),\n                    Dense(32, activation=\"relu\"),\n                    Dense(self.action_dim, \n                          activation=\"tanh\"),\n                    Lambda(lambda x: x * self.action_bound),\n                ]\n            )\n    ```", "```\n        def get_action(self, state):\n            state = np.reshape(state, [1, self.state_dim])\n            return self.model.predict(state)[0]\n    ```", "```\n        def predict(self, state):\n            return self.model.predict(state)\n    ```", "```\n        def train(self, states, q_grads):\n            with tf.GradientTape() as tape:\n                grads = tape.gradient(\n                    self.model(states), \n                    self.model.trainable_variables, -q_grads\n                )\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n    ```", "```\n    class Critic:\n        def __init__(self, state_dim, action_dim):\n            self.state_dim = state_dim\n            self.action_dim = action_dim\n            self.model = self.nn_model()\n            self.opt = \\\n                tf.keras.optimizers.Adam(args.critic_lr)\n        def nn_model(self):\n            state_input = Input((self.state_dim,))\n            s1 = Dense(64, activation=\"relu\")(state_input)\n            s2 = Dense(32, activation=\"relu\")(s1)\n            action_input = Input((self.action_dim,))\n            a1 = Dense(32, activation=\"relu\")(action_input)\n            c1 = concatenate([s2, a1], axis=-1)\n            c2 = Dense(16, activation=\"relu\")(c1)\n            output = Dense(1, activation=\"linear\")(c2)\n            return tf.keras.Model([state_input, \n                                   action_input], output)\n    ```", "```\n        def q_gradients(self, states, actions):\n            actions = tf.convert_to_tensor(actions)\n            with tf.GradientTape() as tape:\n                tape.watch(actions)\n                q_values = self.model([states, actions])\n                q_values = tf.squeeze(q_values)\n            return tape.gradient(q_values, actions)\n    ```", "```\n        def predict(self, inputs):\n            return self.model.predict(inputs)\n    ```", "```\n        def train(self, states, actions, td_targets):\n            with tf.GradientTape() as tape:\n                v_pred = self.model([states, actions],\n                                      training=True)\n                assert v_pred.shape == td_targets.shape\n                loss = self.compute_loss(v_pred, \n                                tf.stop_gradient(td_targets))\n            grads = tape.gradient(loss, \n                              self.model.trainable_variables)\n            self.opt.apply_gradients(zip(grads, \n                             self.model.trainable_variables))\n            return loss\n    ```", "```\n    class Agent:\n        def __init__(self, env):\n            self.env = env\n            self.state_dim = \\\n                self.env.observation_space.shape[0]\n            self.action_dim = self.env.action_space.shape[0]\n            self.action_bound = self.env.action_space.high[0]\n            self.buffer = ReplayBuffer()\n            self.actor = Actor(self.state_dim, \\\n                               self.action_dim, \n                               self.action_bound)\n            self.critic = Critic(self.state_dim, \n                                 self.action_dim)\n            self.target_actor = Actor(self.state_dim, \n                                      self.action_dim, \n                                      self.action_bound)\n            self.target_critic = Critic(self.state_dim, \n                                       self.action_dim)\n            actor_weights = self.actor.model.get_weights()\n            critic_weights = self.critic.model.get_weights()\n            self.target_actor.model.set_weights(\n                                               actor_weights)\n            self.target_critic.model.set_weights(\n                                              critic_weights)\n    ```", "```\n        def update_target(self):\n            actor_weights = self.actor.model.get_weights()\n            t_actor_weights = \\\n                self.target_actor.model.get_weights()\n            critic_weights = self.critic.model.get_weights()\n            t_critic_weights = \\\n                self.target_critic.model.get_weights()\n            for i in range(len(actor_weights)):\n                t_actor_weights[i] = (\n                    args.tau * actor_weights[i] + \\\n                    (1 - args.tau) * t_actor_weights[i]\n                )\n            for i in range(len(critic_weights)):\n                t_critic_weights[i] = (\n                    args.tau * critic_weights[i] + \\\n                    (1 - args.tau) * t_critic_weights[i]\n                )\n            self.target_actor.model.set_weights(\n                                             t_actor_weights)\n            self.target_critic.model.set_weights(\n                                            t_critic_weights)\n    ```", "```\n        def get_td_target(self, rewards, q_values, dones):\n            targets = np.asarray(q_values)\n            for i in range(q_values.shape[0]):\n                if dones[i]:\n                    targets[i] = rewards[i]\n                else:\n                    targets[i] = args.gamma * q_values[i]\n            return targets\n    ```", "```\n        def add_ou_noise(self, x, rho=0.15, mu=0, dt=1e-1,\n         sigma=0.2, dim=1):\n            return (\n                x + rho * (mu - x) * dt + sigma * \\\n                np.sqrt(dt) * np.random.normal(size=dim)\n            )\n    ```", "```\n        def replay_experience(self):\n            for _ in range(10):\n                states, actions, rewards, next_states, \\\n                    dones = self.buffer.sample()\n                target_q_values = self.target_critic.predict(\n                    [next_states, self.target_actor.\\\n                     predict(next_states)]\n                )\n                td_targets = self.get_td_target(rewards,\n                                      target_q_values, dones)\n                self.critic.train(states, actions, \n                                  td_targets)\n                s_actions = self.actor.predict(states)\n                s_grads = self.critic.q_gradients(states, \n                                                  s_actions)\n                grads = np.array(s_grads).reshape((-1, \n                                            self.action_dim))\n                self.actor.train(states, grads)\n                self.update_target()\n    ```", "```\n        def train(self, max_episodes=1000):\n            with writer.as_default():\n                for ep in range(max_episodes):\n                    episode_reward, done = 0, False\n                    state = self.env.reset()\n                    bg_noise = np.zeros(self.action_dim)\n                    while not done:\n                        # self.env.render()\n                        action = self.actor.get_action(state)\n                        noise = self.add_ou_noise(bg_noise, \\\n                                         dim=self.action_dim)\n                        action = np.clip(\n                            action + noise, -self.action_\\\n                              bound, self.action_bound\n                        )\n                        next_state, reward, done, _ = \\\n                                       self.env.step(action)\n                        self.buffer.store(state, action, \\\n                          (reward + 8) / 8, next_state, done)\n                        bg_noise = noise\n                        episode_reward += reward\n                        state = next_state\n                    if (\n                        self.buffer.size() >= args.batch_size\n                        and self.buffer.size() >= \\\n                            args.train_start\n                    ):\n                        self.replay_experience()\n                    print(f\"Episode#{ep} \\\n                            Reward:{episode_reward}\")\n                    tf.summary.scalar(\"episode_reward\", \n                                     episode_reward, step=ep)\n    ```", "```\n    if __name__ == \"__main__\":\n        env_name = \"Pendulum-v0\"\n        env = gym.make(env_name)\n        agent = Agent(env)\n        agent.train(max_episodes=20000)\n    ```"]