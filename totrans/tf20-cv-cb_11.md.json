["```\n$> pip install git+https://github.com/keras-team/keras-tuner.git@1.0.2rc2 autokeras pydot graphviz\n```", "```\n    from autokeras import ImageClassifier\n    from tensorflow.keras.datasets import fashion_mnist as fm\n    ```", "```\n    (X_train, y_train), (X_test, y_test) = fm.load_data()\n    ```", "```\n    X_train = X_train.astype('float32') / 255.0\n    X_test = X_test.astype('float32') / 255.0\n    ```", "```\n    EPOCHS = 10\n    ```", "```\n    classifier = ImageClassifier(seed=9, max_trials=10)\n    ```", "```\n    classifier.fit(X_train, y_train, epochs=EPOCHS)\n    ```", "```\n    print(classifier.evaluate(X_test, y_test))\n    ```", "```\n    import csv\n    import pathlib\n    import numpy as np\n    from autokeras import ImageRegressor\n    from tensorflow.keras.preprocessing.image import *\n    ```", "```\n    def load_mapping(csv_path, faces_path):\n        mapping = {}\n        with open(csv_path, 'r') as f:\n            reader = csv.DictReader(f)\n            for line in reader:\n                file_name = line[\"file_name\"].rsplit(\".\")[0]\n               key = f'{faces_path}/{file_name}.jpg_face.jpg'\n                mapping[key] = int(line['real_age'])\n        return mapping\n    ```", "```\n    def get_images_and_labels(mapping):\n        images = []\n        labels = []\n        for image_path, label in mapping.items():\n            try:\n                image = load_img(image_path, target_size=(64, \n                                                        64))\n                image = img_to_array(image)\n                images.append(image)\n                labels.append(label)\n            except FileNotFoundError:\n                continue\n        return (np.array(images) - 127.5) / 127.5, \\\n               np.array(labels).astype('float32')\n    ```", "```\n    base_path = (pathlib.Path.home() / '.keras' / 'datasets' \n                 /'appa-real-release')\n    train_csv_path = str(base_path / 'gt_train.csv')\n    test_csv_path = str(base_path / 'gt_test.csv')\n    val_csv_path = str(base_path / 'gt_valid.csv')\n    ```", "```\n    train_faces_path = str(base_path / 'train')\n    test_faces_path = str(base_path / 'test')\n    val_faces_path = str(base_path / 'valid')\n    ```", "```\n    train_mapping = load_mapping(train_csv_path, \n                                train_faces_path)\n    test_mapping = load_mapping(test_csv_path, \n                               test_faces_path)\n    val_mapping = load_mapping(val_csv_path, \n                               val_faces_path)\n    ```", "```\n    X_train, y_train = get_images_and_labels(train_mapping)\n    X_test, y_test = get_images_and_labels(test_mapping)\n    X_val, y_val = get_images_and_labels(val_mapping)\n    ```", "```\n    EPOCHS = 15\n    ```", "```\n    regressor = ImageRegressor(seed=9,\n                               max_trials=10,\n                               optimizer='adam')\n    ```", "```\n    regressor.fit(X_train, y_train,\n                  epochs=EPOCHS,\n                  validation_data=(X_val, y_val))\n    ```", "```\n    print(regressor.evaluate(X_test, y_test))\n    ```", "```\n    from autokeras import *\n    from tensorflow.keras.datasets import fashion_mnist as fm\n    from tensorflow.keras.models import load_model\n    from tensorflow.keras.utils import plot_model\n    ```", "```\n    (X_train, y_train), (X_test, y_test) = fm.load_data()\n    ```", "```\n    X_train = X_train.astype('float32') / 255.0\n    X_test = X_test.astype('float32') / 255.0\n    ```", "```\n    EPOCHS = 10\n    ```", "```\n    classifier = ImageClassifier(seed=9,\n                                 max_trials=20,\n                                 optimizer='adam')\n    ```", "```\n    classifier.fit(X_train, y_train, epochs=EPOCHS)\n    ```", "```\n    model = classifier.export_model()\n    model.save('model.h5')\n    ```", "```\n    model = load_model('model.h5',\n                       custom_objects=CUSTOM_OBJECTS)\n    ```", "```\n    print(classifier.evaluate(X_test, y_test))\n    ```", "```\n    print(model.summary())\n    ```", "```\n    plot_model(model,\n               show_shapes=True,\n               show_layer_names=True,\n               to_file='model.png')\n    ```", "```\n    from autokeras import *\n    from tensorflow.keras.datasets import fashion_mnist as fm\n    from tensorflow.keras.models import load_model\n    from tensorflow.keras.utils import *\n    ```", "```\n    (X_train, y_train), (X_test, y_test) = fm.load_data()\n    ```", "```\n    X_train = X_train.astype('float32')\n    X_test = X_test.astype('float32')\n    ```", "```\n    def create_automodel(max_trials=10):\n        input = ImageInput()\n        x = Normalization()(input)\n        x = ImageAugmentation(horizontal_flip=False,\n                              vertical_flip=False)(x)\n    ```", "```\n        left = ConvBlock()(x)\n        right = XceptionBlock(pretrained=True)(x)\n    ```", "```\n        x = Merge()([left, right])\n        x = SpatialReduction(reduction_type='flatten')(x)\n        x = DenseBlock()(x)\n    ```", "```\n        output = ClassificationHead()(x)\n    ```", "```\n        return AutoModel(inputs=input,\n                         outputs=output,\n                         overwrite=True,\n                         max_trials=max_trials)\n    ```", "```\n    EPOCHS = 10\n    ```", "```\n    model = create_automodel()\n    model.fit(X_train, y_train, epochs=EPOCHS)\n    ```", "```\n    model = model.export_model()\n    ```", "```\n    print(model.evaluate(X_test, to_categorical(y_test)))\n    ```", "```\n    plot_model(model,\n               show_shapes=True,\n               show_layer_names=True,\n               to_file='automodel.png')\n    ```", "```\n$> pip install opencv-contrib-python scikit-learn imutils\n```", "```\n    import csv\n    import os\n    import pathlib\n    from glob import glob\n    import cv2\n    import imutils\n    import numpy as np\n    from autokeras import *\n    from sklearn.preprocessing import LabelEncoder\n    from tensorflow.keras.models import load_model\n    from tensorflow.keras.preprocessing.image import *\n    ```", "```\n    base_path = (pathlib.Path.home() / '.keras' / 'datasets' \n                     /'adience')\n    folds_path = str(base_path / 'folds')\n    ```", "```\n    AGE_BINS = [(0, 2), (4, 6), (8, 13), (15, 20), (25, 32), \n                (38, 43), (48, 53), (60, 99)]\n    ```", "```\n    def age_to_bin(age):\n        age = age.replace('(', '').replace(')', '').\n                                        split(',')\n        lower, upper = [int(x.strip()) for x in age]\n        for bin_low, bin_up in AGE_BINS:\n            if lower >= bin_low and upper <= bin_up:\n                label = f'{bin_low}_{bin_up}'\n                return label\n    ```", "```\n    def rectangle_area(r):\n        return (r[2] - r[0]) * (r[3] - r[1])\n    ```", "```\n    def plot_face(image, age_gender, detection):\n        frame_x, frame_y, frame_width, frame_height = detection\n        cv2.rectangle(image,\n                      (frame_x, frame_y),\n                      (frame_x + frame_width,\n                       frame_y + frame_height),\n                      color=(0, 255, 0),\n                      thickness=2)\n        cv2.putText(image,\n                    age_gender,\n                    (frame_x, frame_y - 10),\n                    fontFace=cv2.FONT_HERSHEY_SIMPLEX,\n                    fontScale=0.45,\n                    color=(0, 255, 0),\n                    thickness=2)\n        return image\n    ```", "```\n    def predict(model, roi):\n        roi = cv2.resize(roi, (64, 64))\n        roi = roi.astype('float32') / 255.0\n        roi = img_to_array(roi)\n        roi = np.expand_dims(roi, axis=0)\n        predictions = model.predict(roi)[0]\n        return predictions\n    ```", "```\n    images = []\n    ages = []\n    genders = []\n    ```", "```\n    folds_pattern = os.path.sep.join([folds_path, '*.txt'])\n    for fold_path in glob(folds_pattern):\n        with open(fold_path, 'r') as f:\n            reader = csv.DictReader(f, delimiter='\\t')\n    ```", "```\n            for line in reader:\n                if ((line['age'][0] != '(') or\n                        (line['gender'] not in {'m', 'f'})):\n                    Continue\n    ```", "```\n                age_label = age_to_bin(line['age'])\n                if age_label is None:\n                    continue\n    ```", "```\n                aligned_face_file = \n                               (f'landmark_aligned_face.'\n                                     f'{line[\"face_id\"]}.'\n                              f'{line[\"original_image\"]}')\n                image_path = os.path.sep.join(\n                                 [str(base_path),\n                                 line[\"user_id\"],\n                               aligned_face_file])\n                image = load_img(image_path, \n                                 target_size=(64, 64))\n                image = img_to_array(image)\n    ```", "```\n                images.append(image)\n                ages.append(age_label)\n                genders.append(line['gender'])\n    ```", "```\n    age_images = np.array(images).astype('float32') / 255.0\n    gender_images = np.copy(images)\n    ```", "```\n    gender_enc = LabelEncoder()\n    age_enc = LabelEncoder()\n    gender_labels = gender_enc.fit_transform(genders)\n    age_labels = age_enc.fit_transform(ages)\n    ```", "```\n    EPOCHS = 100\n    MAX_TRIALS = 10\n    ```", "```\n    if os.path.exists('age_model.h5'):\n        age_model = load_model('age_model.h5')\n    else:\n        age_clf = ImageClassifier(seed=9,\n                                  max_trials=MAX_TRIALS,\n                                  project_name='age_clf',\n                                  overwrite=True)\n        age_clf.fit(age_images, age_labels, epochs=EPOCHS)\n        age_model = age_clf.export_model()\n        age_model.save('age_model.h5')\n    ```", "```\n    if os.path.exists('gender_model.h5'):\n        gender_model = load_model('gender_model.h5')\n    else:\n        gender_clf = ImageClassifier(seed=9,\n\n                                   max_trials=MAX_TRIALS,\n                                project_name='gender_clf',\n                                     overwrite=True)\n        gender_clf.fit(gender_images, gender_labels,\n                       epochs=EPOCHS)\n        gender_model = gender_clf.export_model()\n        gender_model.save('gender_model.h5')\n    ```", "```\n    image = cv2.imread('woman.jpg')\n    ```", "```\n    cascade_file = 'resources/haarcascade_frontalface_default.xml'\n    det = cv2.CascadeClassifier(cascade_file)\n    ```", "```\n    image = imutils.resize(image, width=380)\n    ```", "```\n    copy = image.copy()\n    ```", "```\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    detections = \\\n        det.detectMultiScale(gray,\n                             scaleFactor=1.1,\n                             minNeighbors=5,\n                             minSize=(35, 35),\n                          flags=cv2.CASCADE_SCALE_IMAGE)\n    ```", "```\n    if len(detections) > 0:\n        detections = sorted(detections, key=rectangle_area)\n        best_detection = detections[-1]\n    ```", "```\n        (frame_x, frame_y,\n         frame_width, frame_height) = best_detection\n        roi = image[frame_y:frame_y + frame_height,\n                    frame_x:frame_x + frame_width]\n        age_pred = predict(age_model, roi).argmax()\n        age = age_enc.inverse_transform([age_pred])[0]\n        gender_pred = predict(gender_model, roi).argmax()\n        gender = gender_enc.inverse_transform([gender_pred])[0]\n    ```", "```\n        clone = plot_face(copy,\n                          f'Gender: {gender} - Age: \n                           {age}',\n                          best_detection)\n        cv2.imshow('Result', copy)\n        cv2.waitKey(0)\n    ```"]