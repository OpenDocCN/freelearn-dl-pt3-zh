["```\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('../datasets/sms_spam_perceptron.csv')\ny = df.iloc[:, 0].values\ny = np.where(y == 'spam', -1, 1)\nX = df.iloc[:, [1, 2]].values\n```", "```\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n```", "```\nfrom sklearn.linear_model import Perceptron\np = Perceptron(max_iter=40, eta0=0.1, random_state=0)\np.fit(X_train, y_train)\n```", "```\ny_pred = p.predict(X_test)\n```", "```\nfrom sklearn.metrics import accuracy_score\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))\nMisclassified samples: 3\nAccuracy: 0.90\n```", "```\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('../datasets/sms_spam_svm.csv')\ny = df.iloc[:, 0].values\ny = np.where(y == 'spam', -1, 1)\n```", "```\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n```", "```\nfrom sklearn.svm import SVC\n\nsvm = SVC(kernel='linear', C=1.0, random_state=0)\nsvm.fit(X_train, y_train)\ny_pred = svm.predict(X_test)\n```", "```\nfrom sklearn.metrics import accuracy_score\n\nprint('Misclassified samples: %d' % (y_test != y_pred).sum())\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))\nMisclassified samples: 7\nAccuracy: 0.84\n```", "```\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('../datasets/sms_spam_perceptron.csv')\nX = df.iloc[:, [1, 2]].values\ny = df.iloc[:, 0].values\ny = np.where(y == 'spam', -1, 1)\n\nfrom sklearn.linear_model import LinearRegression\n\nlinear_regression = LinearRegression()\nlinear_regression.fit(X,y)\nprint (linear_regression.score(X,y))\n```", "```\nimport pandas as pd\nimport numpy as np\nfrom sklearn import *\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nphishing_dataset = np.genfromtxt('../datasets/phishing_dataset.csv',\ndelimiter=',', dtype=np.int32)\n\nsamples = phishing_dataset[:,:-1]\n\ntargets = phishing_dataset[:, -1]\n\nfrom sklearn.model_selection import train_test_split\n\ntraining_samples, testing_samples, training_targets, testing_targets = train_test_split(samples, targets, test_size=0.2, random_state=0)\n\nlog_classifier = LogisticRegression()\n\nlog_classifier.fit(training_samples, training_targets)\n\npredictions = log_classifier.predict(testing_samples)\naccuracy = 100.0 * accuracy_score(testing_targets, predictions)\n\nprint (\"Logistic Regression accuracy: \" + str(accuracy))\n\nLogistic Regression accuracy: 91.72320217096338\n\n```", "```\nimport pandas as pd\nimport numpy as np\nfrom sklearn import *\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nphishing_dataset = np.genfromtxt('../datasets/phishing_dataset.csv', delimiter=',', dtype=np.int32)\n\nsamples = phishing_dataset[:,:-1]\ntargets = phishing_dataset[:, -1]\n\nfrom sklearn.model_selection import train_test_split\n\ntraining_samples, testing_samples, training_targets, testing_targets =\ntrain_test_split(samples, targets, test_size=0.2, random_state=0)\n\nfrom sklearn import tree\n\ntree_classifier = tree.DecisionTreeClassifier()\n\ntree_classifier.fit(training_samples, training_targets)\n\npredictions = tree_classifier.predict(testing_samples)\naccuracy = 100.0 * accuracy_score(testing_targets, predictions)\n\nprint (\"Decision Tree accuracy: \" + str(accuracy))\n\nDecision Tree accuracy: 96.33649932157394\n```", "```\nimport matplotlib.pyplot as plt\nimport csv\nfrom textblob import TextBlob\nimport pandas\nimport sklearn\nimport numpy as np\n\nimport nltk\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.model_selection import train_test_split \n\nfrom defs import get_tokens\nfrom defs import get_lemmas\n\nsms = pandas.read_csv('../datasets/sms_spam_no_header.csv', sep=',', names=[\"type\", \"text\"])\n\ntext_train, text_test, type_train, type_test = train_test_split(sms['text'], sms['type'], test_size=0.3)\n\n# bow stands for \"Bag of Words\"\nbow = CountVectorizer(analyzer=get_lemmas).fit(text_train)\n\nsms_bow = bow.transform(text_train)\n\ntfidf = TfidfTransformer().fit(sms_bow)\n\nsms_tfidf = tfidf.transform(sms_bow)\n\nspam_detector = MultinomialNB().fit(sms_tfidf, type_train)\n```", "```\nmsg = sms['text'][25]\nmsg_bow = bow.transform([msg])\nmsg_tfidf = tfidf.transform(msg_bow)\n\nprint ('predicted:', spam_detector.predict(msg_tfidf)[0])\nprint ('expected:', sms.type[25])\n\npredicted: ham\nexpected: ham\n```", "```\npredictions = spam_detector.predict(sms_tfidf)\nprint ('accuracy', accuracy_score(sms['type'][:len(predictions)], predictions))\naccuracy 0.7995385798513202\n```"]