["```\nimport os\nface_api_key = os.environ['face_api_key']\n```", "```\nface_api_url = 'https://eastus.api.cognitive.microsoft.com/face/v1.0/detect'\n\nimage_url= 'https://raw.githubusercontent.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/master/Chapter8/sample_image.jpg'\n```", "```\nimport requests\nparams = {\n'returnFaceId': 'true',\n'returnFaceLandmarks': 'false',\n'returnFaceAttributes': 'age,gender',\n}\n```", "```\n# Define the header param\nheaders = { 'Ocp-Apim-Subscription-Key': face_api_key }\n# Define the body params\nparams = {\n'returnFaceId': 'true',\n'returnFaceLandmarks': 'false',\n'returnFaceAttributes': 'age,gender',\n}\n```", "```\n# Make the call to the API\nresponse = requests.post(face_api_url, params=params, headers=headers, json={\"url\": image_url})\n# Get the response and log\nfaces = response.json()\nprint('There are {} faces im the given image'.format(str(len(faces))))\n```", "```\nThere are 2 faces in the given image\n```", "```\n%matplotlib inline #Only for Jupyter Notebook\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib import patches\nfrom io import BytesIO\n```", "```\nresponse = requests.get(image_url)\n```", "```\nimage = Image.open(BytesIO(response.content))\n```", "```\nplt.figure(figsize=(8,8))\n```", "```\nax = plt.imshow(image, alpha=0.6)\n```", "```\nfor face in faces:\n # Extract the information\n fr = face[\"faceRectangle\"]\n\n fa = face[\"faceAttributes\"]\n origin = (fr[\"left\"], fr[\"top\"])\n p = patches.Rectangle(origin, fr[\"width\"], fr[\"height\"], fill=False, \n linewidth=2, color='b')\n ax.axes.add_patch(p)\n plt.text(origin[0], origin[1], \"%s, %d\"%(fa[\"gender\"].capitalize(), fa[\"age\"]), \n fontsize=20, weight=\"bold\", va=\"bottom\")\n# Turn off the axis\n_ = plt.axis(\"off\") \nplt.show()\n```", "```\nimport requests\nimport os\nfrom pprint import pprint\n```", "```\napi_key = os.environ['text_api_key']\n```", "```\ntext_analytics_base_url = \\\n'https://eastus.api.cognitive.microsoft.com/text/analytics/v2.0'\nlanguage_api_url = text_analytics_base_url + \"/languages\"\nsentiment_api_url = text_analytics_base_url + \"/sentiment\"\nkey_phrase_api_url = text_analytics_base_url + \"/keyPhrases\"\n```", "```\nheaders = {\"Ocp-Apim-Subscription-Key\": api_key}\n```", "```\ndocuments = { 'documents': [\n{ 'id': '1', 'text': 'I want to attend NeurIPS someday and present a paper there.' }\n]}\n```", "```\nresponse = requests.post(language_api_url, headers=headers, json=documents)\nlanguage = response.json()\npprint(language)\n```", "```\nresponse = requests.post(sentiment_api_url, headers=headers, json=documents)\nsentiment = response.json()\npprint(sentiment)\n```", "```\nresponse = requests.post(key_phrase_api_url, headers=headers, json=documents)\nphrases = response.json()\nprint(phrases)\n```", "```\n# For CPU version\npip install cntk\n```", "```\n# For the GPU enabled version\npip install cntk-gpu\n```", "```\npip install <url>\n```", "```\npip install https://cntk.ai/PythonWheel/CPU-Only/cntk-2.6-cp35-cp35m-win_amd64.whl\n```", "```\n!apt-get install --no-install-recommends openmpi-bin libopenmpi-dev libopencv-dev python3-opencv python-opencv && ln -sf /usr/lib/x86_64-linux-gnu/libmpi_cxx.so /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1 && ln -sf /usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so /usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so.12 && ln -sf /usr/lib/x86_64-linux-gnu/libmpi.so /usr/lib/x86_64-linux-gnu/libmpi.so.12 && pip install cntk\n```", "```\nimport cntk as C\n```", "```\nprint(C.__version__)\n```", "```\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport numpy as np\nfrom sklearn.datasets import fetch_openml\nimport random\n\nimport cntk.tests.test_utils\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport cntk as C # if you have not done this before in the project\n```", "```\nnum_samples = 60000\nbatch_size = 64\nlearning_rate = 0.1\n```", "```\nclass Batch_Reader(object):\n    def __init__(self, data , label):\n        self.data = data\n        self.label = label\n        self.num_sample = data.shape[0]\n\n    def next_batch(self, batch_size):\n        index = random.sample(range(self.num_sample), batch_size)\n        return self.data[index,:].astype(float),self.label[index,:].astype(float)\n```", "```\nmnist = fetch_openml('mnist_784')\n```", "```\ntrain_data = mnist.data[:num_samples,:]\ntrain_label = mnist.target[:num_samples]\ntest_data = mnist.data[num_samples:,:]\ntest_label = mnist.target[num_samples:]\n```", "```\nenc = OneHotEncoder()\nenc.fit(train_label[:,None])\ntrain_encoded = enc.transform(train_label[:,None]).toarray()\n```", "```\ntrain_reader = Batch_Reader(train_data, train_encoded)\n```", "```\nenc = OneHotEncoder()\nenc.fit(test_label[:,None])\ntest_encoded = enc.transform(test_label[:,None]).toarray()\n\ntest_reader = Batch_Reader(test_data, test_encoded)\n```", "```\ndimensions = 784\nclasses = 10\nhidden_layers = 3\nhidden_layers_neurons = 400\n```", "```\ninput = C.input_variable(dimensions)\nlabel = C.input_variable(classes)\n```", "```\ndef create_model(features):\n    with C.layers.default_options(init = C.layers.glorot_uniform(), activation = C.ops.relu):\n​\n            hidden_out = features\n​\n            for _ in range(hidden_layers):\n                hidden_out = C.layers.Dense(hidden_layers_neurons)(hidden_out)\n​\n            network_output = C.layers.Dense(classes, activation = None)(hidden_out)\n            return network_output\n```", "```\nmodel = create_model(input/255.0)\n```", "```\nloss = C.cross_entropy_with_softmax(model, label)\nlabel_error = C.classification_error(model, label)\n```", "```\nlrs = C.learning_rate_schedule(learning_rate, C.UnitType.minibatch)\nlearner = C.sgd(model.parameters, lrs)\ntrainer = C.Trainer(model, (loss, label_error), [learner])\n```", "```\nepochs = 10\nnum_iters = (num_samples * epochs) / batch_size\n\nfor i in range(int(num_iters)):\n\n    batch_data, batch_label = train_reader.next_batch(batch_size=batch_size)\n\n    arguments = {input: batch_data, label: batch_label}\n    trainer.train_minibatch(arguments=arguments)\n\n    if i % 1000 == 0:\n        training_loss = False\n        evalaluation_error = False\n        training_loss = trainer.previous_minibatch_loss_average\n        evalaluation_error = trainer.previous_minibatch_evaluation_average\n        print(\"{0}: , Loss: {1:.3f}, Error: {2:.2f}%\".format(i, training_loss, evalaluation_error * 100))\n```", "```\npredicted_label_probs = model.eval({input: test_data})\n```", "```\npredictions = np.argmax(predicted_label_probs, axis=1)\nactual = np.argmax(test_encoded, axis=1)\ncorrect = np.sum(predictions == actual)\nprint(correct / len(actual))\n```", "```\nmodel.save(\"cntk.model\")\n```", "```\nconda install django\n```", "```\npip install django\n```", "```\npython -m django --version\n```", "```\ndjango-admin startproject cntkdemo\n```", "```\npython manage.py startapp api\n```", "```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n path('', views.indexView), # This line handles the '/' route.\n]\n```", "```\nfrom django.contrib import admin\nfrom django.urls import path\nfrom django.urls import include # -- Add this line!\n\nurlpatterns = [\n path('', include('api.urls')), # -- Add this line!\n path('admin/', admin.site.urls),\n]\n```", "```\nfrom django.http import HttpResponse\nfrom django.template import loader\n```", "```\ndef indexView(request):\n template = loader.get_template('api/index.html')\n context = {}\n return HttpResponse(template.render(context, request))\n```", "```\nTEMPLATES = [\n {\n 'BACKEND': 'django.template.backends.django.DjangoTemplates',\n 'DIRS': [os.path.join(BASE_DIR, 'templates')], # -- Add this line!\n 'APP_DIRS': True,\n 'OPTIONS': {\n 'context_processors': [\n```", "```\n{% load static %}\n...\n        <div class=\"jumbotron\">\n            <h3 class=\"jumbotronHeading\">Draw here!</h3>\n            ...\n        </div>\n        <div class=\"jumbotron\">\n            <h3>Prediction Results</h3> \n            <p id=\"result\"></p>\n        </div>\n        <div id=\"csrf\">{% csrf_token %}</div>\n    </div>\n    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>\n    <script src=\"img/{% static \"/index.js\" %}\"></script>\n...\n```", "```\n        <div class=\"jumbotron\">\n            <h3 class=\"jumbotronHeading\">Draw here!</h3>        \n            <div class=\"slidecontainer\">\n                <input type=\"range\" min=\"10\" max=\"50\" value=\"15\" id=\"myRange\">\n                <p>Value: <span id=\"sliderValue\"></span></p>\n            </div>\n            <div class=\"canvasDiv\">\n                <canvas id=\"canvas\" width=\"350\" height=\"350\"></canvas>\n                <p style=\"text-align:center;\">\n                    <button class=\"btn btn-success\" id=\"predict-btn\" role=\"button\">Predict</button>\n                    <button class=\"btn btn-primary\" id=\"clearButton\" role=\"button\">Clear</button>\n                </p>\n            </div>\n        </div>\n```", "```\n<script type=\"text/javascript\">\n    function csrfSafeMethod(method) {\n        return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n    }\n```", "```\n    $(\"#predict-btn\").click(function() {\n\n        var csrftoken = $('input[name=csrfmiddlewaretoken]').val();\n\n        $.ajaxSetup({\n            beforeSend: function(xhr, settings) {\n                if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n                    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n                }\n            }\n        });\n\n        $('#predict-btn').prop('disabled', true);\n\n        var canvasObj = document.getElementById(\"canvas\");\n        var img = canvasObj.toDataURL();\n\n        // MORE CODE TO BE ADDED BELOW THIS LINE\n\n        // MORE CODE TO BE ADDED ABOVE THIS LINE\n    });\n    </script>\n```", "```\n$(\"#predict-btn\").click(function() {\n...\n        // MORE CODE TO BE ADDED BELOW THIS LINE\n        $.ajax({\n            type: \"POST\",\n            url: \"/predict\",\n            data: img,\n            success: function(data) {\n                console.log(data);\n                var tb = \"<table class='table table-hover'><thead><tr><th>Item</th><th>Confidence</th></thead><tbody>\";\n                var res = JSON.parse(data);\n                console.log(res);\n\n                $('#result').empty.append(res.data);\n                $('#predict-btn').prop('disabled', false);\n            }\n        });\n        // MORE CODE TO BE ADDED ABOVE THIS LINE\n...\n});\n    </script>\n```", "```\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n os.path.join(BASE_DIR, \"static\"), # -- Add this line!\n]\n```", "```\nurlpatterns = [\n path('', views.indexView),\n path('predict', views.predictView), # -- Add this line!\n]\n```", "```\nfrom django.http import JsonResponse\n\ndef predictView(request):\n # We will add more code below this line\n\n # We will add more code above this line\n return JsonResponse({\"data\": -1})\n```", "```\nimport os\nfrom django.conf import settings\n```", "```\nimport cntk as C\nfrom cntk.ops.functions import load_model\n```", "```\nfrom PIL import Image\nimport numpy as np\n```", "```\nimport re\nimport base64\nimport random \nimport string\n```", "```\ndef predictView(request):\n # We will add more code below this line\n\n post_data = request.POST.items()\n pd = [p for p in post_data]\n imgData = pd[1][0].replace(\" \", \"+\")\n imgData += \"=\" * ((4 - len(imgData) % 4) % 4)\n```", "```\nfilename = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(32)])\n\nconvertImage(imgData, filename)\n```", "```\ndef convertImage(imgData, filename):\n imgstr = re.search(r'base64,(.*)', str(imgData)).group(1)\n img = base64.b64decode(imgstr)\n with open(filename+'.png', 'wb') as output:\n output.write(img)\n```", "```\nimage = Image.open(filename+'.png').convert('1')\n```", "```\nimage.thumbnail((28,28), Image.ANTIALIAS)\n```", "```\nimage_np = np.array(image.getdata()).astype(int)\nimage_np_expanded = np.expand_dims(image_np, axis = 0)\n```", "```\nmodel = load_model(os.path.join(settings.BASE_DIR, \"data/cntk.model\"))\n```", "```\npredicted_label_probs = model.eval({model.arguments[0]: image_np_expanded})\ndata = np.argmax(predicted_label_probs, axis=1)\n```", "```\n # We will add more code above this line\n return JsonResponse({\"data\": str(data[0])})\n```", "```\npython manage.py runserver\n```"]