["```\nimport numpy as np\nnp_array = np.array( [0, 1, 2, 3] )\n\n# Creating an array with ten elements initialized as zero\nnp_zero_array = np.zeros(10)\n```", "```\naX != Xa\n```", "```\nimport numpy as np\na = np.array([-8, 15])\nX = np.array([[1, 5], \n\n              [3, 4],  \n\n              [2, 3]])\ny = np.dot(X, a)\n```", "```\ny = Xa\n```", "```\nimport numpy as np\ndef predict(data, w):  \n     return data.dot(w)\n\n# w is the vector of weights\nw = np.array([0.1, 0.2, 0.3]) \n\n# matrices as input datasets\ndata1 = np.array([0.3, 1.5, 2.8]) \ndata2 = np.array([0.5, 0.4, 0.9]) \ndata3 = np.array([2.3, 3.1, 0.5])\ndata_in = np.array([data1[0],data2[0],data3[0]]) \nprint('Predicted value: $%.2f' %  predict(data_in, w) )\n```", "```\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# X is a matrix that represents the training dataset\n\n# y is a vector of weights, to be associated with input dataset\n\nX = np.array([[3], [5], [7], [9], [11]]).reshape(-1, 1) \ny = [8.0, 9.1, 10.3, 11.4, 12.6]  \nlreg_model = LinearRegression()  \nlreg_model.fit(X, y) \n\n# New data (unseen before)\nnew_data = np.array([[13]]) \nprint('Model Prediction for new data: $%.2f' \n       %  lreg_model.predict(new_data)[0]  )\n\n```", "```\nModel Prediction for new data: $13.73\n```", "```\nimport numpy as np \nimport matplotlib.pyplot as plt  \nplt.plot(np.arange(15), np.arange(15))\nplt.show() \n```", "```\nimport pandas as pd  \nfrom sklearn import datasets\n\niris = datasets.load_iris()\niris_df = pd.DataFrame(iris.data, columns = iris.feature_names)\niris_df.head()\niris_df.describe()\n```", "```\npip install pefile\n```", "```\nimport os\nimport pefile\nnotepad = pefile.PE(\"notepad.exe\", fast_load=True)\ndbgRVA = notepad.OPTIONAL_HEADER.DATA_DIRECTORY[6].VirtualAddress\nimgver = notepad.OPTIONAL_HEADER.MajorImageVersion\nexpRVA = notepad.OPTIONAL_HEADER.DATA_DIRECTORY[0].VirtualAddress\niat = notepad.OPTIONAL_HEADER.DATA_DIRECTORY[12].VirtualAddress\nsections = notepad.FILE_HEADER.NumberOfSections\ndll = notepad.OPTIONAL_HEADER.DllCharacteristics\nprint(\"Notepad PE info: \\n\")\nprint (\"Debug RVA: \" + dbgRVA)\nprint (\"\\nImage Version: \" + imgver)\nprint (\"\\nExport RVA: \" + expRVA)\nprint (\"\\nImport Address Table: \" + iat)\nprint (\"\\nNumber of Sections: \" + sections)\nprint (\"\\nDynamic linking libraries: \" + dll)\n```", "```\nconda -h\n```", "```\nconda install\n```", "```\nconda create -n py35 python=3.5\n```", "```\nactivate py35\n```", "```\nactivate py35\n```", "```\nconda install -n py35 PACKAGE-NAME\nconda install -n py35 seaborn\n```", "```\nconda list -n py35\n```", "```\nconda update conda\nconda update â€“all\n```", "```\njupyter notebook\n```", "```\njupyter notebook --port 9000\n```", "```\n# Execute plot() inline without calling show()\n%matplotlib inline\nimport numpy as np \nimport matplotlib.pyplot as plt  \nplt.plot(np.arange(15), np.arange(15))\n```", "```\nimport numpy as np \nfrom sklearn.linear_model import LinearRegression\n\n# X is a matrix that represents the training dataset\n# y is a vector of weights, to be associated with input dataset\n\nX = np.array([[3], [5], [7], [9], [11]]).reshape(-1, 1) \ny = [8.0, 9.1, 10.3, 11.4, 12.6]  \nlreg_model = LinearRegression()  \nlreg_model.fit(X, y) \n\n# New data (unseen before)\nnew_data = np.array([[13]]) \nprint('Model Prediction for new data: $%.2f' \n       %  lreg_model.predict(new_data)[0]  ) \n```", "```\nModel Prediction for new data: $13.73\n```", "```\nimport pandas as pd  \nfrom sklearn import datasets\niris = datasets.load_iris()\niris_df = pd.DataFrame(iris.data, columns = iris.feature_names)\niris_df.head()\niris_df.describe()\n```", "```\nconda install -n py35 -c conda-forge tensorflow\n```", "```\nconda install -n py35 -c conda-forge tensorflow=1.0.0\n```", "```\nactivate py35\npython\n>>> import tensorflow as tf\n>>> hello = tf.constant('Hello, TensorFlow!')\n>>> sess = tf.Session()\n>>> print(sess.run(hello))\n```", "```\nconda install -n py35 -c conda-forge keras\n```", "```\nconda install -n py35 -c peterjc123 pytorch\n```"]