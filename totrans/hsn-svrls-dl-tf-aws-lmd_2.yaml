- en: Starting Deployment with AWS Lambda Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will understand more about AWS Lambda and learn how it works.
    We will also discuss the different ways of deploying Lambda and the things we
    need to consider while developing applications for AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to set up an AWS account along with access management. We
    will also create a Hello World function using AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with AWS account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Serverless framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying AWS Lambda functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find all the codes at [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go through the pre-requisites of AWS Lambda as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing libraries, which you have already installed on AWS Lambda. This includes
    system libraries and a number of AWS-specific libraries. You don't have to include
    these libraries within your package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing external libraries, from other developers and companies, or your own
    libraries. You need to include them in your package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing `handler` function which handles processing of the requests to
    the main variables as input event and context. The `event` is trigger-specific
    information and `context` is information about Lambda, which handles requests.
    It contains the ID and parameters of the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Process the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the `result`, this will either be provided back to the trigger in the
    event of a synchronous execution or it'll be saved to the log in the event of
    asynchronous execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to keep in mind that you can't use any context or state other than
    the one which comes from the trigger. Also, if you print something during the
    code's execution, it will be saved to the local stream of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Pros, cons, and limitations of AWS Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are certain pros, cons, and limitations of AWS Lambda, as described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pros**: AWS Lambda is very easy to deploy. We don''t have to know the Docker
    or other container frameworks to manage it. It should only contain libraries and
    code. AWS Lambda easily connects to triggers, which means that we can easily integrate
    it with various other infrastructures and it is very scalable as well, which makes
    it extremely useful for production deployment. It is relatively inexpensive too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cons**: It may be difficult hard to debug in the various Lambdas locally.
    You have to recreate the entire environment and libraries and also be able to
    check your memory consumption during timeout. Making good estimations of how fast
    you will be able to produce high peak loads is quite difficult with AWS Lambda.
    AWS Lambda is stateless and it greatly effects how you organize your application.
    This means that the stage should come from the trigger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limitations**: There are certain limitations with RAM, disk, CPU, and timeout
    which you have to consider during development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram describes the pros, cons, and limitations in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89425dc0-bb93-4dc3-8bd1-46c757a5a414.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a fair idea with the pros, cons, and limitations of AWS Lambda,
    let us have a look at the basics of creating an AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with AWS account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about the AWS free tier and the IAM. We need
    to have an AWS account to learn in depth.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have an AWS account, you can sign up here: [https://aws.amazon.com/account/](https://aws.amazon.com/account/).
  prefs: []
  type: TYPE_NORMAL
- en: The Lambda API Gateway, the simple queue service, and functions are a part of
    the AWS Free Tier, so you won't be charged for a small amount of consumption.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Free Tier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Free Tier allows you to have free usage of AWS services. It covers a number
    of different AWS services like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Lambda**: This covers 1 million invocations, which makes a Lambda perfect
    for hosting your pet project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS API Gateway**: This covers 1 million requests through a paid gateway,
    so it can be extended to work on the project with an AWS REST API functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS SQS**: This includes 1 million simple queue services and requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS step functions**: This includes 4,000 state transitions of step functions,
    which will allow us to create free serverless workflows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity and Access Management (IAM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of accesses that you can create for an AWS user:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS management control access**: This allows you to use AWS web services.
    The user needs to have a login ID and password, which the user will use online.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Programmatic access**: This allows you to use an AWS software development
    key. The user needs two keys: the access key ID and a secret access key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's a create a user with programmatic access. It will allow us to use
    a serverless framework, which will manage the deployment and orchestration of
    AWS Lambdas.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create the user, we will follow the below steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to go to the AWS dashboard and choose the IAM service, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1eb32034-2c27-49b9-98a4-196e6563abd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, go to the Users page and click on Add user, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f58936ce-a375-486a-b042-51e532a668c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, set up the name, `lambda`, and select the Programmatic access checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93b701c3-d6d2-472a-9395-86d9ad4b98e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will need to set permissions for the user to use the AWS services
    discussed earlier. The easiest way to do that is by choosing Attach existing policies
    directly and then choosing the AdministratorAccess policy, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/460ef36a-ee11-4c37-bb77-39d9ebc507cd.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, you need to confirm all the choices:![](img/eb2655cd-7ce4-4565-a02d-797415f9bd38.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It will show us the access key ID and secret access key. You can either copy
    them from the web service or save them through the CSV file. You will need these
    access keys later while setting up the serverless framework, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc5c5246-c8d6-467d-8cec-8808c0c8139b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will create a hello word AWS Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Hello World AWS Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three primary ways to create a Hello World an AWS Lambda from the
    AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: We can create a Lambda from scratch. It is the easiest way to create a simple
    Lambda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use existing blueprint to create a Lambda. AWS has a catalog of usages
    for any base Lambda, and you can use it to start with a Lambda, which is closer
    to the project you want to create.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2018, AWS added serverless application repositories where users can submit
    their Lambda configurations. The repository has hundreds of different Lambda packages
    and it is extremely useful to create a Hello World in AWS Lambda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Lambda function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll discuss the ways of using the Lambda function with the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the inline editor in AWS Service Cloud 9\. It can be very helpful
    in cases where you don't want to install anything locally and want to keep all
    your files in the cloud. The drawback is that it can be pretty challenging to
    automate deployment with the inline editor, as well as handling complex side libraries
    and large projects with multiple files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can upload a ZIP file with libraries and code, either through the web interface
    or through the command line. This is a very straightforward process, which you
    can easily automate. The main drawback of this approach is that the package has
    a 50 MB limitation on size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best and the most popular way to upload the package is through the S3 bucket.
    It doesn't have a 50 MB limitation for the package, although, a 250 MB limit for
    our ZIP libraries and the code will still be in place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to create the Hello World code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in with your `lambda` IAM user. Go to the AWS console and choose the AWS
    Lambda service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d83182ce-03c9-40b4-ba95-c239f5a7335c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create a function**,** as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b693d6a-b0a6-431d-8c12-6fe1323faacc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose Author from scratch**,** as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c62ae4e1-8bd9-49c1-97b5-a7688b81f0a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to add a Name, Runtime, and Role. Then , we need to add a Role name, `helloLambda`.
    For Policy templates, select Simple microservice permissions and click on the Create
    function button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53c8855b-95a6-48df-8b1d-58cfc8b29da5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we get the interface of AWS Lambda. We get the connected triggers,
    code editor, and settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12b77641-6928-43fb-a73e-a47f372db501.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to configure the test event and start your first Lambda function. For
    our first Lambda function, you can just make an empty event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91d23aa8-74a0-467b-9da2-c971c05d50bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Edit the code and save it and you''ll see that a Lambda has been updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c655b3f9-67c8-4ad6-9f3a-0d4019478d77.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will learn about the serverless framework.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the serverless framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sections, we learned about the different ways to deploy the
    Lambda function.  Although the Lambda package is just ZIP files with libraries
    and codes, there are ways to deploy them as mentioned below. A production usage
    deployment needs to have the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, the serverless framework should have a single configuration file
    where we can set all the options and parameters of deployment. This will allow
    us to save time while writing long scripts for starting each service separately
    and it will enable us to keep versions of our environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be able to create and attach other AWS services to add to a Lambda.
    Since most use cases involve a Lambda working as a part of a bigger infrastructure,
    deploying other parts of infrastructure separately can be a huge issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a convenient command-line interface helps a lot because not only would
    it mean that you can deploy everything using a single script but also set up automatic
    deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of the serverless framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A serverless framework has a number of useful features. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It is open source, which means that the serverless community helps to build
    and maintain the framework. This allows the framework to be free and up-to-date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The serverless framework supports different public cloud platforms, such as
    AWS Google call functions and Azure functions. It means that you don't have to
    learn how the UI works for either of the mentioned services. You can use the same
    common UI to deploy functions on another service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The serverless framework has a production-level quality and a number of companies
    use it for deploying the serverless infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a plug-in system, which allows users to create custom plugins for the
    frameworks. It allows serverless to have various functionality; for example, supporting
    step functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of the serverless framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to install the serverless framework, we need to install the following
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: We will need to install Node and NPM ([https://nodejs.org/download/](https://nodejs.org/download/)).
    The serverless framework is written in JavaScript, so it requires Node for execution
    and NPM for handling the packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will need Python ([https://www.python.org/downloads](https://www.python.org/downloads))
    and `pip` ([https://pip.pypa.io/en/stable/installing/](https://pip.pypa.io/en/stable/installing/))
    to run Lambda code locally and we will need it in the various command-line interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will need the AWS command-line interface ([https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)),
    for the serverless framework to connect to your AWS account. Then, we can install
    the serverless framework and everything will be configured.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete installation process of the serverless framework can be found here [https://serverless.com/framework/docs/providers/aws/guide/installation](https://serverless.com/framework/docs/providers/aws/guide/installation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the serverless framework is extremely easy. We just need to run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can check that it works by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will return the version of the installed serverless framework.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying AWS Lambda functions using the serverless framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with what the serverless deployment process looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: We have code and libraries for a Lambda execution. These are the same libraries
    and code that you would see if you uploaded your package directly as a ZIP. In
    that sense, it is very easy to start deploying existing Lambdas through the serverless
    framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a configuration file, which basically contains all the information about
    how a Lambda will be deployed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Lambda configuration file consists of the same parameters, which we have
    discussed in an earlier section (for example, name, runtime, memory, and timeout).
    There are three primary differences.
  prefs: []
  type: TYPE_NORMAL
- en: You are not only setting up triggers but also setting up services, in which
    the triggers depend on. You can set up specific roles and access. Some accesses
    will be automatically set, but some will need to be configured by you. Finally,
    you can set up additional plugins, which you will use during deployment. We will
    look at them in more detail when we deploy the step functions.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers the process of deployment, which will be generated in the
    custom cloud formation file based on our configuration file. Cloud formation is
    an AWS service, which allows us to automatically deploy multiple services. This
    is extremely convenient for handling the deployment process, but its notation
    can be pretty difficult to start with. That is why we are using the server's configuration
    file, which is more readable. Next, the service framework packages libraries and
    code in a single package and uploads which will then run the AWS cloud formation
    service for deployment by using the file generated previously.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the actual deployment of a Lambda, using the serverless
    framework, by looking at the available files.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two files: `index.py` and `serverless.yml`. Let''s look at `index.py`.
    The following code will print the input event and return the `Hello World` message,
    as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet shows the `serverless.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the `serverless.yml` version, there is the name of the function, the available
    resources, and the region. `helloworld` is the name of the service, which we deploy.
    `main` is the name of the function and `index.handler` is the name of the `index.py` file
    and the name of the function inside of their file handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'One service may have different functions and that is why they are separated.
    Before deploying them, we can run a Lambda locally. This is one of the good features
    of the serverless framework, but it may not work with complex libraries because
    of the differences in OS. We can see that we printed an empty log and received
    the `Hello World` message as output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6080dc31-5638-4379-9394-eca81fb8a424.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before deploying Lambda, you need to link your AWS account to serverless using
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`serverless config credentials --provider aws --key "Your access key" --secret
    "Your secret access key"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will deploy a Lambda using the serverless framework. Also, even if you
    have a simple program, it may take some time for the serverless framework to deploy
    the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6003887b-a1e6-46bb-b171-acf88bb82651.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can run the Lambda code and check the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa97a611-bcea-457d-9e08-d4978e1228c9.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it is the same as the one we received earlier. There are two
    great flags, which really helps when working with a Lambda. The first flag helps
    to send custom events inside a Lambda, thereby, emulating triggers from the custom
    service and the log allows you to see the log of the current execution. This flag
    log will allow us to look at the log, and the data flag will allow us to send
    a custom message.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about AWS Lambda functions, along with getting started
    with AWS account. We also learned about creating a Hello World AWS Lambda function,
    along with an introduction to the serverless framework and deployment of AWS Lambda
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start deploying TensorFlow models, where we will
    learn more about TensorFlow models and how to deploy them.
  prefs: []
  type: TYPE_NORMAL
