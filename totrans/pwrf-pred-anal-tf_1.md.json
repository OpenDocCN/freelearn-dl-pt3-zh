["```\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n```", "```\ndf = pd.read_csv('/home/asif/titanic_data.csv')\n```", "```\nfig = plt.figure(figsize=(18,6), dpi=1600)\nalpha=alpha_scatterplot = 0.2\nalpha_bar_chart = 0.55\nfig = plt.figure()\nax = fig.add_subplot(111)\n```", "```\nax1 = plt.subplot2grid((2,3),(0,0))\nax1.set_xlim(-1, 2)            \ndf.Survived.value_counts().plot(kind='bar', alpha=alpha_bar_chart)\nplt.title(\"Survival distribution: 1 = survived\")\n```", "```\nplt.subplot2grid((2,3),(0,1))\nplt.scatter(df.Survived, df.Age, alpha=alpha_scatterplot)\nplt.ylabel(\"Age\")                      \nplt.grid(b=True, which='major', axis='y') \nplt.title(\"Survival by Age: 1 = survived\")\n```", "```\nax3 = plt.subplot2grid((2,3),(0,2))\ndf.Pclass.value_counts().plot(kind=\"barh\", alpha=alpha_bar_chart)\nax3.set_ylim(-1, len(df.Pclass.value_counts()))\nplt.title(\"Class dist. of the passengers\")\n```", "```\nplt.subplot2grid((2,3),(1,0), colspan=2)\ndf.Age[df.Pclass == 1].plot(kind='kde')   \ndf.Age[df.Pclass == 2].plot(kind='kde')\ndf.Age[df.Pclass == 3].plot(kind='kde')\nplt.xlabel(\"Age\")    \nplt.title(\"Age dist. within class\")\nplt.legend(('1st Class', '2nd Class','3rd Class'),loc='best')\n```", "```\nax5 = plt.subplot2grid((2,3),(1,2))\ndf.Embarked.value_counts().plot(kind='bar', alpha=alpha_bar_chart)\nax5.set_xlim(-1, len(df.Embarked.value_counts()))\nplt.title(\"Passengers per boarding location\")\nFinally, we show all the subplots together:\nplt.show()\n>>>\n```", "```\n    $ sudo pip3 install pandas \n    #For Python 2.7, use the following: \n    $ sudo pip install pandas\n\n    ```", "```\n    $ sudo apt-get install python-matplotlib   # for Python 2.7 \n    $ sudo apt-get install python3-matplotlib # for Python 3.x\n\n    ```", "```\n    $ sudo apt-get install libblas-dev liblapack-dev $ sudo apt-get install gfortran $ sudo pip3 install scipy # for Python 3.x\n    $ sudo pip install scipy # for Python 2.7 \n\n    ```", "```\n$ sudo easy_install pip\n$ sudo pip install matplotlib\n$ sudo pip install libblas-dev liblapack-dev\n$ sudo pip install gfortran\n$ sudo pip install scipy\n\n```", "```\nC:\\Users\\admin-karim>cd C:/Python27\nC:\\Python27> python -m pip install <package_name> # provide package name accordingly.\n\n```", "```\nC:\\Users\\admin-karim>cd C:\\Users\\admin-karim\\AppData\\Local\\Programs\\Python\\Python35\\Scripts\nC:\\Users\\admin-karim\\AppData\\Local\\Programs\\Python\\Python35\\Scripts>python3 -m pip install <package_name>\n\n```", "```\nC:\\> pip3 install --upgrade tensorflow\n\n```", "```\nC:\\> pip3 install --upgrade tensorflow-gpu\n\n```", "```\n$ lspci -nnk | grep -i nvidia\n# Expected output (of course may vary for your case): 4b:00.0 VGA compatible controller [0300]: NVIDIA Corporation Device [10de:1b80] (rev a1)4b:00.1 Audio device [0403]: NVIDIA Corporation Device [10de:10f0] (rev a1)\n\n```", "```\n$ sudo apt-get update\n$ sudo apt-get install libglu1-mesa libxi-dev libxmu-dev -y\n$ sudo apt-get — yes install build-essential\n$ sudo apt-get install python-pip python-dev -y\n$ sudo apt-get install python-numpy python-scipy –y\n\n```", "```\n$ wget http://us.download.nvidia.com/XFree86/Linux-x86_64/367.44/NVIDIA-Linux-x86_64-367.44.run\n$ sudo chmod +x NVIDIA-Linux-x86_64-367.35.run\n$ ./NVIDIA-Linux-x86_64-367.35.run --silent\n\n```", "```\n$ nvidia-smi\n\n```", "```\n$ wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run\n$ sudo chmod +x cuda_8.0.61_375.26_linux.run\n$ ./ cuda_8.0.61_375.26_linux.run --driver --silent\n$ ./ cuda_8.0.61_375.26_linux.run --toolkit --silent\n$ ./ cuda_8.0.61_375.26_linux.run --samples –silent\n\n```", "```\n$ echo 'export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64\"' >> ~/.bashrc\n$ echo 'export CUDA_HOME=/usr/local/cuda' >> ~/.bashrc\n$ source ~/.bashrc\n\n```", "```\n$ cd /usr/local\n$sudo mkdir cuda\n$ cd ~/Downloads/\n$ wget http://developer2.download.nvidia.com/compute/machine-learning/cudnn/secure/v6/prod/8.0_20170427/cudnn-8.0-linux-x64-v6.0.tgz \n$ sudo tar –xvzf cudnn-8.0-linux-x64-v6.0.tgz\n$ cp cuda/lib64/* /usr/local/cuda/lib64/\n$ cp cuda/include/cudnn.h /usr/local/cuda/include/\n\n```", "```\n$ sudo apt-get install libcupti-dev\n\n```", "```\n$ pip install tensorflow\n# For Python 3.x and of course with only CPU support:\n$ pip3 install tensorflow \n# For Python 2.7 and of course with GPU support:\n$ pip install tensorflow-gpu\n# For Python 3.x and of course with GPU support: \n$ pip3 install tensorflow-gpu\n\n```", "```\n$ sudo pip install --upgrade TF_PYTHON_URL\n#For Python 3.x, use the following command: \n$ sudo pip3 install --upgrade TF_PYTHON_URL \n\n```", "```\n$ sudo pip3 install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-1.1.0-cp34-cp34m-linux_x86_64.wh\nl\n\n```", "```\n    $ virtualenv --system-site-packages targetDirectory\n\n    ```", "```\n    $ source ~/tensorflow/bin/activate # bash, sh, ksh, or zsh\n     $ source ~/tensorflow/bin/activate.csh  # csh or tcsh\n\n    ```", "```\n      (tensorflow)$\n    ```", "```\n     (tensorflow)$ pip install --upgrade tensorflow \n    #For Python 3.x with CPU support, use the following command: \n    (tensorflow)$ pip3 install --upgrade tensorflow \n    #For Python 2.7 with GPU support, use the following command:\n    (tensorflow)$ pip install --upgrade tensorflow-gpu\n    #For Python 3.x with GPU support, use the following command: \n     (tensorflow)$ pip3 install --upgrade tensorflow-gpu\n\n    ```", "```\n    #For python 2.7 (select appropriate URL with CPU or GPU support):\n    (tensorflow)$ pip install --upgrade TF_PYTHON_URL \n    #For python 3.x (select appropriate URL with CPU or GPU support):\n     (tensorflow)$ pip3 install --upgrade TF_PYTHON_URL\n\n    ```", "```\n    $ source ~/tensorflow/bin/activate  # bash, sh, ksh, or zsh\n    $ source ~/tensorflow/bin/activate.csh  # csh or tcsh\n\n    ```", "```\n    $ rm -r targetDirectory\n\n    ```", "```\n    $ CUDA_VISIBLE_DEVICES=0 python\n\n    ```", "```\n$git clone --recurse-submodules https://github.com/tensorflow/tensorflow\n\n```", "```\n$ sudo apt-get install software-properties-common swig\n$ sudo add-apt-repository ppa:webupd8team/java\n$ sudo apt-get update $ sudo apt-get install oracle-java8-installer\n$ echo \"deb http://storage.googleapis.com/bazel-apt stable jdk1.8\" | sudo tee /etc/apt/sources.list.d/bazel.list\n$ curl https://storage.googleapis.com/bazel-apt/doc/apt-key.pub.gpg | sudo apt-key add -\n$ sudo apt-get update\n$ sudo apt-get install bazel\n\n```", "```\n$ chmod +x bazel-version-installer-os.sh\n$ ./bazel-version-installer-os.sh –-user\n\n```", "```\n$ sudo apt-get install python-numpy swig python-dev\n\n```", "```\n$ ./configure\n\n```", "```\n$ bazel build -c opt //tensorflow/tools/pip_package:\n$ build_pip_package\n\n```", "```\n$ bazel build -c opt --config=cuda //tensorflow/tools/pip_package:build_pip_package\n\n```", "```\n    $ sudo pip install --upgrade /tmp/tensorflow_pkg/tensorflow-1.1.0-*.whl\n\n    ```", "```\n    $ sudo pip3 install --upgrade /tmp/tensorflow_pkg/tensorflow-1.1.0-*.whl\n\n    ```", "```\n>>> import tensorflow as tf\n```", "```\n>>> hello = tf.constant(\"Hello, TensorFlow!\")\n>>> sess=tf.Session()\n```", "```\n>>> print sess.run(hello)\n```", "```\nHello, TensorFlow!\n```", "```\nimport tensorflow as tf\nx = tf.constant(8)\ny = tf.constant(9)\nz = tf.multiply(x, y)\nsess = tf.Session()\nout_z = sess.run(z)\nFinally, close the TensorFlow session when you're done:\nsess.close()print('The multiplicaiton of x and y: %d' % out_z)\n```", "```\n# Import tensorflow\nimport tensorflow as tf\n# Build a graph and create session passing the graph:\nwith tf.Session() as sess:\n x = tf.placeholder(tf.float32, name=\"x\")\n y = tf.placeholder(tf.float32, name=\"y\")\n z = tf.multiply(x,y)\n# Put the values 8,9 on the placeholders x,y and execute the graph\nz_output = sess.run(z,feed_dict={x: 8, y:9})\n# Finally, close the TensorFlow session when you're done:\nsess.close()\nprint(z_output)\n```", "```\nwith tf.Session() as sess:\n```", "```\nx = tf.placeholder(tf.float32, name='x')\ny = tf.placeholder(tf.float32, name='y')\n```", "```\n  z = tf.multiply(x, y)\n```", "```\nz_output = sess.run(z,feed_dict={x: 8, y:9})\n```", "```\nsess.close()\n```", "```\n     print(z_output)\n```", "```\n>>> X = [[2.0, 4.0],\n        [6.0, 8.0]]\n>>> Y = np.array([[2.0, 4.0],\n                 [6.0, 6.0]], dtype=np.float32)\n>>> Z = tf.constant([[2.0, 4.0],\n                    [6.0, 8.0]])\n```", "```\n>>> print(type(X))\n>>> print(type(Y))\n>>> print(type(Z))\n#Output\n<class 'list'>\n<class 'numpy.ndarray'>\n<class 'tensorflow.python.framework.ops.Tensor'>\n```", "```\nt1 = tf.convert_to_tensor(X, dtype=tf.float32)t2 = tf.convert_to_tensor(Z, dtype=tf.float32)t3 = tf.convert_to_tensor(Z, dtype=tf.float32)\n```", "```\n>>> print(type(t1))\n>>> print(type(t2))\n>>> print(type(t3))\n#Output:\n<class 'tensorflow.python.framework.ops.Tensor'>\n<class 'tensorflow.python.framework.ops.Tensor'>\n<class 'tensorflow.python.framework.ops.Tensor'>\n```", "```\nimport tensorflow as tf\nscalar = tf.constant(100)\nvector = tf.constant([1,2,3,4,5])\nmatrix = tf.constant([[1,2,3],[4,5,6]])\ncube_matrix = tf.constant([[[1],[2],[3]],[[4],[5],[6]],[[7],[8],[9]]])\nprint(scalar.get_shape())\nprint(vector.get_shape())\nprint(matrix.get_shape())\nprint(cube_matrix.get_shape())\n```", "```\n>>>\n()\n(5,)\n(2, 3)\n(3, 3, 1)\n>>>\n```", "```\n>>scalar1.get_shape()\nTensorShape([])\n>>vector1.get_shape()\nTensorShape([Dimension(5)])\n>>matrix1.get_shape()\nTensorShape([Dimension(2), Dimension(3)])\n>>cube1.get_shape()\nTensorShape([Dimension(3), Dimension(3), Dimension(1)])\n```", "```\nimport tensorflow as tf\nimport numpy as np\ntensor_1d = np.array([1,2,3,4,5,6,7,8,9,10])\ntensor_1d = tf.constant(tensor_1d)\nwith tf.Session() as sess:\n    print (tensor_1d.get_shape())\n    print sess.run(tensor_1d)\n# Finally, close the TensorFlow session when you're done\nsess.close()\n```", "```\n>>>\n (10,)\n [ 1  2  3  4  5  6  7  8  9 10]\n```", "```\nimport tensorflow as tf\nimport numpy as np\ntensor_2d = np.array([(1,2,3),(4,5,6),(7,8,9)])\ntensor_2d = tf.Variable(tensor_2d)\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print (tensor_2d.get_shape())\n    print sess.run(tensor_2d)\n# Finally, close the TensorFlow session when you're done\nsess.close()\n```", "```\n>>>\n (3, 3)\n [[1 2 3]\n [4 5 6]\n [7 8 9]]\n```", "```\nimport tensorflow as tf\nimport numpy as np\n\ninteractive_session = tf.InteractiveSession()\ntensor = np.array([1,2,3,4,5])\ntensor = tf.constant(tensor)\nprint(tensor.eval())\n\ninteractive_session.close()\n```", "```\n>>>\n   [1 2 3 4 5]\n```", "```\nimport tensorflow as tf\nimport numpy as np\ntensor_3d = np.array([[[0, 1, 2], [3, 4, 5], [6, 7, 8]],\n\t\t\t\t\t[[9, 10, 11], [12, 13, 14], [15, 16, 17]],\n\t\t\t\t\t[[18, 19, 20], [21, 22, 23], [24, 25, 26]]])\ntensor_3d = tf.convert_to_tensor(tensor_3d, dtype=tf.float64)\nwith tf.Session() as sess:\n    print(tensor_3d.get_shape())\n    print(sess.run(tensor_3d))\n# Finally, close the TensorFlow session when you're done\nsess.close()\n>>>\n(3, 3, 3)\n[[[  0\\.   1\\.   2.]\n  [  3\\.   4\\.   5.]\n  [  6\\.   7\\.   8.]]\n [[  9\\.  10\\.  11.]\n  [ 12\\.  13\\.  14.]\n  [ 15\\.  16\\.  17.]]\n [[ 18\\.  19\\.  20.]\n  [ 21\\.  22\\.  23.]\n  [ 24\\.  25\\.  26.]]]\n```", "```\nimport tensorflow as tf\n```", "```\nvalue = tf.Variable(0, name=\"value\")\n```", "```\none = tf.constant(1)\nnew_value = tf.add(value, one)\nupdate_value = tf.assign(value, new_value)\ninitialize_var = tf.global_variables_initializer()\n```", "```\nwith tf.Session() as sess:\n    sess.run(initialize_var)\n    print(sess.run(value))\n    for _ in range(5):\n        sess.run(update_value)\n        print(sess.run(value))\n# Finally, close the TensorFlow session when you're done:\nsess.close()\n```", "```\n>>>\n0\n1\n2\n3\n4\n5\n```", "```\nimport tensorflow as tf\n\nconstant_A = tf.constant([100.0])\nconstant_B = tf.constant([300.0])\nconstant_C = tf.constant([3.0])\n\nsum_ = tf.add(constant_A,constant_B)\nmul_ = tf.multiply(constant_A,constant_C)\n\nwith tf.Session() as sess:\n    result = sess.run([sum_,mul_])\n    print(result)\n\n# Finally, close the TensorFlow session when you're done:\nsess.close()\n```", "```\n>>>\n[array(400.],dtype=float32),array([ 300.],dtype=float32)]\n```", "```\nimport tensorflow as tf\nimport numpy as np\n\na = 3\nb = 2\nx = tf.placeholder(tf.float32,shape=(a,b))\ny = tf.add(x,x)\n\ndata = np.random.rand(a,b)\nsess = tf.Session()\nprint sess.run(y,feed_dict={x:data})\n\n# Finally, close the TensorFlow session when you're done:\nsess.close()\n```", "```\n>>>\n[[ 1.78602004  1.64606333]\n [ 1.03966308  0.99269408]\n [ 0.98822606  1.50157797]]\n>>>\n```", "```\nasif@ubuntu:~$ which tensorboard\n/usr/local/bin/tensorboard\n\n```", "```\ntensorboard --logdir .\n\n```", "```\n$ tensorboard –logdir=<trace_file_name>\n\n```", "```\n# Import libraries (Numpy, matplotlib)\nimport numpy as np\nimport matplotlib.pyplot as plot\n\n# Create 1000 points following a function y=0.1 * x + 0.4 (i.e. y \\= W * x + b) with some normal random distribution:\n\nnum_points = 1000\nvectors_set = []\nfor i in range(num_points):\n    W = 0.1 # W\n    b = 0.4 # b\n    x1 = np.random.normal(0.0, 1.0)\n    nd = np.random.normal(0.0, 0.05)\n    y1 = W * x1 + b\n\n # Add some impurity with some normal distribution -i.e. nd:\n    y1 = y1+nd\n\n # Append them and create a combined vector set:\n    vectors_set.append([x1, y1])\n\n# Separate the data point across axises:\nx_data = [v[0] for v in vectors_set]\ny_data = [v[1] for v in vectors_set]\n\n# Plot and show the data points in a 2D space\nplt.plot(x_data, y_data, 'r*', label='Original data')\nplt.legend()\nplt.show()\n```", "```\nimport tensorflow as tf\nW = tf.Variable(tf.random_uniform([1], -1.0, 1.0))\nb = tf.Variable(tf.zeros([1]))\ny = W * x_data + b\n```", "```\nloss = tf.reduce_mean(tf.square(y - y_data))\n```", "```\noptimizer = tf.train.GradientDescentOptimizer(0.6)\ntrain = optimizer.minimize(loss)\n```", "```\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init)\n```", "```\nfor i in range(16):\n  sess.run(train)\n  print(i, sess.run(W), sess.run(b), sess.run(loss))\n```", "```\n>>>\n0 [ 0.18418592] [ 0.47198644] 0.0152888\n1 [ 0.08373772] [ 0.38146532] 0.00311204\n2 [ 0.10470386] [ 0.39876288] 0.00262051\n3 [ 0.10031486] [ 0.39547175] 0.00260051\n4 [ 0.10123629] [ 0.39609471] 0.00259969\n5 [ 0.1010423] [ 0.39597753] 0.00259966\n6 [ 0.10108326] [ 0.3959994] 0.00259966\n7 [ 0.10107458] [ 0.39599535] 0.00259966\n```", "```\n>>>\n0 [ 0.23306453] [ 0.47967502] 0.0259004\n1 [ 0.08183448] [ 0.38200468] 0.00311023\n2 [ 0.10253634] [ 0.40177572] 0.00254209\n3 [ 0.09969243] [ 0.39778906] 0.0025257\n4 [ 0.10008509] [ 0.39859086] 0.00252516\n5 [ 0.10003048] [ 0.39842987] 0.00252514\n6 [ 0.10003816] [ 0.39846218] 0.00252514\n7 [ 0.10003706] [ 0.39845571] 0.00252514\n8 [ 0.10003722] [ 0.39845699] 0.00252514\n9 [ 0.10003719] [ 0.39845672] 0.00252514\n10 [ 0.1000372] [ 0.39845678] 0.00252514\n11 [ 0.1000372] [ 0.39845678] 0.00252514\n12 [ 0.1000372] [ 0.39845678] 0.00252514\n13 [ 0.1000372] [ 0.39845678] 0.00252514\n14 [ 0.1000372] [ 0.39845678] 0.00252514\n15 [ 0.1000372] [ 0.39845678] 0.00252514\n```", "```\nwith tf.name_scope(\"LinearRegression\") as scope:\n   W = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name=\"Weights\")\n   b = tf.Variable(tf.zeros([1]))y = W * x_data + b\n```", "```\nwith tf.name_scope(\"LossFunction\") as scope:\n  loss = tf.reduce_mean(tf.square(y - y_data))\n```", "```\nloss_summary = tf.summary.scalar(\"loss\", loss)\nw_ = tf.summary.histogram(\"W\", W)\nb_ = tf.summary.histogram(\"b\", b)\n```", "```\nmerged_op = tf.summary.merge_all()\n```", "```\nwriter_tensorboard = tf.summary.FileWriter('/home/asif/LR/', sess.graph_def)\n```", "```\n$ tensorboard –logdir=<trace_file_name>\n\n```", "```\n$ tensorboard --logdir=/home/asif/LR/\n\n```", "```\n# Import libraries (Numpy, Tensorflow, matplotlib)\nimport numpy as np\nimport matplotlib.pyplot as plot\n\n# Create 1000 points following a function y=0.1 * x + 0.4 (i.e. y = W * x + b) with some normal random distribution:\nnum_points = 1000\nvectors_set = []\nfor i in range(num_points):\n    W = 0.1  # W\n    b = 0.4  # b\n    x1 = np.random.normal(0.0, 1.0)\n    nd = np.random.normal(0.0, 0.05)\n    y1 = W * x1 + b\n\n# Add some impurity with some normal distribution -i.e. nd:y1 = y1 + nd\n\n# Append them and create a combined vector set:\n    vectors_set.append([x1, y1])\n\n# Separate the data point across axises\nx_data = [v[0] for v in vectors_set]\ny_data = [v[1] for v in vectors_set]\n\n# Plot and show the data points in a 2D space\nplot.plot(x_data, y_data, 'ro', label='Original data')\nplot.legend()\nplot.show()\n\nimport tensorflow as tf\n\n#tf.name_scope organize things on the tensorboard graph view\nwith tf.name_scope(\"LinearRegression\") as scope:\n   W = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name=\"Weights\")\n   b = tf.Variable(tf.zeros([1]))\n   y = W * x_data + b\n\n# Define a loss function that takes into account the distance between the prediction and our dataset\nwith tf.name_scope(\"LossFunction\") as scope:\n   loss = tf.reduce_mean(tf.square(y - y_data))\n\noptimizer = tf.train.GradientDescentOptimizer(0.6)\ntrain = optimizer.minimize(loss)\n\n# Annotate loss, weights, and bias (Needed for tensorboard)\nloss_summary = tf.summary.scalar(\"loss\", loss)\nw_ = tf.summary.histogram(\"W\", W)\nb_ = tf.summary.histogram(\"b\", b)\n\n# Merge all the summaries\nmerged_op = tf.summary.merge_all()\n\ninit = tf.global_variables_initializer()\nsess = tf.Session()\nsess.run(init)\n\n# Writer for TensorBoard  (replace with our preferred location\nwriter_tensorboard = tf.summary.FileWriter('/ LR/', sess.graph_def)\n\nfor i in range(16):\n   sess.run(train)\n   print(i, sess.run(W), sess.run(b), sess.run(loss))\n   plot.plot(x_data, y_data, 'ro', label='Original data')\n   plot.plot(x_data, sess.run(W)*x_data + sess.run(b))\n   plot.xlabel('X')\n   plot.xlim(-2, 2)\n   plot.ylim(0.1, 0.6)\n   plot.ylabel('Y')\n   plot.legend()\n   plot.show()\n# Finally, close the TensorFlow session when you're done\nsess.close()\n```", "```\n$ sudo apt-get install python-tk\n# For Python 3.x, use the following\n$ sudo apt-get install python3-tk\n\n```"]