["```\nimport os\nimport random\nfrom typing import Dict\nimport gym\nimport numpy as np\nimport pandas as pd\nfrom gym import spaces\nfrom trading_utils import TradeVisualizer\n```", "```\n    env_config = {\n        \"ticker\": \"TSLA\",\n        \"opening_account_balance\": 1000,\n        # Number of steps (days) of data provided to the \n        # agent in one observation\n        \"observation_horizon_sequence_length\": 30,\n        \"order_size\": 1,  # Number of shares to buy per \n        # buy/sell order\n    }\n    ```", "```\n    class StockTradingEnv(gym.Env):\n        def __init__(self, env_config: Dict = env_config):\n            \"\"\"Stock trading environment for RL agents\n            Args:\n                ticker (str, optional): Ticker symbol for the\n                stock. Defaults to \"MSFT\".\n                env_config (Dict): Env configuration values\n            \"\"\"\n            super(StockTradingEnv, self).__init__()\n            self.ticker = env_config.get(\"ticker\", \"MSFT\")\n            data_dir = os.path.join(os.path.dirname(os.path.\\\n                                 realpath(__file__)), \"data\")\n            self.ticker_file_stream = os.path.join(f\"{\n                            data_dir}\", f\"{self.ticker}.csv\")\n    ```", "```\n            assert os.path.isfile(\n                self.ticker_file_stream\n            ), f\"Historical stock data file stream not found \n             at: data/{self.ticker}.csv\"\n            # Stock market data stream. An offline file \n            # stream is used. Alternatively, a web\n            # API can be used to pull live data.\n            # Data-Frame: Date Open High Low Close Adj-Close \n            # Volume\n            self.ohlcv_df = \\\n                pd.read_csv(self.ticker_file_stream)\n    ```", "```\n            self.opening_account_balance = \\\n                env_config[\"opening_account_balance\"]\n            # Action: 0-> Hold; 1-> Buy; 2 ->Sell;\n            self.action_space = spaces.Discrete(3)\n            self.observation_features = [\n                \"Open\",\n                \"High\",\n                \"Low\",\n                \"Close\",\n                \"Adj Close\",\n                \"Volume\",\n            ]\n            self.horizon = env_config.get(\n                       \"observation_horizon_sequence_length\")\n            self.observation_space = spaces.Box(\n                low=0,\n                high=1,\n                shape=(len(self.observation_features),\n                       self.horizon + 1),\n                dtype=np.float,\n            )\n            self.order_size = env_config.get(\"order_size\")\n    ```", "```\n        def get_observation(self):\n            # Get stock price info data table from input \n            # (file/live) stream\n            observation = (\n                self.ohlcv_df.loc[\n                    self.current_step : self.current_step + \\\n                         self.horizon,\n                    self.observation_features,\n                ]\n                .to_numpy()\n                .T\n            )\n            return observation\n    ```", "```\n        def execute_trade_action(self, action):\n            if action == 0:  # Hold position\n                return\n            order_type = \"buy\" if action == 1 else \"sell\"\n            # Stochastically determine the current stock \n            # price based on Market Open & Close\n            current_price = random.uniform(\n                self.ohlcv_df.loc[self.current_step, \"Open\"],\n                self.ohlcv_df.loc[self.current_step, \n                                  \"Close\"],\n            )\n    ```", "```\n            if order_type == \"buy\":\n                allowable_shares = \\\n                    int(self.cash_balance / current_price)\n                if allowable_shares < self.order_size:\n                    # Not enough cash to execute a buy order\n                    # return\n                # Simulate a BUY order and execute it at\n                # current_price\n                num_shares_bought = self.order_size\n                current_cost = self.cost_basis * \\\n                               self.num_shares_held\n                additional_cost = num_shares_bought * \\\n                                  current_price\n                self.cash_balance -= additional_cost\n                self.cost_basis = (current_cost + \\\n                                   additional_cost) / (\n                    self.num_shares_held + num_shares_bought\n                )\n                self.num_shares_held += num_shares_bought\n                self.trades.append(\n                    {\n                        \"type\": \"buy\",\n                        \"step\": self.current_step,\n                        \"shares\": num_shares_bought,\n                        \"proceeds\": additional_cost,\n                    }\n                )\n    ```", "```\n            elif order_type == \"sell\":\n                # Simulate a SELL order and execute it at \n                # current_price\n                if self.num_shares_held < self.order_size:\n                    # Not enough shares to execute a sell \n                    # order\n                    return\n                num_shares_sold = self.order_size\n                self.cash_balance += num_shares_sold * \\\n                                     current_price\n                self.num_shares_held -= num_shares_sold\n                sale_proceeds = num_shares_sold * current_price\n                self.trades.append(\n                    {\n                        \"type\": \"sell\",\n                        \"step\": self.current_step,\n                        \"shares\": num_shares_sold,\n                        \"proceeds\": sale_proceeds,\n                    }\n                )\n    ```", "```\n            # Update account value\n            self.account_value = self.cash_balance + \\\n                                 self.num_shares_held * \\\n                                 current_price\n    ```", "```\n    if __name__ == \"__main__\":\n        env = StockTradingEnv()\n        obs = env.reset()\n        for _ in range(600):\n            action = env.action_space.sample()\n            next_obs, reward, done, _ = env.step(action)\n            env.render()\n    ```", "```\nimport os\nimport random\nfrom typing import Dict\nimport cv2\nimport gym\nimport numpy as np\nimport pandas as pd\nfrom gym import spaces\nfrom trading_utils import TradeVisualizer\n```", "```\n    env_config = {\n        \"ticker\": \"TSLA\",\n        \"opening_account_balance\": 100000,\n        # Number of steps (days) of data provided to the \n        # agent in one observation\n        \"observation_horizon_sequence_length\": 30,\n        \"order_size\": 1,  # Number of shares to buy per \n         # buy/sell order\n    }\n    ```", "```\n    class StockTradingVisualEnv(gym.Env):\n        def __init__(self, env_config: Dict = env_config):\n            \"\"\"Stock trading environment for RL agents\n\n            Args:\n                ticker (str, optional): Ticker symbol for the \n                stock. Defaults to \"MSFT\".\n                env_config (Dict): Env configuration values\n            \"\"\"\n            super(StockTradingVisualEnv, self).__init__()\n            self.ticker = env_config.get(\"ticker\", \"MSFT\")\n            data_dir = os.path.join(os.path.dirname(os.path.\\\n                                 realpath(__file__)), \"data\")\n            self.ticker_file_stream = os.path.join(\n                         f\"{data_dir}\", f\"{self.ticker}.csv\")\n            assert os.path.isfile(\n                self.ticker_file_stream\n            ), f\"Historical stock data file stream not found\\\n                 at: data/{self.ticker}.csv\"\n            # Stock market data stream. An offline file \n            # stream is used. Alternatively, a web\n            # API can be used to pull live data.\n            # Data-Frame: Date Open High Low Close Adj-Close \n            # Volume\n            self.ohlcv_df = \\\n                pd.read_csv(self.ticker_file_stream)\n    ```", "```\n            self.opening_account_balance = \\\n                env_config[\"opening_account_balance\"]\n\n            self.action_space = spaces.Discrete(3)\n            self.observation_features = [\n                \"Open\",\n                \"High\",\n                \"Low\",\n                \"Close\",\n                \"Adj Close\",\n                \"Volume\",\n            ]\n            self.obs_width, self.obs_height = 128, 128\n            self.horizon = env_config.get(\n                \"observation_horizon_sequence_length\")\n            self.observation_space = spaces.Box(\n                low=0, high=255, shape=(128, 128, 3),\n                dtype=np.uint8,\n            )\n            self.order_size = env_config.get(\"order_size\")\n            self.viz = None  # Visualizer\n    ```", "```\n        def step(self, action):\n            # Execute one step within the trading environment\n            self.execute_trade_action(action)\n            self.current_step += 1\n            reward = self.account_value - \\\n                self.opening_account_balance  # Profit (loss)\n            done = self.account_value <= 0 or \\\n                      self.current_step >= len(\n                self.ohlcv_df.loc[:, \"Open\"].values\n            )\n            obs = self.get_observation()\n            return obs, reward, done, {}\n    ```", "```\n        def reset(self):\n            # Reset the state of the environment to an \n            # initial state\n            self.cash_balance = self.opening_account_balance\n            self.account_value = self.opening_account_balance\n            self.num_shares_held = 0\n            self.cost_basis = 0\n            self.current_step = 0\n            self.trades = []\n            if self.viz is None:\n                self.viz = TradeVisualizer(\n                    self.ticker,\n                    self.ticker_file_stream,\n                    \"TFRL-Cookbook Ch4-StockTradingVisualEnv\",\n                )\n            return self.get_observation()\n    ```", "```\n        def get_observation(self):\n            \"\"\"Return a view of the Ticker price chart as \n               image observation\n            Returns:\n                img_observation (np.ndarray): Image of ticker \n                candle stick plot with volume bars as \n                observation\n            \"\"\"\n            img_observation = \\\n                self.viz.render_image_observation(\n                    self.current_step, self.horizon\n                )\n            img_observation = cv2.resize(\n                img_observation, dsize=(128, 128), \n                interpolation=cv2.INTER_CUBIC\n            )\n            return img_observation\n    ```", "```\n       def execute_trade_action(self, action):\n            if action == 0:  # Hold position\n                return\n            order_type = \"buy\" if action == 1 else \"sell\"\n            # Stochastically determine the current stock \n            # price based on Market Open & Close\n            current_price = random.uniform(\n                self.ohlcv_df.loc[self.current_step, \"Open\"],\n                self.ohlcv_df.loc[self.current_step, \\\n                                  \"Close\"],\n            ) \n    ```", "```\n    if order_type == \"buy\":\n                allowable_shares = \\\n                    int(self.cash_balance / current_price)\n                if allowable_shares < self.order_size:\n                    return\n                num_shares_bought = self.order_size\n                current_cost = self.cost_basis * \\\n                                self.num_shares_held\n                additional_cost = num_shares_bought * \\\n                                   current_price\n                self.cash_balance -= additional_cost\n                self.cost_basis = (current_cost + \\\n                                   additional_cost)/ \\\n                                  (self.num_shares_held +\\\n                                    num_shares_bought)\n                self.num_shares_held += num_shares_bought\n                self.trades.append(\n                    {   \"type\": \"buy\",\n                        \"step\": self.current_step,\n                        \"shares\": num_shares_bought,\n                        \"proceeds\": additional_cost,\n                    }\n            )\n    ```", "```\n    elif order_type == \"sell\":\n                # Simulate a SELL order and execute it at \n                # current_price\n                if self.num_shares_held < self.order_size:\n                    # Not enough shares to execute a sell \n                    # order\n                    return\n                num_shares_sold = self.order_size\n                self.cash_balance += num_shares_sold * \\\n                                     current_price\n                self.num_shares_held -= num_shares_sold\n                sale_proceeds = num_shares_sold * \\\n                                current_price\n                self.trades.append(\n                    {\n                        \"type\": \"sell\",\n                        \"step\": self.current_step,\n                        \"shares\": num_shares_sold,\n                        \"proceeds\": sale_proceeds,\n                    }\n                )\n            if self.num_shares_held == 0:\n                self.cost_basis = 0\n            # Update account value\n            self.account_value = self.cash_balance + \\\n                                 self.num_shares_held * \\\n                                 current_price\n    ```", "```\n    if __name__ == \"__main__\":\n        env = StockTradingVisualEnv()\n        obs = env.reset()\n        for _ in range(600):\n            action = env.action_space.sample()\n            next_obs, reward, done, _ = env.step(action)\n            env.render()\n    ```", "```\nimport os\nimport random\nfrom typing import Dict\nimport cv2\nimport gym\nimport numpy as np\nimport pandas as pd\nfrom gym import spaces\nfrom trading_utils import TradeVisualizer\n```", "```\n        def __init__(self, env_config: Dict = env_config):\n            \"\"\"Stock trading environment for RL agents with \n               continuous action space\n            Args:\n                ticker (str, optional): Ticker symbol for the \n                stock. Defaults to \"MSFT\".\n                env_config (Dict): Env configuration values\n            \"\"\"\n            super(StockTradingVisualContinuousEnv, \n                  self).__init__()\n            self.ticker = env_config.get(\"ticker\", \"MSFT\")\n            data_dir = os.path.join(os.path.dirname(os.path.\\\n                                 realpath(__file__)), \"data\")\n            self.ticker_file_stream = os.path.join(\n                         f\"{data_dir}\", f\"{self.ticker}.csv\")\n            assert os.path.isfile(\n                self.ticker_file_stream\n            ), f\"Historical stock data file stream not found\n                 at: data/{self.ticker}.csv\"\n\n            self.ohlcv_df = \\\n                pd.read_csv(self.ticker_file_stream)\n    ```", "```\n            self.opening_account_balance = \\\n                env_config[\"opening_account_balance\"]\n            # Action: 1-dim value indicating a fraction \n            # amount of shares to Buy (0 to 1) or\n            # sell (-1 to 0). The fraction is taken on the \n            # allowable number of\n            # shares that can be bought or sold based on the \n            # account balance (no margin).\n            self.action_space = spaces.Box(\n                low=np.array([-1]), high=np.array([1]), \n                    dtype=np.float\n            )\n            self.observation_features = [\n                \"Open\",\n                \"High\",\n                \"Low\",\n                \"Close\",\n                \"Adj Close\",\n                \"Volume\",\n            ]\n            self.obs_width, self.obs_height = 128, 128\n            self.horizon = env_config.get(\n                \"observation_horizon_sequence_length\")\n            self.observation_space = spaces.Box(\n                low=0, high=255, shape=(128, 128, 3), \n                dtype=np.uint8,\n            )\n            self.viz = None  # Visualizer\n    ```", "```\n        def get_observation(self):\n            \"\"\"Return a view of the Ticker price chart as \n               image observation\n            Returns:\n                img_observation (np.ndarray): Image of ticker \n                candle stick plot with volume bars as \n                observation\n            \"\"\"\n            img_observation = \\\n                self.viz.render_image_observation(\n                self.current_step, self.horizon\n            )\n            img_observation = cv2.resize(\n                img_observation, dsize=(128, 128), \n                interpolation=cv2.INTER_CUBIC\n            )\n            return img_observation\n    ```", "```\n        def execute_trade_action(self, action):\n            if action == 0:  # Indicates \"Hold\" action\n                # Hold position; No trade to be executed\n                return\n            order_type = \"buy\" if action > 0 else \"sell\"\n            order_fraction_of_allowable_shares = abs(action)\n            # Stochastically determine the current stock \n            # price based on Market Open & Close\n            current_price = random.uniform(\n                self.ohlcv_df.loc[self.current_step, \"Open\"],\n                self.ohlcv_df.loc[self.current_step, \n                                  \"Close\"],\n            )\n    ```", "```\n            if order_type == \"buy\":\n                allowable_shares = \\\n                    int(self.cash_balance / current_price)\n                # Simulate a BUY order and execute it at \n                # current_price\n                num_shares_bought = int(\n                    allowable_shares * \\\n                        order_fraction_of_allowable_shares\n                )\n                current_cost = self.cost_basis * \\\n                               self.num_shares_held\n                additional_cost = num_shares_bought * \\\n                                  current_price\n                self.cash_balance -= additional_cost\n                self.cost_basis = (current_cost + \\\n                                   additional_cost) / (\n                    self.num_shares_held + num_shares_bought\n                )\n                self.num_shares_held += num_shares_bought\n                if num_shares_bought > 0:\n                    self.trades.append(\n                        {\n                            \"type\": \"buy\",\n                            \"step\": self.current_step,\n                            \"shares\": num_shares_bought,\n                            \"proceeds\": additional_cost,\n                        }\n                    )\n    ```", "```\n            elif order_type == \"sell\":\n                # Simulate a SELL order and execute it at\n                # current_price\n                num_shares_sold = int(\n                    self.num_shares_held * \\\n                   order_fraction_of_allowable_shares\n                )\n                self.cash_balance += num_shares_sold * \\\n                                     current_price\n                self.num_shares_held -= num_shares_sold\n                sale_proceeds = num_shares_sold * \\\n                                current_price\n                if num_shares_sold > 0:\n                    self.trades.append(\n                        {\n                            \"type\": \"sell\",\n                            \"step\": self.current_step,\n                            \"shares\": num_shares_sold,\n                            \"proceeds\": sale_proceeds,\n                        }\n                    )\n            if self.num_shares_held == 0:\n                self.cost_basis = 0\n            # Update account value\n            self.account_value = self.cash_balance + \\\n                                 self.num_shares_held * \\\n                                 current_price\n    ```", "```\n        def step(self, action):\n            # Execute one step within the environment\n            self.execute_trade_action(action)\n            self.current_step += 1\n            reward = self.account_value - \\\n                self.opening_account_balance  # Profit (loss)\n            done = self.account_value <= 0 or \\\n                self.current_step >= len(\n                self.ohlcv_df.loc[:, \"Open\"].values\n            )\n            obs = self.get_observation()\n            return obs, reward, done, {}\n    ```", "```\n        def reset(self):\n            # Reset the state of the environment to an \n            # initial state\n            self.cash_balance = self.opening_account_balance\n            self.account_value = self.opening_account_balance\n            self.num_shares_held = 0\n            self.cost_basis = 0\n            self.current_step = 0\n            self.trades = []\n            if self.viz is None:\n                self.viz = TradeVisualizer(\n                    self.ticker,\n                    self.ticker_file_stream,\n                    \"TFRL-Cookbook \\\n                     Ch4-StockTradingVisualContinuousEnv\",\n                )\n            return self.get_observation()\n    ```", "```\n        def render(self, **kwargs):\n            # Render the environment to the screen\n            if self.current_step > self.horizon:\n                self.viz.render(\n                    self.current_step,\n                    self.account_value,\n                    self.trades,\n                    window_size=self.horizon,\n                )\n        def close(self):\n            if self.viz is not None:\n                self.viz.close()\n                self.viz = None\n    ```", "```\n    if __name__ == \"__main__\":\n        env = StockTradingVisualContinuousEnv()\n        obs = env.reset()\n        for _ in range(600):\n            action = env.action_space.sample()\n            next_obs, reward, done, _ = env.step(action)\n            env.render()\n    ```"]