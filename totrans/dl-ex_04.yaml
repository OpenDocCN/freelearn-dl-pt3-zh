- en: Get Up and Running with TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to give an overview of one of the most widely
    used deep learning frameworks. TensorFlow has big community support that is growing
    day by day, which makes it a good option for building your complex deep learning
    applications. From the TensorFlow website:'
  prefs: []
  type: TYPE_NORMAL
- en: <q class="calibre52">"TensorFlow is an open source software library for numerical
    computation using data flow graphs. Nodes in the graph represent mathematical
    operations, while the graph edges represent the multidimensional data arrays (tensors)
    communicated between them. The flexible architecture allows you to deploy computation
    to one or more CPUs or GPUs in a desktop, server, or mobile device with a single
    API. TensorFlow was originally developed by researchers and engineers working
    on the Google Brain Team within Google's Machine Intelligence research organization
    for the purposes of conducting machine learning and deep neural networks research,
    but the system is general enough to be applicable in a wide variety of other domains
    as well."</q>
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are going to  be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TensorFlow environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computational graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow data types, variables, and placeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting output from TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorBoard—visualizing learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'TensorFlow installation comes with two modes: CPU and GPU. We will start off
    the installation tutorial by installing TensorFlow in GPU mode.'
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow GPU installation for Ubuntu 16.04
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GPU mode installation of TensorFlow requires an up-to-date installation
    of the NVIDIA drivers because the GPU version of TensorFlow only supports CUDA
    at the moment. The following section will take you through a step-by-step process
    of installing NVIDIA drivers and CUDA 8.
  prefs: []
  type: TYPE_NORMAL
- en: Installing NVIDIA drivers and CUDA 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First off, you need to install the correct NVIDIA driver based on your GPU.
    I have a GeForce GTX 960M GPU, so I will go ahead and install `nvidia-375` (if
    you have a different GPU, you can use the NVIDIA search tool [http://www.nvidia.com/Download/index.aspx](http://www.nvidia.com/Download/index.aspx)
    to help you find your correct driver version). If you want to know your machine''s
    GPU, you can issue the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b73594fd-a0b9-48d2-a972-db1fc651aa25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to add a proprietary repository of NVIDIA drivers to be able
    to install the drivers using `apt-get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully installing the NVIDIA drivers, restart the machine. To verify
    whether the drivers installed correctly, issue the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d82ab7c0-53ee-4fb3-a5e7-e6a98d33fcc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to install CUDA 8\. Open the following CUDA download link: [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    Select your operating system, architecture, distribution, version, and finally,
    installer type as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e23b031-65b4-4c1c-9df7-a036dd2af7ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The installer file is about 2 GB. You need to issue the following installation
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add the libraries to the `.bashrc` file by issuing the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you need to verify the installation of CUDA 8 by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/430d007d-a24c-4921-b941-b0e96bc1945d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, in this section, we need to install cuDNN 6.0\. The **NVIDIA CUDA
    Deep Neural Network library** (**cuDNN**) is a GPU-accelerated library of primitives
    for deep neural networks. You can download it from NVIDIA''s web page. Issue the
    following commands to extract and install cuDNN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To ensure that your installation has been successful, you can use the `nvidia-smi`
    tool in the terminal. If you had a successful installation, this tool will provide
    you with a monitoring information such as RAM and the running process for your
    GPU.
  prefs: []
  type: TYPE_NORMAL
- en: Installing TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After preparing the GPU environment for TensorFlow, we are now ready to install
    TensorFlow in GPU mode. But for going through the TensorFlow installation process,
    you can first install a few helpful Python packages that will help you in the
    next chapters and make your development environment easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start by installing some data manipulation, analysis, and visualization
    libraries by issuing the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you can install more useful libraries, such as the virtual environment,
    Jupyter Notebook, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can start to install TensorFlow in GPU mode by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify the successful installation of TensorFlow using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ec98d26-4d2a-4c15-840d-1064375bad66.png)'
  prefs: []
  type: TYPE_IMG
- en: TensorFlow CPU installation for Ubuntu 16.04
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to install the CPU version, which doesn''t require
    any drivers prior to installation. So, let''s start off by installing some useful
    packages for data manipulation and visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you can install more useful libraries, such as the virtual environment,
    Jupyter Notebook, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you can install the latest TensorFlow in CPU mode by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check whether TensorFlow was installed successfully be running the
    following TensorFlow statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1741db2-73e4-4a95-8ffe-94aba75c3c4d.png)'
  prefs: []
  type: TYPE_IMG
- en: TensorFlow CPU installation for macOS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to install TensorFlow for macOS X using `virtualenv`.
    So, let''s start off by installing the `pip` tool by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to install the virtual environment library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the virtual environment library, we need to create a container
    or virtual environment which will host the installation of TensorFlow and any
    packages that you might want to install without affecting the underlying host
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This assumes that the `targetDirectory` is `~/tensorflow`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have created the virtual environment, you can access it by issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Once you issue this command, you'll get access to the virtual machine that you
    have just created and you can install any packages that will be only installed
    in this environment and won't affect the underlying or host system that you're
    using.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to exit from the environment, you can issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that, for now, we do want to be inside the virtual environment, so turn
    it back on for now. Once you''re done playing with TensorFlow, you should deactivate
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to install the CPU version of TensorFlow, you can issue the following
    commands, which will also install any dependent libraries that TensorFlow requires:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlow GPU/CPU installation for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will assume that you have Python 3 already installed on your system. To
    install TensorFlow, start a terminal as an administrator as follows. Open up the
    Start menu, search for cmd, and then right-click on it and click Run as an administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da53c90a-8a64-464d-a807-0fa362e3cfd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have a command window opened, you can issue the following command
    to install TensorFlow in GPU mode:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to have `pip` or `pip3` (depending on your Python version) installed
    before issuing the next command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Issue the following command to install TensorFlow in CPU mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The TensorFlow environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow is another deep learning framework from Google and, as the name **TensorFlow** implies,
    it's derived from the operations which neural networks perform on multidimensional
    data arrays or tensors! It's literally a flow of tensors.
  prefs: []
  type: TYPE_NORMAL
- en: But first off, why are we going to use a deep learning framework in this book?
  prefs: []
  type: TYPE_NORMAL
- en: '**It scales machine learning code**: Most of the research into deep learning
    and machine learning can be applied/attributed because of these deep learning
    frameworks. They have allowed data scientists to iterate extremely quickly and
    have made deep learning and other ML algorithms much more accessible to practitioners.
    Big companies such as Google, Facebook, and so on are using such deep learning
    frameworks to scale to billions of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It computes gradients**: Deep learning frameworks can also compute gradients
    automatically. If you go through gradient calculation step by step, you will find
    out that gradient calculation is not trivial and it could be tricky to implement
    a bug-free version of it yourself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It standardizes machine learning applications for sharing**: Also, pretrained
    models are available online, which can be used across different deep learning
    frameworks, and these pretrained models help people who have limited resources
    in terms of GPU so that they don''t have to start from scratch every time. We
    can stand on the shoulders of giants and it take it from there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**There are lots of deep learning frameworks available** with different advantages,
    paradigms, levels of abstraction, programming languages, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface with GPUs for parallel processing**: Using GPUs for computations
    is a fascinating feature, because GPUs speed up your code a lot faster than the
    CPU because of number of cores and parallelization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's why Tensorflow is almost necessary in order to make progress in deep
    learning, because it can facilitate your projects.
  prefs: []
  type: TYPE_NORMAL
- en: So, briefly, what is TensorFlow?
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow is a deep learning framework from Google which is open source for
    numerical computations using data flow graphs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was originally developed by the Google Brain Team to facilitate their machine
    learning research
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow is an interface for expressing machine learning algorithms and an
    implementation for executing such algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does TensorFlow work and what is the underlying paradigm?
  prefs: []
  type: TYPE_NORMAL
- en: Computational graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The biggest idea of all of the big ideas about TensorFlow is that the numeric
    computations are expressed as a computation graph, as shown in the following figure.
    So, the backbone of any TensorFlow program is going to be a computational graph,
    where the following is true:'
  prefs: []
  type: TYPE_NORMAL
- en: Graph nodes are operations which have any number of inputs and outputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph edges between our nodes are going to be tensors that flow between these
    operations, and the best way of thinking about what tensors are in practice is
    as *n*-dimensional arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The advantage of using such flow graphs as the backbone of your deep learning
    framework is that it allows you to build complex models in terms of small and
    simple operations. Also, this is going to make the gradient calculations extremely
    simple when we address that in a later section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e996731b-b5d1-4fd3-9409-937bffdea297.png)'
  prefs: []
  type: TYPE_IMG
- en: Another way of thinking about a TensorFlow graph is that each operation is a
    function that can be evaluated at that point.
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow data types, variables, and placeholders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The understanding of computational graphs will help us to think of complex models
    in terms of small subgraphs and operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example of a neural network with only one hidden layer and
    what its computation graph might look like in TensorFlow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7423ec6-bcff-4926-aa39-1dfaeef0ea5f.png)'
  prefs: []
  type: TYPE_IMG
- en: So, we have some hidden layer that we are trying to compute, as the ReLU activation
    of some parameter matrix *W* time some input *x* plus a bias term *b*. The ReLU
    function takes the max of your output and zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows what the graph might look like in TensorFlow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efac83f1-6997-4383-a90b-64d40eb1aabf.png)'
  prefs: []
  type: TYPE_IMG
- en: In this graph, we have variables for our *b* and *W* and we have something called
    a placeholder for *x*; we also have nodes for each of the operations in our graph.
    So, let's get into more detail about those node types.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Variables are going to be stateful nodes which output their current value.
    In this example, it''s just *b* and *W*. What we mean by saying that variables
    are stateful is that they retain their current value over multiple executions
    and it''s easy to restore saved values to variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40b4497a-5fd5-48c1-8603-d839b777bdfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, variables have other useful features; for example, they can be saved to
    your disk during and after training, which facilities the use that we mentioned
    earlier that it allows people from different companies and groups to save, store,
    and send over their model parameters to other people. Also, the variables are
    the things that you want to tune to minimize the loss and we will see how to do
    that soon.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to know that variables in the graph, such as *b* and *W*, are
    still operations because, by definition, all of your nodes in the graph are operations.
    So, when you evaluate these operations that are holding the values of *b* and
    *W* during runtime, you will get the value of those variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `Variable()` function of TensorFlow to define a variable and
    give it some initial value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This line of code will define a variable of 2 by 2 and initialize it from the
    standard normal distribution. You can also give a name to the variable.
  prefs: []
  type: TYPE_NORMAL
- en: Placeholders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next type of nodes are placeholders. Placeholders are nodes whose values
    are fed at execution time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4580007b-fbef-402c-b9ab-0c549ca2e9be.png)'
  prefs: []
  type: TYPE_IMG
- en: If you have inputs into your computational graph that depend on some external
    data, these are placeholders for values that we are going to add into our computation
    during training. So, for placeholders, we don't provide any initial values. We
    just assign a data type and shape of a tensor so the graph still knows what to
    compute even though it doesn't have any stored values yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the placeholder function of TensorFlow to create a placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: These lines of code define two placeholder variables of a certain shape and
    then define an operation (see the next section) that multiplies these two values
    together.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The third type of nodes are mathematical operations, and these are going to
    be our matrix multiplication (MatMul), addition (Add), and ReLU. All of these
    are nodes in your TensorFlow graph, and it''s very similar to NumPy operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80bde29f-4adb-45e7-bc6c-1ffc47fbebf0.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's see what this graph will look like in code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We perform the following steps to produce the preceding graph:'
  prefs: []
  type: TYPE_NORMAL
- en: Create weights *W* and *b*, including initialization. We can initialize the
    weight matrix *W* by sampling from uniform distribution *W ~ Uniform(-1,1)* and
    initialize *b* to be 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create input placeholder *x*, which is going to have a shape of *m * 784* input
    matrix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a flow graph.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go ahead and follow those steps to build the flow graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/1a80ee6c-f094-4944-b153-0d6cdcb98b7d.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, we have defined our graph and now, we need to actually run it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting output from TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we knew how to build a computational graph, but we
    need to actually run it and get its value.
  prefs: []
  type: TYPE_NORMAL
- en: We can deploy/run the graph with something called a session, which is just a
    binding to a particular execution context such as a CPU or a GPU. So, we are going
    to take the graph that we build and deploy it to a CPU or a GPU context.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the graph, we need to define a session object called `sess`, and we
    are going to call the function `run` which takes two arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fetches` are the list of the graph nodes that return the output of the nodes.
    These are the nodes we are interested in computing the value of.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feeds` are going to be a dictionary mapping from graph nodes to actual values
    that we want to run in our model. So, this is where we actually fill in the placeholders
    that we talked about earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, let''s go ahead and run our graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'After running our graph through the `sess` object, we should get an output
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7faee772-f55c-41db-b38f-9768eb147d71.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use the session variable in a with block to ensure that it will
    be closed after executing the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: TensorBoard – visualizing learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The computations you''ll use TensorFlow for—such as training a massive deep
    neural network—can be complex and confusing, and its corresponding computational
    graph will be complex as well. To make it easier to understand, debug, and optimize
    TensorFlow programs, the TensorFlow team have included a suite of visualization
    tools called TensorBoard, which is a suite of web applications that can run through
    your browser. TensorBoard can be used to visualize your TensorFlow graph, plot
    quantitative metrics about the execution of your graph, and show additional data
    such as images that pass through it. When TensorBoard is fully configured, it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f35cf3a4-a002-4007-94bd-c4be2f595744.png)'
  prefs: []
  type: TYPE_IMG
- en: To understand how TensorBoard works, we are going to build a computational graph
    which will act as a classifier for the MNIST dataset, which is a dataset of handwritten
    images.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to understand all the bits and pieces of this model, but it will
    show you the general pipeline of a machine learning model implemented in TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s start off by importing TensorFlow and loading the the required dataset
    using TensorFlow helper functions; these helper functions will check whether you''re
    already downloaded the dataset, otherwise it will download it for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to define the hyperparameters (parameters that could be used
    to fine-tune the performance of your model) and inputs of our model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to build the model and define a cost function that we are going
    to optimize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We will define the summary variable that will be used to monitor the changes
    that will happen on specific variables such as the loss and how it''s getting
    better through out the training process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll run the model by defining a session variable which will be
    used to execute the computation graph that we have built:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the training process should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the summarized statistics in TensorBoard, we are going to follow the
    message at the end of our output by issuing the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Then, open `http://0.0.0.0:6006/` into your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open TensorBoard, you should get something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f3b4ade-178f-41ca-aae9-76566e5db405.png)'
  prefs: []
  type: TYPE_IMG
- en: This shows the variables that we were monitoring, such as the model accuracy
    and how it's getting higher, and the model loss and how it's getting lower throughout
    the training process. So, you observe that we had a normal learning process here.
    But sometimes you will find out that the accuracy and model loss are changing
    randomly or you want to keep track of some variables and how they are changing
    throughout the session, and TensorBoard will be very useful to help you spot any
    randomness or mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if switched to the GRAPHS tab in TensorBoard, you will get to see the
    computational graph that we built in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e74b2f16-147f-44e7-a169-1bc1f731860b.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the installation process for Ubuntu and Mac, gave
    an overview of the TensorFlow programming model, and explained the different types
    of simple nodes that could be used for building complex operations and how to
    get output from TensorFlow using a session object. Also, we covered TensorBoard
    and why it will helpful for debugging and analyzing complex deep learning applications.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will go through a basic explanation of neural networks and the intuition
    behind having multilayer neural networks. We will also cover some basic examples
    of TensorFlow and demonstrate how it could be used for regression and classification
    problems.
  prefs: []
  type: TYPE_NORMAL
