["```\n    TensorBoard 1.6.0 at <url>;:6006 (Press CTRL+C to quit) \n    ```", "```\nvocabulary_size = 50000\nembedding_df = [] \nindex = []\n# Open the zip file\nwith zipfile.ZipFile('glove.6B.zip') as glovezip:\n    # Read the file with 50 dimensional embeddings\n    with glovezip.open('glove.6B.50d.txt') as glovefile:\n        # Read line by line\n        for li, line in enumerate(glovefile):\n            # Print progress\n            if (li+1)%10000==0: print('.',end='')\n\n            # Get the word and the corresponding vector\n            line_tokens = line.decode('utf-8').split(' ')\n            word = line_tokens[0]\n            vector = [float(v) for v in line_tokens[1:]]\n\n            assert len(vector)==50\n            index.append(word)\n            # Update the embedding matrix\n            embedding_df.append(np.array(vector))\n\n            # If the first 50000 words being read, finish\n            if li >= vocabulary_size-1:\n                break\nembedding_df = pd.DataFrame(embedding_df, index=index) \n```", "```\n# Create a directory to save our model\nlog_dir = 'embeddings'\nos.makedirs(log_dir, exist_ok=True) \n```", "```\n# Save the weights we want to analyse as a variable. \nembeddings = tf.Variable(embedding_df.values)\nprint(f\"weights.shape: {embeddings.shape}\")\n# Create a checkpoint from embedding\ncheckpoint = tf.train.Checkpoint(embedding=embeddings)\ncheckpoint.save(os.path.join(log_dir, \"embedding.ckpt\")) \n```", "```\nwith open(os.path.join(log_dir, 'metadata.tsv'), 'w', encoding='utf-8') as f:\n    for w in embedding_df.index:\n        f.write(w+'\\n') \n```", "```\nconfig = projector.ProjectorConfig() \n```", "```\nconfig = projector.ProjectorConfig()\n# You can add multiple embeddings. Here we add only one.\nembedding_config = config.embeddings.add()\nembedding_config.tensor_name = \"embedding/.ATTRIBUTES/VARIABLE_VALUE\"\n# Link this tensor to its metadata file (e.g. labels).\nembedding_config.metadata_path = 'metadata.tsv'\n# TensorBoard will read this file during startup.\nprojector.visualize_embeddings(log_dir, config) \n```", "```\nprojector.visualize_embeddings(log_dir, config) \n```"]