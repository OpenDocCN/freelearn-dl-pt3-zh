["```\nconst shape = [2, 3]; // 2 rows, 3 columns\nconst a = tf.tensor([4.0, 2.0, 5.0, 15.0, 19.0, 27.0], shape);\n```", "```\na.print()\n```", "```\nOutput: [[4 , 2 , 5 ],\n [15, 19, 27]]\n```", "```\nconst initialValues = tf.ones([5]);\nconst weights = tf.variable(initialValues); // initialize weights\nweights.print(); // output: [1, 1, 1, 1, 1]\nconst updatedValues = tf.tensor1d([0, 1, 0, 1, 0]);\nweights.assign(updatedValues); // update values of weights\nweights.print(); // output: [0, 1, 0, 1, 0]\n```", "```\nconst e = tf.tensor2d([[1.0, 2.0], [3.0, 4.0]]); \nconst f = tf.tensor2d([[3.0, 4.0], [5.0, 6.0]]); \nconst sq_sum = tf.square(tf.add(e, f));\nsq_sum.print();\n```", "```\n// Output: [[16 , 36],\n// [64, 100]]\n```", "```\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 4, inputShape: [4], activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 1, activation: sigmoid}));\n```", "```\nnpm init -y\n```", "```\nnpm install express --save\n```", "```\nvar express = require('express');\nvar app = express(); \n```", "```\nnpm install @tensorflow/tfjs --save\n```", "```\nconst tf = require('@tensorflow/tfjs');\n```", "```\nnpm install body-parser --save\n```", "```\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({ extended: false }));\n```", "```\nconst iris = require('./iris.json');\n```", "```\nconst trainingData = tf.tensor2d(iris.map(item=> [\n    item.sepal_length, item.sepal_width, item.petal_length, item.petal_width\n]),[144,4])\n```", "```\nconst outputData = tf.tensor2d(iris.map(item => [\n    item.species === 'setosa' ? 1 : 0,\n    item.species === 'virginica' ? 1 : 0,\n    item.species === 'versicolor' ? 1 : 0\n]), [144,3])\n```", "```\nconst model = tf.sequential();\n```", "```\nmodel.add(tf.layers.dense({\n    inputShape: 4, \n    activation: 'sigmoid', \n    units: 10\n }));\n```", "```\nmodel.add(tf.layers.dense({\n    inputShape: 10, \n    units: 3, \n    activation: 'softmax'\n}));\n```", "```\nmodel.compile({\n    loss: \"categoricalCrossentropy\",\n    optimizer: tf.train.adam()\n});\n```", "```\nmodel.summary();\n```", "```\nasync function train_data(){\n    console.log(\"Training Started\");\n    for(let i=0;i<50;i++){\n        let res = await model.fit(trainingData, outputData, {epochs: 50});\n        console.log(`Iteration ${i}: ${res.history.loss[0]}`);\n    }\n    console.log(\"Training Complete\");\n}\n```", "```\nvar doTrain = async function (req, res, next) {\n    await train_data();\n    next();\n}\n```", "```\napp.use(doTrain).post('/train', function(req, res) {\n    res.send(\"1\");\n});\n```", "```\napp.post('/predict', function(req, res) {\n    var test = tf.tensor2d([parseFloat(req.body.sepLen), parseFloat(req.body.sepWid),                                 parseFloat(req.body.petLen), parseFloat(req.body.petWid)], [1,4]);\n    var out = model.predict(test);\n    var maxIndex = 0;\n    for (let i=1;i<out.size; i++){\n        if (out.buffer().get(0, i) > out.buffer().get(0, maxIndex)){\n            maxIndex = i;\n        }\n    }\n\n    ans = \"Undetermined\";\n    switch(maxIndex) {\n        case 0:\n            ans = \"Setosa\"; \n        break;\n        case 1:\n            ans = \"Virginica\"; \n        break;\n        case 2:\n            ans = \"Versicolor\"; \n        break; \n    }\n    console.log(ans);\n    res.send(ans);\n});\n```", "```\napp.post('/predict', function(req, res) {\n```", "```\n    var test = tf.tensor2d([parseFloat(req.body.sepLen), parseFloat(req.body.sepWid),                                     parseFloat(req.body.petLen), parseFloat(req.body.petWid)], [1,4]);\n    var output = model.predict(test);\n```", "```\n    var maxIndex = 0;\n    for (let i=1;i<out.size; i++){\n        if (out.buffer().get(0, i) > out.buffer().get(0, maxIndex)){\n            maxIndex = i;\n        }\n    }\n```", "```\napp.listen(3000);\n```", "```\napp.use(express.static('./public')).get('/', function (req, res) {\n    res.sendFile('./index.html');\n});\n```", "```\n<html>\n  <head>\n    <title>TF.js Example - Iris Flower Classficiation</title>\n  </head>\n  <body>\n    <h1> TF.js Example - Iris Flower Classification </h1>\n    <hr>\n    <p>\n      First, train the model. Then, use the text boxes to try any dummy data.\n    </p>\n\n    <button id=\"train-btn\">Train</button>\n\n    <hr><br>\n    <label for=\"sepLen\">Sepal Length: </label>\n    <input type=\"number\" id=\"sepLen\" value=\"1\" /><br>\n    <label for=\"sepWid\">Sepal Width:&nbsp;&nbsp;</label>\n    <input type=\"number\" id=\"sepWid\" value=\"1\" /><br>\n    <label for=\"petLen\">Petal Length: </label>\n    <input type=\"number\" id=\"petLen\" value=\"1\" /><br>\n    <label for=\"petWid\">Petal Width:&nbsp;&nbsp;</label>\n    <input type=\"number\" id=\"petWid\" value=\"1\" /><br>\n    <br>\n    <button id=\"send-btn\" disabled=\"=\"true\">Predict!</button>\n    <hr>\n    <h3> Result </h3>\n    <h4 id=\"res\"></h4>\n\n    <script src=\"img/jquery.min.js\"></script>\n```", "```\n    <script>\n\n      $('#train-btn').click(function(){\n        $('#train-btn').prop('disabled', true);\n        $('#train-btn').empty().append(\"Training...\");\n        $.ajax({\n          type: 'POST',\n          url: \"/train\",\n          success: function(result) {\n            console.log(result);\n            $('#send-btn').prop('disabled', false);\n            $('#train-btn').empty().append(\"Trained!\");\n          }\n        });\n      });\n\n      $('#send-btn').click(function(){\n        var sepLen = $('#sepLen').val();\n        var sepWid = $('#sepWid').val();\n        var petLen = $('#petLen').val();\n        var petWid = $('#petWid').val();\n        $.ajax({\n          type: 'POST',\n          url: \"/predict\",\n          data: {sepLen: sepLen, sepWid: sepWid, petLen: petLen, petWid: petWid},\n          success: function(result) {\n            console.log(result);\n            $('#res').empty().append(result);\n          }\n        });\n      });\n    </script>\n  </body>\n</html>\n```", "```\nnode index.js\n```"]