["```\nlogdir = 'logs/'\nwriter = tf.summary.create_file_writer(logdir)\n```", "```\ntf.summary.trace_on(graph=True, profiler=True)\n```", "```\nwith writer.as_default():\n    tf.summary.trace_export(name=\"my_func_trace\",\\\n                            step=0, profiler_outdir=logdir)\n```", "```\ntensorboard --logdir=./logs\n```", "```\n    import tensorflow as tf\n    tf.random.set_seed(42)\n    ```", "```\n    logdir = 'logs/'\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    @tf.function\n    def my_matmult_func(x, y):\n        result = tf.matmul(x, y)\n        return result\n    ```", "```\n    x = tf.random.uniform((7, 7))\n    y = tf.random.uniform((7, 7))\n    ```", "```\n    tf.summary.trace_on(graph=True, profiler=True)\n    ```", "```\n    z = my_matmult_func(x, y)\n    with writer.as_default():\n        tf.summary.trace_export(name=\"my_func_trace\",\\\n                                step=0,\\\n                                profiler_outdir=logdir)\n    ```", "```\n    tensorboard --logdir=./logs\n    ```", "```\n    tensorboard --logdir=logs\n    ```", "```\nwith file_writer.as_default():\n    tf.summary.image(\"Training data\", training_images, step=0)\n```", "```\nwith file_writer.as_default():\n    tf.summary.scalar('scalar variable', variable, step=0)\n```", "```\nwith file_writer.as_default():\n    tf.summary.audio('audio file', data, sample_rate=44100, \\\n                     step=0)\n```", "```\nwith file_writer.as_default():\n    tf.summary.histogram('histogram', data, step=0)\n```", "```\n    import tensorflow as tf\n    from tensorflow.keras.preprocessing.image import \\\n        ImageDataGenerator\n    ```", "```\n    logdir = 'logs/'\n    writer = tf.summary.create_file_writer(logdir)\n    ```", "```\n    train_datagen = ImageDataGenerator(rescale = 1./255)\n    ```", "```\n    batch_size = 25\n    training_set = train_datagen.flow_from_directory\\\n                   ('image_data',\\ \n                    target_size = (224, 224),\\ \n                    batch_size = batch_size,\\ \n                    class_mode = 'binary') \n    ```", "```\n    with file_writer.as_default():\n        tf.summary.image(\"Training data\", \\\n                         next(training_set)[0], \\\n                         max_outputs=batch_size, \\\n                         step=0)\n    ```", "```\n    tensorboard --logdir=./logs\n    ```", "```\n    tensorboard --logdir=logs\n    ```", "```\nimport tensorflow_hub as hub\n```", "```\nmodule = hub.load(\"https://tfhub.dev/google/imagenet\"\\\n                  \"/inception_resnet_v2/classification/4\")\n```", "```\nmodel = module.signatures['default']\n```", "```\nlayer = hub.KerasLayer(\"https://tfhub.dev/google/imagenet\"\\\n                       \"/inception_resnet_v2/classification/4\")\n```", "```\nfrom tensorflow.python.client import session\nfrom tensorflow.python.summary import summary\nfrom tensorflow.python.framework import ops\nwith session.Session(graph=ops.Graph()) as sess:\n    file_writer = summary.FileWriter(logdir)\n    file_writer.add_graph(model.graph)\n```", "```\n    import tensorflow as tf\n    import tensorflow_hub as hub\n    from tensorflow.python.client import session\n    from tensorflow.python.summary import summary\n    from tensorflow.python.framework import ops\n    ```", "```\n    logdir = 'logs/'\n    ```", "```\n    module = hub.load('https://tfhub.dev/google/imagenet'\\\n                      '/inception_v3/classification/5')\n    ```", "```\n    model = module.signatures['default']\n    ```", "```\n    with session.Session(graph=ops.Graph()) as sess:\n        file_writer = summary.FileWriter(logdir)\n        file_writer.add_graph(model.graph)\n    ```", "```\n    tensorboard --logdir=./logs\n    ```", "```\n    tensorboard --logdir=logs\n    ```", "```\n    import tensorflow as tf\n    print('TF version:', tf.__version__)\n    ```", "```\n    tf.test.gpu_device_name()\n    ```", "```\n    import pandas as pd\n    df = pd.read_csv('https://raw.githubusercontent.com'\\\n                     '/PacktWorkshops/The-TensorFlow-Workshop'\\\n                     '/master/Chapter03/Datasets'\\\n                     '/Bias_correction_ucl.csv')\n    ```", "```\n    df.head()\n    ```", "```\n    df.drop('Date', axis=1, inplace=True)\n    ```", "```\n    import numpy as np\n    df = np.asarray(df).astype(np.float32)\n    random_tensor = tf.random.normal((df.shape[1],1))\n    ```", "```\n    tf.matmul(df, random_tensor)\n    ```"]