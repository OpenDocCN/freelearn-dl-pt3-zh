["```\nmodel = tf.keras.Sequential()\n```", "```\nmodel.add(tf.keras.layers.InputLayer(input_shape=(8,), \\\n                                     name='Input_layer'))\n```", "```\nmodel.add(tf.keras.layers.Dense(units=12, name='Dense_layer_1', \\\n                                activation='sigmoid'))\n```", "```\n    import tensorflow as tf\n    ```", "```\n    model = tf.keras.Sequential()\n    ```", "```\n    model.add(tf.keras.layers.InputLayer(input_shape=(8,), \\\n                                         name='Input_layer'))\n    ```", "```\n    model.add(tf.keras.layers.Dense(4, activation='relu', \\\n                                    name='First_hidden_layer'))\n    model.add(tf.keras.layers.Dense(1, name='Output_layer'))\n    ```", "```\n    model.variables\n    ```", "```\n    data = tf.random.normal((32,8))\n    ```", "```\n    model.predict(data)\n    prediction\n    ```", "```\nmodel.compile(optimizer='adam', loss='binary_crossentropy', \\\n              metrics=['accuracy'])\n```", "```\nmodel.fit(x=features, y=target, epochs=10, batch_size=32, \\\n         validation_split=0.2, shuffle=False)\n```", "```\neval_metrics = model.evaluate(features, target)\n```", "```\n    import tensorflow as tf\n    import pandas as pd\n    ```", "```\n    df = pd.read_csv('Bias_correction_ucl.csv')\n    ```", "```\n    df.drop('Date', inplace=True, axis=1)\n    df.dropna(inplace=True)\n    ```", "```\n    target = df[['Next_Tmax', 'Next_Tmin']]\n    features = df.drop(['Next_Tmax', 'Next_Tmin'], axis=1)\n    ```", "```\n    from sklearn.preprocessing import MinMaxScaler\n    scaler = MinMaxScaler()\n    feature_array = scaler.fit_transform(features)\n    features = pd.DataFrame(feature_array, columns=features.columns)\n    ```", "```\n    model = tf.keras.Sequential()\n    ```", "```\n    model.add(tf.keras.layers.InputLayer\\\n             (input_shape=(features.shape[1],), \\\n                           name='Input_layer'))\n    ```", "```\n    model.add(tf.keras.layers.Dense(2, name='Output_layer'))\n    ```", "```\n    model.compile(tf.optimizers.RMSprop(0.001), loss='mse')\n    ```", "```\n    tensorboard_callback = tf.keras.callbacks\\\n                             .TensorBoard(log_dir=\"./logs\")\n    ```", "```\n    model.fit(x=features.to_numpy(), y=target.to_numpy(),\\\n              epochs=50, callbacks=[tensorboard_callback])\n    ```", "```\n    loss = model.evaluate(features.to_numpy(), target.to_numpy())\n    print('loss:', loss)\n    ```", "```\n    loss: 3.5468221449764012\n    ```", "```\n    tensorboard –-logdir=logs/\n    ```", "```\n    import tensorflow as tf\n    import pandas as pd\n    ```", "```\n    df = pd.read_csv('Bias_correction_ucl.csv')\n    ```", "```\n    df.drop('Date', inplace=True, axis=1)\n    df.dropna(inplace=True)\n    ```", "```\n    target = df[['Next_Tmax', 'Next_Tmin']]\n    features = df.drop(['Next_Tmax', 'Next_Tmin'], axis=1)\n    ```", "```\n    from sklearn.preprocessing import MinMaxScaler\n    scaler = MinMaxScaler()\n    feature_array = scaler.fit_transform(features)\n    features = pd.DataFrame(feature_array, columns=features.columns)\n    ```", "```\n    model = tf.keras.Sequential()\n    ```", "```\n    model.add(tf.keras.layers.InputLayer\\\n                             (input_shape=(features.shape[1],), \\\n                              name='Input_layer'))\n    ```", "```\n    model.add(tf.keras.layers.Dense(16, name='Dense_layer_1'))\n    model.add(tf.keras.layers.Dense(8, name='Dense_layer_2'))\n    model.add(tf.keras.layers.Dense(4, name='Dense_layer_3'))\n    model.add(tf.keras.layers.Dense(2, name='Output_layer'))\n    ```", "```\n    model.compile(tf.optimizers.RMSprop(0.001), loss='mse')\n    ```", "```\n    tensorboard_callback = tf.keras.callbacks\\\n                             .TensorBoard(log_dir=\"./logs\")\n    ```", "```\n    model.fit(x=features.to_numpy(), y=target.to_numpy(),\\\n              epochs=50, callbacks=[tensorboard_callback] , \\\n              validation_split=0.2)\n    ```", "```\n    loss = model.evaluate(features.to_numpy(), target.to_numpy())\n    print('loss:', loss)\n    ```", "```\n    loss: 1.664448248190068\n    ```", "```\n    tensorboard --logdir=logs/\n    ```", "```\n    import tensorflow as tf\n    import pandas as pd\n    ```", "```\n    df = pd.read_csv('qsar_androgen_receptor.csv', \\\n                     sep=';')\n    ```", "```\n    df.dropna(inplace=True)\n    ```", "```\n    target = df['positive'].apply(lambda x: 1 if x=='positive' else 0)\n    features = df.drop('positive', axis=1)\n    ```", "```\n    model = tf.keras.Sequential()\n    ```", "```\n    model.add(tf.keras.layers.InputLayer\\\n             (input_shape=(features.shape[1],), \\\n                           name='Input_layer'))\n    ```", "```\n    model.add(tf.keras.layers.Dense(1, name='Output_layer', \\\n                                    activation='sigmoid'))\n    ```", "```\n    model.compile(tf.optimizers.RMSprop(0.0001), \\\n                  loss='binary_crossentropy', metrics=['accuracy'])\n    ```", "```\n    tensorboard_callback = tf.keras.callbacks.TensorBoard\\\n                           (log_dir=\"./logs\")\n    ```", "```\n    model.fit(x=features.to_numpy(), y=target.to_numpy(), \\\n             epochs=50, callbacks=[tensorboard_callback] , \\\n             validation_split=0.2)\n    ```", "```\n    loss, accuracy = model.evaluate(features.to_numpy(), \\\n                                    target.to_numpy())\n    print(f'loss: {loss}, accuracy: {accuracy}')\n    ```", "```\n    loss: 0.2781583094794838, accuracy: 0.9110320210456848\n    ```", "```\n    tensorboard --logdir=logs/\n    ```"]