["```\nimport sys\nimport os\nimport json\nimport pandas\nimport numpy\nfrom keras.models import Sequential\nfrom keras.layers import LSTM, Dense, Dropout\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import Tokenizer\nfrom collections import OrderedDict\n```", "```\nfile = 'data-full.csv'\n\ndf = pandas.read_csv(file, quotechar='|', header=None)\ndf_count = df.groupby([1]).count()\ntotal_req = df_count[0][0] + df_count[0][1]\nnum_malicious = df_count[0][1]\n\nprint(\"Malicious request logs in dataset: {:0.2f}%\".format(float(num_malicious) / total_req * 100))\n```", "```\ndf_values = df.sample(frac=1).values\n\nX = df_values[:,0]\nY = df_values[:,1]\n```", "```\nfor index, item in enumerate(X):\n    req = json.loads(item, object_pairs_hook=OrderedDict)\n    del req['timestamp']\n    del req['headers']\n    del req['source']\n    del req['route']\n    del req['responsePayload']\n    X[index] = json.dumps(req, separators=(',', ':'))\n```", "```\ntokenizer = Tokenizer(filters='\\t\\n', char_level=True)\ntokenizer.fit_on_texts(X)\n```", "```\nnum_words = len(tokenizer.word_index)+1\nX = tokenizer.texts_to_sequences(X)\n\nmax_log_length = 1024\nsplit = int(len(df_values) * .75)\n\nX_processed = sequence.pad_sequences(X, maxlen=max_log_length)\nX_train, X_test = X_processed[0:split], X_processed[split:len(X_processed)]\nY_train, Y_test = Y[0:split], Y[split:len(Y)]\n```", "```\nclf = Sequential()\nclf.add(Embedding(num_words, 32, input_length=max_log_length))\nclf.add(Dropout(0.5))\nclf.add(LSTM(64, recurrent_dropout=0.5))\nclf.add(Dropout(0.5))\nclf.add(Dense(1, activation='sigmoid'))\n```", "```\nclf.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(clf.summary())\n```", "```\nclf.fit(X_train, Y_train, validation_split=0.25, epochs=3, batch_size=128)\n```", "```\nscore, acc = clf.evaluate(X_test, Y_test, verbose=1, batch_size=128)\nprint(\"Model Accuracy: {:0.2f}%\".format(acc * 100))\n```", "```\nclf.save_weights('weights.h5')\nclf.save('model.h5')\n```", "```\nfrom sklearn.externals import joblib\nfrom flask import Flask, request, jsonify\nfrom string import digits\n\nimport sys\nimport os\nimport json\nimport pandas\nimport numpy\nimport optparse\nfrom keras.models import Sequential, load_model\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import Tokenizer\nfrom collections import OrderedDict\n```", "```\napp = Flask(__name__)\n\nmodel = load_model('lstm-model.h5')\nmodel.load_weights('lstm-weights.h5')\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nmodel._make_predict_function()\n```", "```\ndef remove_digits(s: str) -> str:\n    remove_digits = str.maketrans('', '', digits)\n    res = s.translate(remove_digits)\n    return res\n```", "```\n@app.route('/login', methods=['GET, POST'])\ndef login():\n    req = dict(request.headers)\n    item = {}\n    item[\"method\"] = str(request.method)\n    item[\"query\"] = str(request.query_string)\n    item[\"path\"] = str(request.path)\n    item[\"statusCode\"] = 200\n    item[\"requestPayload\"] = []\n\n    X = numpy.array([json.dumps(item)])\n    log_entry = \"store\"\n\n    tokenizer = Tokenizer(filters='\\t\\n', char_level=True)\n    tokenizer.fit_on_texts(X)\n    seq = tokenizer.texts_to_sequences([log_entry])\n    max_log_length = 1024\n    log_entry_processed = sequence.pad_sequences(seq, maxlen=max_log_length)\n\n    prediction = model.predict(log_entry_processed)\n    print(prediction)\n    response = {'result': float(prediction[0][0])}\n    return jsonify(response)\n```", "```\nif __name__ == '__main__':\n    app.run(port=9000, debug=True)\n```", "```\npython main.py\n```", "```\ndjango-admin startproject webapp\n```", "```\nwebapp/\n    manage.py\n    webapp/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n    db.sqlite3\n\n```", "```\ncd webapp\npython manage.py startapp billboard\n```", "```\n# Application definition\n\nINSTALLED_APPS = [\n    'billboard',  # <---- ADD THIS LINE\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```", "```\nfrom django.contrib import admin\nfrom django.urls import path, include # <--- ADD 'include' module\n\nurlpatterns = [\n    path('', include('billboard.urls')), # <--- ADD billboard.urls path\n    path('admin/', admin.site.urls),\n]\n```", "```\nfrom django.urls import path\nfrom django.contrib.auth.decorators import login_required\n\nfrom . import views\n\nurlpatterns = [\n    path('', login_required(views.board), name='View Board'),\n    path('add', login_required(views.addbill), name='Add Bill'),\n    path('login', views.loginView, name='Login'),\n    path('logout', views.logoutView, name='Logout'),\n]\n```", "```\nLOGIN_URL = \"/login\"\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/logout'\n```", "```\ndef loginView(request):\n    if request.user.is_authenticated:\n        return redirect('/')\n    else:\n        if request.POST:\n            username = request.POST['username']\n            password = request.POST['password']\n            user = authenticate(request, username=username, password=password)\n            ## MORE CODE BELOW THIS LINE\n\n            ## MORE CODE ABOVE THIS LINE\n            else:\n                return redirect('/logout')\n        else:\n            template = loader.get_template('login.html')\n            context = {}\n            return HttpResponse(template.render(context, request))\n```", "```\ndef loginView(request):\n    ...\n            ## MORE CODE BELOW THIS LINE            \n            if user is not None:\n                url = 'http://127.0.0.1:9000/login'\n                values = { 'username': username, 'password': password }\n                data = urllib.parse.urlencode(values).encode()\n                req = urllib.request.Request(url, data=data)\n                response = urllib.request.urlopen(req)\n                result = json.loads(response.read().decode())\n                if result['result'] > 0.20:\n                    login(request, user)\n                    return redirect('/')\n                else:\n                    return redirect('/logout')\n            ## MORE CODE ABOVE THIS LINE\n    ...\n```", "```\nfrom django.shortcuts import redirect\nfrom django.contrib.auth import authenticate, login, logout\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\nfrom django.conf import settings\nfrom django.urls import reverse_lazy\nfrom django.views import generic\n\nfrom django.contrib.auth.models import User\n\nimport urllib\nimport ssl\nimport json\n```", "```\ndef logoutView(request):\n    logout(request)\n    return redirect('/')\n```", "```\nwebapp/\n    manage.py\n    webapp/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n    billboard/\n        templates/\n        ___init_.py\n        admin.py\n        apps.py\n        models.py\n        tests.py\n        urls.py\n        views.py\n```", "```\n{% extends 'base.html' %}\n{% block content %}\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"form_bg\">\n            <form method=\"post\">\n                {% csrf_token %}\n                <h2 class=\"text-center\">Login Page</h2>\n                # WE'LL ADD MORE CODE BELOW THIS LINE\n                ...\n                # WE'LL ADD MORE CODE ABOVE THIS LINE\n            </form>\n        </div>\n    </div>\n</div>\n{% endblock %}\n```", "```\n{% extends 'base.html' %}\n{% block content %}\n<div class=\"container\">\n    <div class=\"row\">\n        {% for bill in bills %}\n        <div class=\"col-sm-4 py-2\">\n            <div class=\"card card-body h-100\">\n                <h2>{{ bill.billName }}</h2>\n                <hr>\n                <p>\n                    {{ bill.billDesc }}\n                </p>\n                <a href=\"#\" class=\"btn btn-outline-secondary\">{{ bill.user.username }}</a>\n            </div>\n        </div>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}\n```", "```\n{% extends 'base.html' %}\n{% block content %}\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"form_bg\">\n            <form method=\"post\" id=\"form\">\n                {% csrf_token %}\n                <h2 class=\"text-center\">Add Bill</h2>\n                <br />\n                <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" id=\"billname\" name=\"billname\" placeholder=\"Bill Name\">\n                </div>\n                <div class=\"form-group\">\n                    <input type=\"text\" class=\"form-control\" id=\"billdesc\" name=\"billdesc\" placeholder=\"Description\">\n                </div>\n                <br />\n                <div class=\"align-center\">\n                    <button type=\"submit\" class=\"btn btn-success\" id=\"save\">Submit</button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n{% endblock %}\n```", "```\nfrom django.utils.timezone import now\nfrom django.contrib.auth.models import User\n\nclass Bills(models.Model):\n    billName = models.CharField(\"Bill Name\", blank=False, max_length=100, default=\"New Bill\")\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    billDesc = models.TextField(\"Bill Description\")\n    billTime = models.DateTimeField(default=now, editable=False)\n\n    class Meta:\n        db_table = \"bills\"\n```", "```\nfrom .models import Bills\n```", "```\ndef board(request):\n    template = loader.get_template('board.html')\n    context = {}\n    context[\"isLogged\"] = 1\n\n    Bill = Bills.objects.all()\n\n    context[\"bills\"] = Bill\n\n    return HttpResponse(template.render(context, request))\n```", "```\ndef addbill(request):\n    if request.POST:\n            billName = request.POST['billname']\n            billDesc = request.POST['billdesc']\n            Bill = Bills.objects.create(billName=billName, user=request.user, billDesc=billDesc)\n            Bill.save()\n            return redirect('/')\n    else:\n        template = loader.get_template('add.html')\n        context = {}\n        context[\"isLogged\"] = 1\n\n        return HttpResponse(template.render(context, request))\n```", "```\n python manage.py createsuperuser\n```", "```\npython manage.py makemigrations\npython manage.py migrate\n```", "```\nGOOGLE_RECAPTCHA_SECRET_KEY = '6Lfi6ncUAAAAANJYkMC66skocDgA1REblmx0-3B2'\n```", "```\n<script src=\"img/api.js?render=6Lfi6ncUAAAAAIaJgQCDaR3s-FGGczzo7Mefp0TQ\"></script>\n<script>\n    grecaptcha.ready(function() {\n        grecaptcha.execute('6Lfi6ncUAAAAAIaJgQCDaR3s-FGGczzo7Mefp0TQ')\n        .then(function(token) {\n            $(\"#form\").append('<input type=\"hidden\" name=\"g-recaptcha-response\" value=\"'+token+'\" >');\n        });\n    });\n</script>\n\n{% endblock %}\n```", "```\ndef addbill(request):\n    if request.POST:\n        recaptcha_response = request.POST.get('g-recaptcha-response')\n        url = 'https://www.google.com/recaptcha/api/siteverify'\n        values = {  'secret': settings.GOOGLE_RECAPTCHA_SECRET_KEY,\n                    'response': recaptcha_response}\n        context = ssl._create_unverified_context()\n        data = urllib.parse.urlencode(values).encode()\n        req = urllib.request.Request(url, data=data)\n        response = urllib.request.urlopen(req, context=context)\n        result = json.loads(response.read().decode())\n        if result['success']:\n            # Do stuff if valid\n    else:\n        # Do actions when no request is made\n```", "```\npython manage.py runserver\n```"]