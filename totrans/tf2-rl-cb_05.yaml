- en: '*Chapter 5*: Reinforcement Learning in the Real World – Building Stock/Share
    Trading Agents'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software-based **deep reinforcement learning** (**deep RL**) agents have tremendous
    potential when it comes to executing trading strategies tirelessly and flawlessly
    without limitations based on memory capacity, speed, efficiency, and emotional
    disturbances that a human trader is prone to facing. Profitable trading in the
    stock market involves carefully executing buy/sell trades with stock symbols/tickers
    while taking into account several market factors such as trading conditions and
    macro and micro market conditions, in addition to social, political, and company-specific
    changes. Deep RL agents have a lot of potential when it comes to solving challenging
    problems in the real world and a lot of opportunities exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, only a few successful stories of using deep RL agents in the real
    world beyond games exist due to the various challenges associated with real-world
    deployments of RL agents. This chapter contains recipes that will help you successfully
    develop RL agents for yet another interesting and rewarding real-world problem:
    stock market trading. The recipes provided contain information on how to implement
    custom OpenAI Gym-compatible learning environments for stock market trading with
    both discrete and continuous value action spaces. In addition, you will learn
    how to build and train RL agents for stock trading learning environments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, the following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a stock market trading RL platform using real stock exchange data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a stock market trading RL platform using price charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an advanced stock trading RL platform to train agents to mimic professional
    traders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code in this book has been extensively tested on Ubuntu 18.04 and Ubuntu
    20.04 and should work with later versions of Ubuntu if Python 3.6+ is available.
    With Python 3.6+ installed, along with the necessary Python packages, as listed
    at the start of each of the recipes, the code should run fine on Windows and Mac
    OS X too. You should create and use a Python virtual environment named `tf2rl-cookbook`
    to install the packages and run the code in this book. Installing Miniconda or
    Anaconda for Python virtual environment management is recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for each recipe in each chapter is available here: [https://github.com/PacktPublishing/Tensorflow-2-Reinforcement-Learning-Cookbook](https://github.com/PacktPublishing/Tensorflow-2-Reinforcement-Learning-Cookbook).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a stock market trading RL platform using real stock exchange data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The stock market provides anyone with a highly lucrative opportunity to participate
    and make profits. While it is easily accessible, not all humans can make consistently
    profitable trades due to the dynamic nature of the market and the emotional aspects
    that can impair people's actions. RL agents take emotion out of the equation and
    can be trained to make profits consistently. This recipe will teach you how to
    implement a stock market trading environment that will teach your RL agents how
    to trade stocks using real stock market data. When you have trained them enough,
    you can deploy them so that they automatically make trades (and profits) for you!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, make sure you have the latest version. You will need
    to activate the `tf2rl-cookbook` Python/conda virtual environment. Make sure you
    update the environment so that it matches the latest conda environment specification
    file (`tfrl-cookbook.yml`), which can be found in this cookbook''s code repository.
    If the following `import` statements run without any issues, you are ready to
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow this step-by-step process to implement `StockTradingEnv`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s initialize the configurable parameters of the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s initialize the `StockTradingEnv` class and load the stock market data
    for the configured stock ticker symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s make sure that the stock market data source exists and then load the
    data stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to define the observation and action space/environment in
    order to complete our initialization function definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will implement a method so that we can gather observations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, to execute a trade order, we need the required logic to be in place.
    Let''s add this now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the initialization done, we can add the logic for buying stock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Likewise, we can now add the logic for selling stock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let''s update the account balance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to fire and check out the new environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The observations are stock price information (OHLCV) over a horizon, as specified
    in `env_config`. The action space is discrete to allow us to perform buy/sell/hold
    trades. This is a starter environment for RL agents to learn to trade stocks in
    the stock market. Happy training!
  prefs: []
  type: TYPE_NORMAL
- en: Building a stock market trading RL platform using price charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Human traders look at several indicators on their price monitor in order to
    vet and identify a potential trade. Can we allow the agents to also visually look
    at the price candlestick charts to trade stocks instead of providing just a tabular/CSV
    representation? Yes, we can! This recipe will teach you how to build a visually
    rich trading environment for your RL agents.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, make sure you have the latest version. You will need
    to activate the `tf2rl-cookbook` Python/conda virtual environment. Make sure that
    you update the environment so that it matches the latest conda environment specification
    file (`tfrl-cookbook.yml`), which can be found in this cookbook''s code repository.
    If the following `import` statements run without any issues, you are ready to
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by configuring the environment. Then, we will guide you through
    the process of completing the implementation. By the end of this recipe, you will
    have built a complete stock trading RL environment that allows an agent to process
    visual stock charts and make trading decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the learning environment, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s implement the initialization step for `StockTradingVisualEnv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s complete the implementation of the `__init__` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step to is the define the `step` method for the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s implement the two missing methods we used in the preceding step. To
    implement the `get_observation` method, we will need the `TradeVisualizer` method
    to be initialized. Due to this, let''s implement the `reset` method first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s continue with our implementation of the `get_observation` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It''s time to implement the logic that will execute the trade actions taken
    by the agent. We''ll split our implementation of the trade execution logic into
    the next three steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s implement the logic to execute `"buy"` orders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s take care of handling `"sell"` orders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With that, our implementation is complete! We are now ready to test the environment
    using a randomly acting agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The observations in `StockTradingVisualEnv` are stock price information (OHLCV)
    over a horizon, as specified in `env_config`. The action space is discrete so
    that we can buy/sell/hold trades. More specifically, the action has the following
    meaning: 0-> Hold; 1-> Buy; 2 ->Sell.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image illustrates the environment in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – A sample screenshot of StockTradingVisualEnv in action ](img/B15074_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – A sample screenshot of StockTradingVisualEnv in action
  prefs: []
  type: TYPE_NORMAL
- en: Building an advanced stock trading RL platform to train agents to mimic professional
    traders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will help you implement a complete stock trading environment with
    high-dimensional image observation spaces and continuous action spaces for training
    your RL and deep RL agents. This will allow you to build intelligent trading bots
    using RL so that you can closely approximate how a professional stock trader would
    trade stocks. Like a professional trader, the RL agent you'll train will watch
    the stock market data in the form of candlesticks and price line charts and make
    trading decisions. A well-trained RL agent could potentially make thousands of
    profitable trades without needing a break or commission, unlike a human professional
    trader, thereby increasing your profits!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, make sure you have the latest version. You will need
    to activate the `tf2rl-cookbook` Python/conda virtual environment. Make sure that
    you update the environment so that it matches the latest conda environment specification
    file (`tfrl-cookbook.yml`), which can be found in this cookbook''s code repository.
    If the following `import` statements run without any issues, you are ready to
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By now, you must be familiar with the basic flow of the implementation from
    having worked through the previous recipes in this chapter. Follow these steps
    to put together a complete stock trading environment from scratch for training
    your advanced RL agents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin our implementation of `StockTradingVisualContinuousEnv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s define the state space, action space, and other essential variables
    to complete the `__init__` function''s implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s implement the `get_observation` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s initialize the trade execution logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to define the behavior of a `"buy"` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, we can define the behavior of the `"sell"` action and update the
    account balance to finalize the method''s implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are now ready to implement the `step` method, which allows the agent to
    step through the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s implement the `reset()` method, which will be executed at the
    start of every episode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s finalize our implementation of the environment by implementing the `render`
    and `close` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, it''s time for you to get one of the agents you built as part of the previous
    chapter to train and test this real data-backed stock market trading environment.
    For now, let''s test the environment with a simple, random agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To simulate a stock market, a real stock market data stream must be used. An
    offline file-based stream is utilized as an alternative to a web-based API, which
    would require internet connectivity and potentially a user account to fetch market
    data. The file stream contains the market data in a standard format: Date, Open,
    High, Low, Close, Adj-Close, and Volume.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The agent observes the stock market data in the form of candlestick price charts,
    as shown in the following image for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Visual observation of StockTradingVisualContinuousEnvironment
    ](img/B15074_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Visual observation of StockTradingVisualContinuousEnvironment
  prefs: []
  type: TYPE_NORMAL
- en: 'The agent''s action and learning progress can be seen in the following image,
    which was generated by the `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Visualization of the live account balance and the trade actions
    taken by the agent in the current time window ](img/B15074_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Visualization of the live account balance and the trade actions
    taken by the agent in the current time window
  prefs: []
  type: TYPE_NORMAL
- en: That concludes this recipe and this chapter. Happy training!
  prefs: []
  type: TYPE_NORMAL
