["```\n$ tf_upgrade_v2 --intree ./project_directory --outtree ./project_directory_updated\n```", "```\nINFO line 1111:10: Renamed 'tf.placeholder' to 'tf.compat.v1.placeholder'\n INFO line 1112:10: Renamed 'tf.layers.dense' to 'tf.compat.v1.layers.dense'\n TensorFlow 2.0 Upgrade Script\n -----------------------------\n Converted 21 files\n Detected 1 issues that require attention\n ----------------------------------------------------------------------\n ----------------------------------------------------------------------\n File: project_directory/test_tf_converter.py\n ----------------------------------------------------------------------\n project_directory/test_tf_converter.py:806:10: WARNING: tf.image.resize_bilinear called with align_corners argument requires manual check: align_corners is not supported by tf.image.resize, the new default transformation is close to what v1 provided. If you require exactly the same transformation as before, use compat.v1.image.resize_bilinear.\n  Make sure to read the detailed log 'report.txt'\n```", "```\nERROR: Using member tf.contrib.copy_graph.copy_op_to_graph in deprecated module tf.contrib. tf.contrib.copy_graph.copy_op_to_graph cannot be converted automatically. tf.contrib will not be distributed with TensorFlow 2.0, please consider an alternative in non-contrib TensorFlow, a community-maintained repository, or fork the required code.\n```", "```\nimport tensorflow as tf1 # TensorFlow 1.13\n\na = tf1.constant([1,2,3])\nb = tf1.constant([1,2,3])\nc = a + b\nprint(c) # Prints <tf.Tensor 'add:0' shape=(3,) dtype=int32\n```", "```\nwith tf1.Session() as sess:\n result = sess.run(c)\nprint(result) # Prints array([2, 4, 6], dtype=int32)\n```", "```\nsess = tf1.Session()\nresult = sess.run(c)\nsess.close()\n```", "```\na = tf1.placeholder(dtype=tf.int32, shape=(None,)) \nb = tf1.placeholder(dtype=tf.int32, shape=(None,))\nc = a + b\n\nwith tf1.Session() as sess:\n  result = sess.run(c, feed_dict={\n      a: [1, 2, 3],\n      b: [1, 1, 1]\n    })\n```", "```\nweights = tf1.get_variable(name='W', initializer=[3])\n```", "```\nVariable W already exists, disallowed. Did you mean to set reuse=True or reuse=tf.AUTO_REUSE in VarScope?\n```", "```\nwith tf1.variable_scope(\"conv1\", reuse=True):\n    weights = tf1.get_variable(name='W', initializer=[3])\n```", "```\nVariable conv1/W does not exist\n```", "```\ndel weights\n```", "```\ncross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=output, logits=y))\ntrain_step = tf.train.AdamOptimizer(1e-3).minimize(cross_entropy)\n\n```", "```\nnum_steps = 10**7\n\nwith tf1.Session() as sess:\n    sess.run(tf1.global_variables_initializer())\n\n    for i in range(num_steps):\n        batch_x, batch_y = next(batch_generator)\n        sess.run(train_step, feed_dict={x: batch_x, y: batch_y})\n```"]