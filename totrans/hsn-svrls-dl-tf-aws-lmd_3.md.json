["```\nimport tensorflow as tf\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n```", "```\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(),\n  tf.keras.layers.Dense(512, activation=tf.nn.relu),\n  tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n```", "```\nmodel.fit(x_train, y_train, epochs=2)\nprint('Evaluation:')\nprint(model.evaluate(x_test, y_test))\n```", "```\nmodel.save('MNISTmodel.h5')\nmodelImported = tf.keras.models.load_model('MNISTmodel.h5')\nprint('Evaluation by imported model:')\nprint(modelImported.evaluate(x_test, y_test))\n```", "```\npython testMNIST.py\n```", "```\nSESSION = tf.InteractiveSession()\nsoftmax_tensor = tf.get_default_graph().get_tensor_by_name('softmax:0')\n\npredictions = SESSION.run(softmax_tensor,{'DecodeJpeg/contents:0': image_data})\n\nnode_loolup.id_to_string(predictions)\n```", "```\nclass NodeLookup(object):\n    \"\"\"Converts integer node ID's to human readable labels.\"\"\"\n```", "```\nimage = 'inputimage.png'\nimage_data = tf.gfile.FastGFile(image, 'rb').read()\n```", "```\nwith tf.gfile.FastGFile('classify_image_graph_def.pb', 'rb') as f:\n  graph_def = tf.GraphDef()\n  graph_def.ParseFromString(f.read())\n  tf.import_graph_def(graph_def, name='')\n```", "```\nSESSION = tf.InteractiveSession()\nsoftmax_tensor = tf.get_default_graph().get_tensor_by_name('softmax:0')\n\npredictions = SESSION.run(softmax_tensor,{'DecodeJpeg/contents:0': image_data})\n```", "```\npredictions = np.squeeze(predictions)\nnode_lookup = NodeLookup(label_lookup_path='imagenet_2012_challenge_label_map_proto.pbtxt',\n  uid_lookup_path='imagenet_synset_to_human_label_map.txt')\n\ntop_k = predictions.argsort()[-5:][::-1]\nstrResult = '%s (score = %.5f)' % (node_lookup.id_to_string(top_k[0]), predictions[top_k[0]])\nprint()\nfor node_id in top_k:\n    human_string = node_lookup.id_to_string(node_id)\n    score = predictions[node_id]\n    print('%s - %s (score = %.5f)' % (node_id, human_string, score))\n```"]