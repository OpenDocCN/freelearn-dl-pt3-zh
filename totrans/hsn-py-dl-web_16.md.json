["```\n\"dependencies\": {\n    \"actions-on-google\": \"^2.2.0\",\n    \"firebase-admin\": \"^5.13.1\",\n    \"firebase-functions\": \"^2.0.2\",\n    \"dialogflow\": \"^0.6.0\",\n    \"dialogflow-fulfillment\": \"^0.5.0\",\n    \"request\": \"*\",\n    \"request-promise-native\": \"*\"\n  }\n```", "```\nfunction checkOrderStatus(){\n    const request = require('request-promise-native');\n    var orderId = agent.parameters.OrderId;\n    var url = \"https://example.com/api/checkOrderStatus/\"+orderId;\n    return request.get(url)\n        .then(jsonBody => {\n            var body = JSON.parse(jsonBody);\n            agent.add(\"Your order is: \" + body.order[0].order_status);\n            return Promise.resolve(agent);\n        })\n        .catch(err => {\n            agent.add('Unable to get result');\n            return Promise.resolve(agent);\n        });\n  }\n```", "```\n  let intentMap = new Map();\n  intentMap.set('Default Welcome Intent', welcome);\n  intentMap.set('Default Fallback Intent', fallback);\n  intentMap.set('CheckOrderStatus', checkOrderStatus);\n  agent.handleRequest(intentMap);\n```", "```\nngrok http 8000\n```", "```\ndjango-admin startproject ordersui\n```", "```\nordersui/\n| -- ordersui/\n|         __init.py__\n|         settings.py\n|         urls.py\n|         wsgi.py\n| -- manage.py\n```", "```\npython manage.py startapp apiui\n```", "```\napiui/ \n| -- __init__.py\n| -- admin.py\n| -- apps.py\n| -- migrations/\n|         __init__.py\n| -- models.py\n| -- tests.py\n| -- views.py\n```", "```\n# Application definition\n\nINSTALLED_APPS = [\n 'apiui',\n 'django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles',\n]\n```", "```\n# Database\n# https://docs.djangoproject.com/en/2.2/ref/settings/#databases\n\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n#     }\n# }\n```", "```\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n path('', include('apiui.urls')),\n]\n```", "```\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n path('', views.indexView, name='indexView'),\n path('<int:orderId>', views.viewOrder, name='viewOrder'),\n]\n```", "```\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\nimport requests\n\ndef indexView(request):\n URL = \"https://example.com/api/\"\n r = requests.get(url=URL)\n data = r.json()\n return render(request, 'index.html', context={'orders': data['orders']})\n```", "```\ndef viewOrder(request, orderId):\n URL = \"https://example.com/api/\" + str(orderId)\n r = requests.get(url=URL)\n data = r.json()\n return render(request, 'view.html', {'order': data['order']})\n```", "```\npython manage.py runserver\n```", "```\n<div id=\"customerChatRoot\" class=\"btn btn-warning\" style=\"position: fixed; bottom: 32px; right: 32px;\">Ask a question</div>\n```", "```\n$(document).ready(function(){\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n            var finalTranscript = '';\n            var recognition = new window.SpeechRecognition();\n            recognition.interimResults = false;\n            recognition.maxAlternatives = 10;\n            recognition.continuous = true;\n            recognition.onresult = (event) => {\n               // define success content here \n            }\n\n            // click handler for button here\n        });\n```", "```\n              let interimTranscript = '';\n              for (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n                let transcript = event.results[i][0].transcript;\n                if (event.results[i].isFinal) {\n                  finalTranscript += transcript;\n                } else {\n                  interimTranscript += transcript;\n                }\n              }\n              goDialogFlow(finalTranscript);\n\n              finalTranscript = '';\n```", "```\nfunction goDialogFlow(text){\n            $.ajax({\n                type: \"POST\",\n                url: \"https://XXXXXXXX.gateway.dialogflow.cloud.ushakov.co\",\n                contentType: \"application/json; charset=utf-8\",\n                dataType: \"json\",\n                data: JSON.stringify({ \n                    \"session\": \"test\",\n                    \"queryInput\": {\n                    \"text\": {\n                        \"text\": text,\n                        \"languageCode\": \"en\"\n                        }\n                    } \n                }),\n                success: function(data) {\n                    var res = data.queryResult.fulfillmentText;\n                    speechSynthesis.speak(new SpeechSynthesisUtterance(res));\n                },\n                error: function() {\n                    console.log(\"Internal Server Error\");\n                }\n            }); \n        }\n```", "```\n$('#customerChatRoot').click(function(){\n recognition.start();\n $(this).text('Speak!');\n});\n```"]