- en: IoT Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of IoT is growing at a dangerously fast pace, and both researchers and
    industries have estimated that, the number of active wirelessly connected devices
    will exceed 20 billion. This exponential growth of IoT devices is increasing the
    risks to our lives and property, as well as to the entire IT industry. To have
    more connected devices means more attack vectors, and more opportunities for hackers
    to exploit. In this context, secure IoT is not only essential for its applications,
    but also for the rest of the IT industry.
  prefs: []
  type: TYPE_NORMAL
- en: In IoT security solutions, networks and devices can be viewed as either signature-based
    or  behavior-based. Behavior-based solutions, such as anomaly detection, are preferable
    in IoT as preparing and maintaining signatures of dynamic and unknown IoT attacks
    is very difficult.  Similarly to human behavior analysis, **deep learning** (**DL**)/**machine
    learning** (**ML**) models can be used in IoT for data exploration, and for learning
    normal and abnormal behavior (security perspective) of IoT devices and networks,
    in various IoT application environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter presents behavioral data analysis of DL-based networks and devices,
    and security incident detection techniques for IoT applications in general. In
    the first part of this chapter, we will briefly describe different IoT security
    attacks and their potential detection techniques, including DL/ML-based methods.
    In addition, we will briefly discuss two IoT use cases where security attacks—such
    as **Denial of Service** (**DoS**) and **Distributed DoS** (**DDoS**) attacks**—**can
    be detected intelligently and automatically through DL-based anomaly detection.
    In the second part of the chapter, we will present hands-on DL-based security
    incident detection implementations. In this chapter, we will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: IoT security attacks and potential detection approaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case one—intelligent host intrusion detection in IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of intelligent host intrusion detection in IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case two—intelligent network intrusion detection in IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of intelligent network intrusion detection in IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DL for IoT security incident detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deep neural networks** (**DNN**), **autoencoder**, and **long short-term
    memory** (**LSTM**) in IoT security incident detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data preprocessing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Models training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluation of the models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security attacks in IoT and detections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to statistics, there will be more than 26 billion connected IoT devices
    worldwide. These devices, which include smart TVs, tablets, smartphones, notebooks,
    wearables, sensors, thermostats, and others, will make our lives more efficient,
    more energy saving, more comfortable, and less costly. However, these can only
    be realized when the security of these applications are maintained as, in many
    cases, these devices are dealing with mission-critical applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reality is that IoT security is currently the number-one challenge faced
    by IoT industries. Without proper security solutions in place, data traversing
    the public internet, especially wirelessly connected devices, is vulnerable to
    hackers. In this context, the entire IoT pipeline or pathway needs to be secure.
    In other words, IoT needs **end-to-end** (**E2E**) security, where data must be
    secured from the time it leaves the end device or appliance, throughout its journey
    to and from the cloud, until it reaches the end user''s mobile app or browser-based
    application. In addition, once it has been processed and a decision has been made
    on this in the user device/app, it has to follow a secure backward path for actuating
    or carrying the control instructions to the device. The following diagram presents
    an E2E (three-layered) view of an IoT solution, and the security requirements
    of the main three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11c6b11a-5415-4d2e-a124-5f320e994b00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram presents a summary of the main attacks in IoT in a three-layered
    perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/824f25d1-8d25-46a3-b1a9-c7592ef04b68.png)'
  prefs: []
  type: TYPE_IMG
- en: Designing and developing IoT security solutions is a very challenging task.
    For example, such devices are generally termed "embedded" devices; these have
    a fixed function designed specifically to perform a specialized task. They are
    resource-constrained, in terms of operating system, processing power, and memory.
    Traditional and PC security solutions are not suitable, as they will not even
    run on most embedded devices. Importantly, there are a large number of devices
    with vulnerabilities to be exploited by attackers. For example, in a smart home,
    we have more IoT/smart devices than our PC/laptops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Very soon, our homes will be equipped with ample connected devices that could
    compete with the number of connections in a mid-sized company. In this context,
    managing updates, passwords, and settings for these connected devices alone, without
    the support of an IT security team or any expensive and enterprise level security
    tools, will be nightmare. Automated approaches based on **artificial intelligence**
    (**AI**)—especially DL/ML—can reactively and/or proactively find the security
    issues and help us to manage them. AI-based solutions can take two different forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network-based solution**: A network-based solution aims to secure IoT devices
    of an IoT application by making a protective shield around the network of the
    application. This approach maintains a whitelist of devices that are allowed to
    access an IoT application network to prevent intruders from getting into the network.
    However, the IoT devices need to access to and be accessed from the outside world,
    such as from the cloud and smartphone applications. A DL/ML engine can monitor
    incoming and outgoing traffic to the IoT devices, and create a profile that defines
    the normal behavior of the IoT application. The DL/ML engine will detect any incoming
    threat by comparing it with established normal behavior. Unlike enterprise networks,
    AI-based threat detection is easier in IoT as, generally, the functionality of
    an IoT device is very limited, and it is not easy to disguise the IoT devices
    in malicious requests. In addition, it is easier to define a finite set of rules
    to determine normal and anomalous behavior for IoT devices. For example, a smart
    bulb communicating with the smart fridge in a smart home is not a normal behavior,
    and it is easy to detect as the bulb is for lighting and does not need to communicate
    with the fridge to produce light.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device-based solutions**: Generally, IoT devices are resource-constrained
    in terms of processing power and storage capacity. Hence, signature-based security
    solutions are not suitable for IoT devices as they require huge databases of threat
    and malware signature storage. Like network-based solutions, DL/ML-supported automated
    behavior-based solutions are better alternatives as they are less resource-hungry.
    In addition, they can run without bogging down small processors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although, many people prefer network-based solutions over device-based ones,
    our recommendation would be to opt for both as they will offer stronger protection
    for your IoT devices as well as for the rest of the world.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection and IoT security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Network- and device-level behavioral anomaly detection is an important means
    of detecting potential security incidents, including DoS or DDoS, or any general
    intrusions. Anomaly detection mechanisms can be divided into many subclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statistical methods**: These methods use past behaviors to approximate a
    model of the correct behavior of a sensor or thing. If the things or networks
    observe a new behavior, it is compared to the model and, if statistically incompatible,
    is marked as an anomaly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probabilistic methods**: These methods center around the definition of a
    probabilistic model (parametric or nonparametric). If any the probability of an
    incident within a device or network falls below a predefined threshold, then it
    is labelled as an anomalous event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proximity-based methods**: These methods are based on the distances between
    normal and anomalous behavior. Clustering methods also fall into this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prediction-based methods**: These methods use past network/device behavioral
    data to train a model that can predict the behavior of any incoming or outgoing
    traffic and identify  anomalies. This is the method we will be using in our two
    use cases. The first is anomaly detection for host level or device level intrusion
    detection, and the second is network level intrusion detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DoS and DDoS intrusion incidents are common in IoT applications. IoT devices
    could be the target for these attacks and/or IoT devices can be exploited by attackers
    to generate flooding traffic to initiate and run DDoS attacks. These attacks can
    be launched in different layers of an IoT protocol stack, including the network,
    transport, and application layers. Generally, the detection of DDoS attacks launched
    at the application layer is very challenging, as the request packets look similar
    to the normal request packets. As a consequence of this attack, we may observe
    explicit behaviors in terms of resource exhaustion, such as network bandwidth,
    CPU processing, and memory. For instance, a swarm of IoT devices hijacked by Mirai
    malware generated about 1 Tbps of DDoS traffic to a French web host in September
    2016^([3]). In this context, it is essential to detect host/IoT device level as
    well as IoT network level intrusions so that IoT applications become available
    for their intended use and/or they do not become the means for making a DDoS attack
    on others. In the following sections, we present one use case on IoT device-level
    intrusion detection, and another on IoT network level intrusion detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use case one: intelligent host intrusion detection in IoT'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very often, resource-constrained IoT devices become the target for DoS or DDoS
    attacks by intruders that can make the IoT application unavailable to the consumers.
    For example, consider an IoT-based remote patient-monitoring system. If the sensor's
    reading of the patient at a critical time, such as during a heart attack, are
    not available to their doctors or hospital, the patient may lose their life. In
    this context, devices or host level intrusion detection is essential for most
    IoT applications. In use case one, we will consider IoT device or host level intrusion
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to select a good feature or set of features to determine anomalies
    in IoT devices and networks (such as DoS and DDoS) using predictive methods, including
    DL. Often, we need time series data for real-time or online anomaly detection,
    and if we can exploit any data source that is already in this form, we do not
    need additional feature engineering. CPU utilization data of IoT devices do not
    need further engineering for host/device level anomaly detection.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of use case one
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are considering an IoT-based, remote patient-monitoring application for
    the implementation of intelligent host-level intrusion detection. Monitoring of
    physiotherapy is a challenging task. An IoT-based therapy can solve the progress-monitoring
    issue. The following diagram briefly presents how the IoT-based remote-patient
    monitoring system and its device-level intrusion detection will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab7c8831-c61e-4176-8a12-d63cc41ff17d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding diagram, an IoT-based remote patient-monitoring system consists
    of three main elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sensors and patient-side computing platform**: A patient will be attached
    to multiple sensors, including an electrocardiograph, blood pressure sensor, accelerometer,
    and a gyroscope. These sensors will be collecting physiological and activity-related
    information and sending it to care providers for necessary and real-time feedback.
    However, the data from these sensors or things can be unavailable because of DoS
    or DDoS attack. An intruder can launch a DoS attack by flooding these sensors
    with excessive requests in an attempt to overload it, preventing legitimate requests
    from being fulfilled. Similarly, the attacker can launch a DDoS attack by flooding
    these sensors from many different distributed sources. A Raspberry Pi 3 connected
    with the home network can work as the patient-side computing platform and as the
    sensor-level intrusion detector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DL-based intrusion detection**: The Raspberry Pi 3 will be preinstalled with
    a DL-based anomaly detector that will analyze sensors and its CPU utilization
    to detect any potential intrusion into the sensors and computing platform. If
    the sensors come without any MCU, we will consider intrusion detection for the
    Raspberry Pi 3\. The detector will continuously monitor CPU-utilization of the
    Raspberry Pi 3, and if an anomaly is found it will be reported to the management
    team for countermeasure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Healthcloud for model learning**: The healthcloud is a cloud computing platform,
    mainly designed for healthcare-related services. This will train the selected
    DL model for anomaly detection using a reference dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second part of the chapter (that is, the sections starting from *DL for
    IoT security incident detection*), we will describe the implementation of DL-based
    anomaly detection in the preceding use case. All the necessary codes are available
    in the chapter's code folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use case two: traffic-based intelligent network intrusion detection in IoT'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, host intrusion (including device level intrusion) exploits outside
    world communications, and most of the time a successful host intrusion comes with
    the success of a network intrusion. For example, in botnets, remote command-and-control
    servers communicate with the compromised machines to give instructions on operations
    to execute. More importantly, a large number of insecure IoT devices has resulted
    in a surge of IoT botnet attacks in worldwide IT infrastructure. The Dyn **domain
    name system** (**DNS**) attack in October 2016 is an example of this, wherein
    the Mirai botnet commanded 100,000 IoT devices to launch the DDoS attack. This
    incident impacted many popular websites, including GitHub, Amazon, Netflix, Twitter,
    CNN, and PayPal.  In this context, detection of network-level intrusion in IoT
    is not only necessary for IoT applications, but also for the rest of the IT industry.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, a network intrusion detector identifies intruders by inspecting traffic
    that passes between the hosts in the network. Like host intrusion detection, network
    intrusion detection can be signature-based or anomaly detection-based. In the
    signature-based approach, all incoming traffic will be compared with a list of
    known signatures of malicious traffic, and the in the anomaly detection approach,
    it compares the incoming traffic with previously established normal behavior.
    Considering the resource-intensive aspect of the former approach, we will consider
    anomaly detection-based **intrusion detection system** (**IDS**).
  prefs: []
  type: TYPE_NORMAL
- en: Implementation of use case two
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike traditional networks, IDS in IoT needs to be lightweight, distributed
    to different layers, and long-lasting. The first condition is obvious for resource-constrained
    IoT devices. The solution needs to be distributed over many layers to optimize
    the effectiveness of the detection process. Importantly, the solution needs to
    be usable for long-lasting IoT devices. For example, a smart fridge could be in
    a house for more than 10 years, and finding a security solution that can withstand
    that length of time is a difficult task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram presents an IoT infrastructure, including a multilayered
    network IDS, which can address the first two requirements of the IDS in an IoT.
    For example, an IoT deployment consists of different components that are distributed
    and resource constrained. A system-wide holistic IDS may not work well in terms
    of a real-time response. In this context, each layer in a multilayered IDS will
    work on identifying the layer-specific anomalies and the corresponding intruders
    in real time or quasi real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/447c4d8b-d209-4b80-91b7-96550945f1cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The multilayered network IDS of an IoT (especially in a smart home application)
    consists of the following three main elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sensors/things and an edge computing platform**: Smart-home devices, such
    as smart TVs, smart fridges, thermostats, smart bulbs, and home physical security
    cameras, are the sensors or ''things'' of the use case. These devices are connected
    to the internet via a home router/gateway. In this use case, we are considering
    a network-based security solution rather than a device-based solution. We are
    also assuming that the home router will work as the edge computing device and
    allow us to install the multilayered IDS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DL-based intrusion detection**: The home router/gateway will be preinstalled
    with three (one for each layer) DL-based anomaly detectors that will analyze the
    traffics/packets coming from the home''s connected things. Each of the detectors
    will analyze and compare with that layer''s normal traffic to find any anomaly
    or intrusion that, if detected, will be reported to the home owner and/or automatically
    set up countermeasure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model learning platform**: A home desktop or cloud platform will be needed
    to learn and update the DL model for the anomaly detectors. This will train the
    selected DL model/models for anomaly detection using three reference datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the following sections will describe the implementation of the DL-based
    network-level and node-level anomaly detection of the above use cases. All of
    the necessary code is available in the chapter's code folder.
  prefs: []
  type: TYPE_NORMAL
- en: DL for IoT security incident detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional security solutions (such as encryption, authentication, access control,
    and network security) are ineffective for IoT devices. In recent years, DL/ML-based
    solutions have become very popular alternatives to traditional solutions. DL/ML-based
    solutions can monitor IoT devices and their networks intelligently and detect
    various new or zero-day attacks. Importantly, DL/ML can detect and/or predict
    various devices and network level security incidents through anomaly detection.
    By gathering, processing, and analyzing data about various normal and abnormal
    activities of devices/things and their networks, these DL/ML methods can identify
    various security incidents, including IoT device and network level intrusions.
    In the following sections, we briefly present a few DL models that are useful
    in IoT device and network level IDS.
  prefs: []
  type: TYPE_NORMAL
- en: DNN, autoencoder, and LSTM in IoT security incidents detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A number of DL models, including simple DNNs, autoencoders, and recurrent neural
    networks (RNNs)^([6]), are already being used for IoT security enhancement. These
    approaches can be supervised or unsupervised. In this chapter, we will use both
    supervised and unsupervised approaches. For the first use case, we will use the
    LSTM-based supervised approach for device-level intrusion detection. In use case
    two, we will use DNNs and autoencoders for supervised and unsupervised network-level
    intrusion detection, respectively. We are using LSTM for the first use case, as
    device-level intrusion detection is based on time series CPU utilization data
    and LSTM works well with temporal data. On the other hand, an autoencoder is a
    lightweight model and is well suited for resource-constrained IoT devices. We
    have already presented a brief overview of LSTM in the previous chapter and so,
    in the following diagram, we briefly present an overview of autoencoders as a
    review of the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name suggests, autoencoders encode and decode algorithms. The following
    diagram presents a simple architecture of an autoencoder model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3521404-eb04-42d0-b5ab-9f5fc4609717.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding diagram, autoencoders consist of an input layer and
    an output layer that are connected through one or more hidden layers [7]. As autoencoders
    reproduce the inputs, they have the same number of input and output neurons. Generally,
    an autoencoder consists of two components: an encoder and a decoder. The encoder
    is connected with the input layer and, once it receives the input (**X**), it
    transforms it to a new and compressed representation (**Z**). The compressed code
    is also known as the code or latent variable (**Z**). In the output layer, the
    decoder receives the generated code or compressed code, and transforms it to a
    reconstruction of the original input. The aim of the training procedure in autoencoders
    is to minimize reconstruction errors in the output layer.'
  prefs: []
  type: TYPE_NORMAL
- en: Autoencoders are good for diagnosis and fault detection because of their input
    reconstruction at the output layer. Importantly, this special feature of autoencoders
    is really useful in IoT, including **industrial IoT** (**IIoT**), for fault diagnosis
    in hardware devices and machines, and for anomaly detection in operation/data
    gathering/performance. The anomaly detection capability of autoencoders motivates
    us to use the model in the network intrusion detection use case. Also, autoencoders
    are easily transferred between various IoT devices and the network once they are
    available in the cloud or server. Various types of autoencoders are available,
    including denoising, contractive, stacked, sparse, and variational autoencoders.
    In the use case, we will use a simple autoencoder architecture with a standalone
    DL model for intrusion detection, but autoencoders can be integrated with other
    DL models, including **convolutional neural networks** (**CNNs**) and LSTMs. 
    In the following sections, starting with data collection, we will discuss DL-based
    implementations of the aforementioned use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Data collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For both of the use cases, we can generate our own datasets and train and test
    the models on them. In the following paragraphs, we briefly present how we can
    create a dataset for device-level host intrusion detection through a DoS attack.
  prefs: []
  type: TYPE_NORMAL
- en: CPU utilisation data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the DoS attack, we need an attack machine and a target machine. We are using
    a Kali Linux machine as the attacker and a Windows machine as the target (which
    can be home gateway/Raspberry Pi 3/sensors). In Kali Linux, a DoS attack can be
    achieved in multiple ways. One way is to use the `hping3`[.](https://tools.kali.org/information-gathering/hping3)
    `hping3` command as a network tool to send custom TCP/IP packets, and allowing
    for the testing of firewalls, port scanning, address spoofing, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be used to perform a DoS attack by sending multiple requests in quick
    succession, taking up an IoT server''s/sensor''s resources and making it slower
    or unable to respond. The following screenshot shows CPU utilization of the target
    Windows server before sending the `hping3` command or launching the DoS attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3b59bea-e0e5-4bca-b35d-dbe9950693d3.png)'
  prefs: []
  type: TYPE_IMG
- en: The following command is an example of a DoS attack using Kali Linux's `hping3`
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following list is the syntax description of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hping3`: The name of the binary application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-c 100000`: The amount of packets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d 120`: The sizing of each packet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S`: SYN packets only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w 64`: TCP window size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p 21`: The destination port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--flood`: Means sending packets as fast as possible, without taking care to
    show incoming replies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--rand-source`: Using random source IP addresses; you can also use `-a` or
    `–spoof` to hide hostnames'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`example.com`: The website or destination IP address or the target machine''s
    IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot presents CPU utilization of the windows server after
    the DoS attack. We can clearly see that the CPU utilization of the attacked machine
    has increased by 30%:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75b97622-73d3-4e11-a2a7-080f64da71a3.png)'
  prefs: []
  type: TYPE_IMG
- en: We can run different `hping3` sessions to different target machines, and save
    CPU utilization data. In Windows, a process monitor can be used to save the data.
    For use case one, we are using CPU utilization data for an LSTM-based intrusion
    detection algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: KDD cup 1999 IDS dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traffic-based intelligent network intrusion detection in IoT, we can use the
    Wireshark network monitoring tool to record and save network traffic against different
    attacks related to network intrusion, and create our own dataset. In addition,
    we can use an existing open source dataset.  We are using the the KDD cup 1999
    IDS dataset.  This dataset is well suited for use case two as it is on the network-level
    intrusions. In the following paragraphs, we will briefly present an overview of
    the dataset. Please see reference for further detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The KDD cup 1999 datasets were generated by the **Defense Advanced Research
    Projects Agency** (**DARPA**) on a simulated air force model. The datasets were
    collected using two different sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: Training data was collected for 7 weeks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing data was collected for 2 weeks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete dataset includes 39 network level attack types and 200 instances
    of background traffic. The network traffic dataset is either classified as one
    of the attack types or as 'normal'. There are three versions of the KDD cup 1999
    IDS datasets—a full KDD dataset, corrected KDD dataset, and 10% KDD dataset. The
    10% KDD dataset is the most frequently used of the three datasets, and we are
    using this for use case two. In use case two, we will use an autoencoder for the
    clustering of normal and attack or intrusion traffic. Also, we will test a DNN
    for the classification of normal and attack traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Data exploration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following paragraphs, we will explore the two datasets used for the two
    use cases (the CPU utilization dataset for IoT device level, and the KDD cup 1999
    IDS dataset for network-level intrusion detection).
  prefs: []
  type: TYPE_NORMAL
- en: '**CPU utilization dataset**: The dataset is a CSV file consisting of dates
    and times with the corresponding CPU utilization rates (%). The dataset consists
    of 700 utilization values recorded every minute. The following screenshot presents
    a snapshot of the dataset:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/5a9bd417-c963-429f-8793-92d412f902ac.png)'
  prefs: []
  type: TYPE_IMG
- en: '**KDD cup 1999 IDS dataset**: The following screenshot shows a snapshot of
    the KDD cup 1999 IDS dataset. It is clear from the screenshot that the dataset
    is not ready to be used in the model. The dataset has protocol types, categorical
    values, and data values are not normalized. Also, we need to split the data into
    three sets in order to implement a three-layered, network-level IDS implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot presents a network traffic pattern of normal communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e4ba990-37c3-49e6-be70-35bfbd2415b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot presents a network traffic pattern of abnormal or
    attack (such as those by  smurf-it, a network-level distributed DoS attack) communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1239b537-0426-4d1a-b244-3fe45f9771ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Data preprocessing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data preprocessing is an essential step for a DL pipeline. The CPU utilization
    dataset is ready to be used in the training, but the KDD cup 1999 IDS dataset
    needs multilevel preprocessing that includes the following three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the data into three different protocol sets (application, transport,
    and network)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate data removal, categorical data conversion, and normalization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feature selection (optional)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the following lines of code is a potential way of splitting the dataset
    into three datasets, namely `Final_App_Layer`, `Final_Transport_Layer`, and `Final_Network_Layer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the datasets are ready, we remove the duplicate data entries and normalize
    the values of the remaining entries. The following lines of code or function can
    be used for duplicate removal and normalization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The final preprocessing of the datasets is the optimal set of features selection
    for the classifier. This is an optional process, but is useful for resource-constrained
    IoT devices, as this will minimize the size of the input layer or neurons of the network.
    The following lines of code or functions exploiting random forest can be used
    to do this preprocessing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two graphs highlight the 41 features of the application-layer
    and network-layer datasets, respectively. Features are ordered according to their
    importance, and it is clear from the graphs that different sets of features are
    important for different layer dataset. We tested the DL models with 8-12 and 41
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93e2b449-e523-4108-a97a-9234a987a43a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following graphs highlight the 41 features of the network-layer datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1487a535-5731-4952-afe6-24d1a4104318.png)'
  prefs: []
  type: TYPE_IMG
- en: Model training
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier in the chapter, we are using LSTM for use case one,
    an autoencoder for the multilayer IDS dataset, and DNN for the overall IDS dataset. 
    In the following subsections, we will present the DL model-training process for
    the two use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Use case one
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We considered a three-LSTMs-layered network architecture for the CPU utilization
    based host/device-level intrusion detection. The following diagram presents the
    LSTM architecture we used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/017b7821-457a-4563-9de6-8e53a10ab266.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can train and test the model by running the `lstm_anomaly_detection.py`
    file (available in the chapter''s code folder) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Use case two
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We used an autoencoder for the multilayered IDS implementation using the KDD
    cup 1999 IDS dataset, and we have trained and tested the autoencoder on the three
    datasets. To train the model on each layer''s dataset, we need to run the `IDS_AutoEncoder_KDD.py` file
    (available in the chapter''s code folder) on the dataset as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also trained and tested a DNN model on the overall KDD cup 1999 IDS dataset.
    To do so, we need to run the `DNN-KDD-Overall.py` file (available in the chapter''s
    code folder) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For all of the models, we have saved the best possible model to import and
    use in IoT devices. Also, we have saved models'' logs using TensorBoard to visualize
    different aspects of the models, including the networks, and their performance
    graphs. We can generate the performance graphs and networks by running following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once TensorBoard is running, navigate your web browser to `localhost:6006` to
    view the TensorBoard and view the network of the corresponding model. The following
    diagram is the architecture for the autoencoder used in the multilayered IDS for
    IoT:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3116f56-5ea6-41d7-bd22-2ee0e0eed884.png)'
  prefs: []
  type: TYPE_IMG
- en: Model evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can evaluate three different aspects of the models:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning/(re)training time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage requirement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance (accuracy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a desktop (Intel Xenon CPU E5-1650 v3@3.5GHz and 32 GB RAM) with GPU support,
    the training of LSTM on the CPU-utilization dataset and the autoencoder on the
    KDD layered wise dataset (reduced dataset) took a few minutes. The DNN model on
    the overall dataset took a little over an hour, which was expected as it has been
    trained on a larger dataset (KDD's overall 10% dataset).
  prefs: []
  type: TYPE_NORMAL
- en: 'The storage requirement of a model is an essential consideration in resource-constrained
    IoT devices. The following screenshot presents the storage requirements for the
    three models we tested for the two use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fc04244-20c1-4be5-b407-4b052d45d4a9.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the screenshot, autoencoders took storage in the range of KB. The
    final version of a stored autoencoder model took only 85 KB, LSTM took 1.5 MB,
    and DNN took 16.3 MB. In terms of storage requirements, all the models are fine
    to be deployed in many resource-constrained IoT devices, including the Raspberry
    Pi and smartphones. Also, it is clear from the screenshot that an autoencoder
    is a very lightweight model, because of the optimal feature selection process,
    among other reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have evaluated the performance of the models. In both of the use
    cases, dataset-wide evaluation or testing has been done during the training phase
    in the PC platform/server side.  We can also test them on the Raspberry Pi 3 or
    any IoT edge-computing devices as the models are saved and importable.
  prefs: []
  type: TYPE_NORMAL
- en: Model performance (use case one)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following graph shows the validation result of the LSTM used on the CPU
    utilization dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34a51846-ba91-4d78-9cb3-0c9e2b58c2ff.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the graph, the prediction follows the nonanomalous or 'normal'
    CPU utilization data series closely, and this is a hint that it is working fine.
    Importantly, when it finds the anomalous observations, the difference between
    the observed and predicted CPU utilization values (normalized) are significantly
    different to the normal behavior. This is an indication that there might be a
    DoS or DDoS attack to the IoT device. The error differences are plotted as a root
    mean squared (RMS) value, one of the most popular metrics of this kind.
  prefs: []
  type: TYPE_NORMAL
- en: Model performance (use case two)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have tested the autoencoder model on the three datasets for three different
    layer''s IDS. The following screenshot presents the evaluation result snapshot
    for the application layer''s IDS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31375c99-af8d-4c90-9415-d82dd098be3b.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the screenshot, training accuracy and validation and test
    accuracy are well above 90% when we used the first 12 most important features
    for the training. The performance could be different if we used a different feature
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following graph presents epoch-wise training accuracy of the preceding
    model on the application layer IDS dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8821215-c9ca-47c4-9034-7d09bdc35bc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We obtained some interesting evaluation results for the network and transport
    layers IDS model training. If we use the first 12 most important features, the
    validation accuracy is in the range of 50%, and if we change the feature set to
    be in between 8 and 10, the accuracy moves into the range of 80–90%. The following
    two screenshots present a snapshot of the evaluation on the network layer IDS
    experimentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc7bff50-fee4-4072-a7f2-414fc16399d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Interestingly, as we can see from the second screenshot, the accuracy is in
    the range of 50% up to 50 epochs, and then it jumps into the range of 90%. The
    final accuracy, or the accuracy of the saved model, is in the range 91–98%. So,
    they are sufficient for detecting network and transport layer anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76765bc5-ae6f-4206-8013-8b147c1d7748.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the training performance of the DNN model on
    the overall KDD dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/569eaec3-290d-40e1-a793-833fb4c46da1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/65470a14-f494-4702-9b01-fe0afe95da56.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the preceding figures, test accuracy is close to 1 or 100%.
    We also separately tested the saved model and test accuracy was well above 0.90
    or 90%. Hence, the DNN is also good enough to detect network-level intrusions
    in IoT networks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is the single most important issue in IoT realization. Traditional
    PC/desktop security solutions, especially signature-based solutions, are not effective
    in IoT applications. Behavior-based solutions, such as anomaly detection, are
    preferable in IoT. DL/ML models are very useful tools in IoT for data analysis
    and also for security incident detection. In this chapter, we presented DL-based
    network and device behavioral data analysis, and security incident detection techniques
    for IoT applications in general. In the first part of this chapter, we briefly
    described various IoT security attacks and their potential detection techniques,
    including DL/ML based techniques. We considered two different levels of intrusion
    detection in IoT applications. The first use case is on device-level or host-level
    intrusion detection, and the second use case is on network-level intrusion detection.
    In the second part of the chapter, we presented the DL-based anomaly or incident
    detection part of the use cases' implementations. As found in the evaluations,
    the chosen DL models are good enough to detect device- and network-level intrusions
    in IoT applications.
  prefs: []
  type: TYPE_NORMAL
- en: IoT will be used in various applications, such as infrastructure and industry,
    to monitor their health conditions. One of the potential applications of health
    monitoring is predictive maintenance of the monitored subject (such as a motor)
    to avoid service disruption or any other incidents.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will briefly introduce the importance of IoT-based predictive
    maintenance and its implementation using DL models.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Internet of Things (IoT) connected devices installed base worldwide from 2015
    to 2025 (in billions)*, at [https://www.statista.com/statistics/471264/iot-number-of-connected-devices-worldwide/.](https://www.statista.com/statistics/471264/iot-number-of-connected-devices-worldwide/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Real-Time Detection of Application-Layer DDoS Attack Using Time Series Analysis*,
    T. Ni, X. Gu, H. Wang, and Y. Li, Journal of Control Science and Engineering,
    vol. 2013, pp. 1–6, 2013.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DDoS in the IoT: **Mirai and Other Botnets*, C. Kolias, G. Kambourakis, A.
    Stavrou, and J. Voas, IEEE Computer, vol. 50, no. 7, pp. 80–84, 2017.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2016 Dyn cyberattack, at [https://en.wikipedia.org/wiki/2016_Dyn_cyberattack.](https://en.wikipedia.org/wiki/2016_Dyn_cyberattack)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A Big Network Traffic Data Fusion **Approach Based on Fisher and Deep Auto-Encoder*,
    Tao X., Kong D., Wei Y., and Wang Y. (2016), Information, 7(2), 20.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*An Effective Intrusion Detection Classifier Using Long Short-Term Memory with
    Gradient Descent Optimization*, Kim J., and Kim H. (2017, February), In Platform
    Technology and Service (PlatCon), 2017 International Conference on (pp. 1-6),
    IEEE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pierre Baldi, *Autoencoders, Unsupervised Learning and Deep Architectures*,
    Isabelle Guyon, Gideon Dror, Vincent Lemaire, Graham Taylor, and Daniel Silver
    (Eds.), In Proceedings of the 2011 International Conference on Unsupervised and
    Transfer Learning workshop—Volume 27 (UTLW'11), Vol. 27, JMLR.org 37-50, 2011.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KDD Cup 1999 Data, at [http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html.](http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
