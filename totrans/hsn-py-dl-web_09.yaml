- en: Deep Learning on Google Cloud Platform Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw a variety of deep learning APIs that are provided
    by various organizations. We also saw their applicability broadly grouped into
    two categories—the first was computer vision and image processing, and the second
    was natural language processing. We are going to continue exploring deep learning
    APIs in this chapter as well. This chapter introduces you to **Google Cloud Platform**
    (**GCP**) and three APIs offered by it in the area of deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your GCP account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first project on GCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Dialogflow API in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Cloud Vision API in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Cloud Translation API in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can access the code for this chapter from [https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Python-Deep-Learning-for-Web/tree/master/Chapter6).
  prefs: []
  type: TYPE_NORMAL
- en: To run the code in this chapter, you'll need to have Python 3.6+ on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Other requisite installations will be introduced during the course of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your GCP account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we proceed with using the APIs offered by GCP, you must set up your
    GCP account. Assuming that you already have a Google account—first, head to [https://cloud.google.com/](https://cloud.google.com/).
    GCP gives you $300 of credit (which you can use for a period of 12 months) if
    you are signing up to it for the first time; this credit is sufficient enough
    to accommodate many good projects and enable you to try out the offerings of GCP.
    Once this has been done, we can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top-right corner of GCP''s home page, you should be able to locate a
    Try free button. Just click on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d0065fb-e97a-457a-bca4-8a70e70fa661.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are not signed in to your Google account, you will be asked to sign
    in. Select your country accordingly and make sure you check the Terms of service
    box. After this, click on AGREE AND CONTINUE. You will see a page as in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2b7f7a6-bbb5-4daf-8a80-e52ef7edd315.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, you will be asked to enter the details for a payment method of your choice.
    Even if you have free credits, in order to use GCP's utilities, you need to set
    up a valid billing account. But don't worry, you will not be charged from your
    billing account unless you allow GCP to do so. During your free trial, all the
    billable utilities that you will use on GCP will be deducted from your free credit
    only. Once the limit for your free credit ends, GCP will send you a reminder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your billing formalities are done, you should end up at GCP''s console
    page, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/469c0188-c363-4a28-a15f-d060ca342a01.png)'
  prefs: []
  type: TYPE_IMG
- en: This is actually your GCP dashboard, which gives you an overall summary of your
    GCP usage. GCP also lets you customize the tags that appear on your GCP console.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be done with the GCP account setup. To be able to use the utilities
    in GCP, you need to create a GCP project with a valid billing account tagged to
    it. In the next section, you will see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first project on GCP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A project helps you organize all your GCP resources systematically. Creating
    a project on GCP can be done in just a matter of a few clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After signing in to your Google account, open up your GCP console using [https://console.cloud.google.com](https://console.cloud.google.com).
    In the top-left corner, you should see Google Cloud Platform and just beside that,
    you can see a drop-down list, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97baa6ef-0c5a-4258-b4d2-f1910f97cc82.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you did create any projects while signing up for GCP or previously, then
    one of your projects will appear in the marked area (fast-ai-exploration and gcp-api
    are two projects that I created on GCP). Now, click on the down arrow and a popup
    should appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3f3ccc7-fc1e-4338-9fb3-f5704b19b0f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on NEW PROJECT to proceed. You should end up on a page, shown in the
    following screenshot, that will ask you to specify the project''s name. GCP automatically
    generates an ID for the project that you are creating but it also lets you edit
    that ID according to your choices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d1652d62-c16c-4b05-b638-cbbaaebcb4b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you are done specifying the initial details of your project, just click
    on CREATE and the project will be created. Once the project is created, it should
    appear in the projects list. You can always navigate to this list using the handy
    dropdown that GCP provides on its console page. You can see this in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eec5591a-a3f9-4e1a-b6aa-bbe3b0be234a.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to learn more about GCP projects, you can check the official documentation
    at [https://cloud.google.com/storage/docs/projects](https://cloud.google.com/storage/docs/projects).
    GCP is equipped with a wide suite of various utilities that can be found at [https://cloud.google.com/products/](https://cloud.google.com/products/).
    You are encouraged to take a look and explore them with respect to your interests.
  prefs: []
  type: TYPE_NORMAL
- en: GCP provides us with a wide range of APIs that can be used for a variety of
    tasks, including deep learning. In the next couple of sections, we will see how
    some of the most widely used deep learning APIs can be consumed using Python code.
    We will start with Dialogflow.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Dialogflow API in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start to learn how to use the Dialogflow API in Python, let's understand
    what Dialogflow is all about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dialogflow (formerly known as **api.ai**) provides a suite of utilities for
    building natural and rich conversational interfaces, such as voice assistants
    and chatbots. It is powered by deep learning and natural language processing and
    is used by a large number of companies. It seamlessly integrates with websites,
    mobile applications, and many popular platforms, such as Facebook Messenger, Amazon
    Alexa, and so on. Dialogflow provides us with three major components for building
    a conversational user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: The best practices and processes that can easily be applied to any conversational
    user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functionalities to add any custom logic that might be required for building
    a conversational user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilities to train agents so as to fine-tune the overall experience of the
    interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will see how Dialogflow can be used to create a simple application in
    Python. You can refer to [https://dialogflow.com](https://dialogflow.com) to learn
    more about Dialogflow.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin with the creation of a Dialogflow account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dialogflow account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a Dialogflow account is simple and easy. The process involves the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit [https://console.dialogflow.com/api-client/#/login](https://console.dialogflow.com/api-client/#/login)
    and you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/397707d9-086c-4cdf-902b-4ec2d5944ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: After clicking the sign in with Google button, you'll be asked to choose which
    Google account you want to use with Dialogflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On selecting the account, you might be asked to allow Account Permissions for
    Diagflow and also to accept the Dialogflow terms and conditions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating an account, you will be greeted with a dashboard that will either
    display your active Dialogflow projects or ask you to create a new agent to be
    displayed—but what is an **agent**?
  prefs: []
  type: TYPE_NORMAL
- en: An agent—in Dialogflow terminology—is a piece of software that performs the
    task of receiving input from users, which might be in the format of text, audio,
    image, or video. It then tries to determine the *intent* or the previously defined
    appropriate action corresponding to the input. The matched intent might perform
    an *action* or it may simply arrive on a hypertext response to the query made
    by the user input. Finally, the agent returns the results to the user.
  prefs: []
  type: TYPE_NORMAL
- en: To create a new agent, in the left-hand side navigation menu of the Dialogflow
    console, click on Create Agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be presented with a screen that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9023d9b6-88bb-447f-aeb6-17b44aae03b8.png)'
  prefs: []
  type: TYPE_IMG
- en: We have named our agent DemoBot and set the default language to English. Further,
    we had to select a Google project for the agent.
  prefs: []
  type: TYPE_NORMAL
- en: A Google project—or simply a **project**—is a term that you encounter in the
    study of GCP. A project encompasses the entire array of resources allocated toward
    any software project that uses those resources and is financed by a single billing
    account on GCP. No resources can be allocated without defining a project for them.
    Further, no project can be created without adding a valid billing option to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now be able to see a screen, as in the following screenshot, with
    certain default intents provided for your agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/768479fc-f213-41d9-898d-927c60d1869b.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left, you can see the navigation menu, which provides all the various
    modules that can be brought together in your agent for better human-like interaction
    provided by the software. In the right-hand side panel, you have the option to
    test your agent at any moment with any input you provide. This will come in handy
    during the development of responses and when testing the matching of intents with
    input provided.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new intent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new intent for our agent, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Create Intent button at the top-right corner of the middle section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to provide a name for this intent—let's say `Dummy Intent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will then need to provide some training phrases that would trigger this
    intent. Let''s say we provide three training phrases, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4a2458f-1671-4689-b374-e77d590feef0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can expect this intent to be called on whenever the system encounters
    the phrases (or similar phrases) mentioned in the training.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add some responses that our agent will make when this intent is
    invoked, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/384b2f86-2a4f-40e0-8d34-b77951aa764d.png)'
  prefs: []
  type: TYPE_IMG
- en: At the top-right corner of the middle section, click on the SAVE button to save
    the new intent and you will be notified that the agent training has started.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a small agent, the training completes within seconds and you'll be presented
    with an Agent training completed notification.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to test whether our agent is able to execute this intent.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the right-hand side section of your Dialogflow console, you'll be able to
    test your agent. In the top text field, enter your query. In our agent, to call
    `Dummy Intent`, we'll write `Talk to the dummy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the intent matches correctly, you''ll be able to see the response from `Dummy
    Intent`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9846d629-256f-4200-a012-02f6dba24730.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, you will observe that the input of the user is `Talk
    to the dummy` and the response generated is one of the two responses we defined
    in the responses for `Dummy Intent`. You can observe that the intent that was
    matched to the input was `Dummy Intent`.
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at how we can invoke the agent using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Dialogflow Python SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will demonstrate how you can use the Dialogflow Python
    API V2 with your Dialogflow agent to bring interactivity to your application built
    using Python. Let''s first understand how the several components of the DialogFlow
    ecosystem interact with the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48741d83-0b89-4933-a7f4-df36291f5f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: The user creates the input, which is sent to the agent via integration APIs,
    websites, or apps. The agent matches the user input to the available intents and
    produces a fulfillment of the **query**. The response is sent back to the user
    interface by the means of a webhook and the response is presented to the user.
  prefs: []
  type: TYPE_NORMAL
- en: It is quite possible for the integration APIs to include services other than
    Dialogflow. You could create an application that could propagate the same user
    query to multiple agents and consolidate their response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, the developer can introduce middleware handlers or integrations,
    which would preprocess or postprocess the user query and agent response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Dialogflow Python SDK, we use the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is highly recommended that you create a virtual environment using `virtualenv`
    before using the previous command to have clean and unbroken dependencies. To
    learn more about `virtualenv`, refer to [https://virtualenv.pypa.io/en/latest/](https://virtualenv.pypa.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation is complete, you will be able to import the Dialogflow
    API to your project by using the following import code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We'll now create a GCP service account to authenticate our Python script in
    order to use the Dialogflow agent we created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GCP service account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A GCP service account manages the permissions provided to access a GCP resource.
    The Dialogflow agent we created was a GCP resource and so to use it from the Python
    API, we''ll need a service account:'
  prefs: []
  type: TYPE_NORMAL
- en: In the GCP console, from the left-hand side navigation menu, go to APIs | Services
    | Credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Create credentials button to get the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bbe0df1-e132-459f-bc1b-f48cfb9be413.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Service account key. In the page that comes up next, select Dialogflow
    Integrations as the service account and JSON as the key type. After clicking Create,
    a JSON file is downloaded to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note down the address of this JSON file—for example, `/home/user/Downloads/service-account-file.json`.
    The file name could differ, as it is provided by the GCP console when you download
    the file to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this file to obtain the project ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, use the following commands—with suitable replacements as present on your
    system—in the terminal to export the credentials to the environment variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Linux (Terminal):'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows (Command Prompt):'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With this done, we are now ready to write the Python script that will call our
    Dialogflow agent.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the preceding commands only set the variables for the current
    session. You need to run the commands every time you restart the session.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the Dialogflow agent using Python API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we''ll be creating a simple Python-based API that calls to
    the agent we created in the Dialogflow console to invoke `Dummy Intent`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we must import the Dialogflow module to the project. To do so, use
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the project ID into the script, we can fetch it from the runtime environment
    variables. To do so, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also declare a unique session ID to store the records of the conversations
    made in any single session with the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll now create a handy function that will allow us to repeatedly perform
    a set of preprocessing statements required to call the Dialogflow agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we will first initialize a `SessionsClient` object. A
    session records the complete interaction between the user and the Dialogflow agent
    during one uninterrupted conversation. Next, we must set the path of the session,
    which is the mapping of the project to a unique session ID.
  prefs: []
  type: TYPE_NORMAL
- en: The next two lines of the preceding function definition are used to create a
    Dialogflow `QueryInput` object that contains a Dialogflow `TextInput` object.
    The `query_input` variable holds the message the user inputs for the Dialogflow
    agent.
  prefs: []
  type: TYPE_NORMAL
- en: The next line invokes the `detect_intent()` method of the `SessionsClient` object.
    The `session ID-project ID` mapping, along with the input, is passed as the parameter
    to the method. The response of the Dialogflow agent is stored in the response
    variable. The function returns the fulfillment text response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now use this method. First, declare a message to pass to the Dialogflow
    agent. Recall the training phrases we provided to our Dialogflow agent for `Dummy
    Intent`. We''ll pass a message that is similar to the training phrases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We will get an output that is among the two responses we defined for `Dummy
    Intent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate the response variable in the `detect_intent()` method, which can be
    done by adding the following line of code in the `detect_intent()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You will observe that the name of the matched intent is `Dummy Intent` and the
    output that we had in this call of the agent is `Congratulations, dummy intent
    user!`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several other ways of using the Dialogflow API using Python, including—but
    not limited to—audio-visual input and sensor-based inputs. The Dialogflow agents
    can be integrated with major platforms, such as Google Assistant, Facebook Messenger,
    Slack, Telegram, WhatsApp, and several others, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d530c5f-6145-41e3-8de2-e80c9a4b511e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Dialogflow ecosystem is rapidly introducing new features and is increasingly
    moving toward providing complete AI-based chatbots that can perform several tasks
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll explore another GCP API that can be used to predict
    the contents of images and videos.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Cloud Vision API in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computer vision is the field of making computers understand images and make
    sense of them. Common computer vision tasks include image classification, image
    detection, image segmentation, and so on. As discussed in earlier chapters, the
    field of computer vision has been heavily affected by the effectiveness of deep
    learning in achieving human-level (and sometimes even better) performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Cloud Vision API provides us with a lot of utilities for performing computer
    vision tasks. Cloud Vision allows us to use the pre-trained models as well as
    build our own custom production-ready models that cater to our needs (such as
    AutoML Vision Beta). Let''s now briefly look at the features that are offered
    by the Cloud Vision API:'
  prefs: []
  type: TYPE_NORMAL
- en: Label detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optical character recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handwriting recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Landmark detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object localization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from the previously mentioned features, Cloud Vision also lets us extract
    different attributes of a given image. The following screenshot shows this utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/278c72a8-1139-4273-a4e3-2d4f2274343d.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, when given an image, the Cloud Vision API automatically extracts
    its attributes. You can also try this by going to [https://cloud.google.com/vision/](https://cloud.google.com/vision/).
  prefs: []
  type: TYPE_NORMAL
- en: We have been using the term **pre-trained models** from earlier chapters. We
    have also seen how the Cloud Vision API lets us incorporate the pre-trained models.
    It will be worth digging a bit deeper into the term pre-trained models in order
    to understand the importance of using them.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of using pre-trained models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of pre-trained models is commonly referred to as **transfer learning**.
    Transfer learning is not something that is very fundamental to deep learning and
    it is just a methodology. It doesn't denote a particular deep learning model but
    its implications of transfer learning are very effective, especially in a deep
    learning context.
  prefs: []
  type: TYPE_NORMAL
- en: We human beings do not learn each and every task from scratch; we try to utilize
    our past experiences to do tasks that are similar in nature. This is transfer
    learning. We tend to transfer the knowledge of our past experiences to similar
    tasks that we are met with.
  prefs: []
  type: TYPE_NORMAL
- en: But how is this applicable to deep learning? Let's find out.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a neural network is trained for a particular task, it tries to estimate
    the value of the best possible weight''s matrices. Now, when you attempt to train
    another network on a similar kind of task, it turns out that you can use the weights
    from the previous task. The definition "similarity" is broad here and can be avoided
    for the time being. But you may wonder what the advantage here is. Well, the advantages
    are manifold, but here are a couple of examples:'
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to train your neural network from scratch, which saves you a
    lot of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It leverages the opportunity to use state-of-the-art results from a problem
    domain that is similar to yours.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In literature, the task that you use the network weights from is called a source
    task and the task that you apply the weights to is called the target task. The
    network model that you use the weights from is referred to as the pre-trained
    model. Goodfellow et al. gave a very subtle definition of transfer learning in
    their book *Deep Learning*:'
  prefs: []
  type: TYPE_NORMAL
- en: '"[A] situation where what has been learned in one setting is exploited to improve
    generalization in another setting."'
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of transfer learning has shown exceptional results in a wide range
    of deep learning applications in areas such as **Natural Language Processing**
    (**NLP**), computer vision, and more. But transfer learning has its limitations
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Transfer learning can result in a performance drop when the source task is not
    sufficiently related to the task where transfer learning is being used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gets difficult sometimes to determine how much transfer is required from
    the source task to the target task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For an in-depth study of transfer learning, you are encouraged to go through
    the book *Hands-On Transfer Learning with Python* by Dipanjan et al*.* We will
    now learn—with the help of an example—how to use the Cloud Vision API using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Vision Client libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cloud Vision API is available through a set of libraries for different languages,
    called the Vision Client libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'One such library offered in this set is the Python Cloud Vision Client library,
    which we will be using in our example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Python Cloud Vision Client library, we use the following command
    in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It is highly recommended that you use a Python virtual environment to install
    the Vision Client library.
  prefs: []
  type: TYPE_NORMAL
- en: After the installation is complete, we will need to set up a service account
    to use the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As discussed previously, the steps to be followed for setting up a service
    account are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Google Cloud console.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to APIs | Services | Credentials.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create credentials.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose New Service Account in the drop-down menu for selecting the service account.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in any name for the service account.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave Role unchecked. This is not needed when using the Cloud Vision API.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create. Confirm any warning boxes that appear.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The `service account credentials` JSON file gets downloaded to your computer.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, as we did previously, export this downloaded file to the system environment.
    To do this, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Linux (Terminal):'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows (Command Prompt):'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As a final step before using the Cloud Vision API, we need to enable the API
    within the project that we created the service account for. To do so, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Google Cloud console's left-hand side navigation panel, click on APIs
    and Services.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Enable APIs & Services.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Cloud Vision API in the list that appears.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Enable.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, we are ready to use the Cloud Vision API using Python in our script.
  prefs: []
  type: TYPE_NORMAL
- en: The Cloud Vision API calling using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a new Python script (or Jupyter notebook). In order to use the
    Cloud Vision API, we first need to import the Cloud Vision Client library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we''re ready to move on and use the client library. In our example,
    we will annotate an image. The image annotation service is provided by the `imageAnnotatorClient()`
    function in the Vision library. We will create an object of the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s load the file to be tested for annotation into the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that you should have the `test.jpg` file in the same working directory
    in order for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file is currently a raw binary data file for the program. For the Cloud
    Vision API to work, we need to convert this into a type of image that the Vision
    Client will accept:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we make the call for GCP to annotate the image via the Cloud Vision
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After printing the labels set by the vision API, we will be able to see all
    the possible objects and features that the Cloud Vision API is able to detect
    in the picture provided, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20979113-d6cc-4b94-be0e-1fc2f49ba1c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you print `labels`, the result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fccb87ea-584c-4f34-8559-40f1e95c5206.png)'
  prefs: []
  type: TYPE_IMG
- en: The predicted labels are `Sky`, `Horizon`, `Atmosphere`, `Sunrise`, `Sunset`,
    `Morning`, `Ocean`, `Calm`, `Wing`, and `Evening`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding predictions are very close to the real scene that is captured
    in the preceding photo. It was sunrise and taken from the window of an airplane.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Cloud Translation API in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Cloud Translation API helps developers to easily integrate language translation
    functionalities into their applications. It is powered by state-of-the-art neural
    machine translation, which can be thought of as an amalgamation of deep learning
    and machine translation. The Cloud Translation API provides programmatic interfaces
    for using pre-trained models and building production-ready custom models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many developers use the Cloud Translation API''s pre-trained models to dynamically
    translate a given set of text into a target language. The Cloud Translate API
    supports more than 100 languages. But this language library is evolving to empower
    the developer community. The following screenshot shows a translation of some
    text written in English to Bengali:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb0bdcce-a7ea-47a3-bd8f-4f49cb6251a6.png)'
  prefs: []
  type: TYPE_IMG
- en: You can always try this on [https://cloud.google.com/translate/](https://cloud.google.com/translate/).
    But sometimes, the language of a given text might be unknown itself. The Cloud
    Translation API provides a service called **label detection** to handle situations
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: The AutoML variant of the Cloud Translation API lets us build custom models
    with respect to language pairs (the source language and target language) according
    to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Cloud Translate API for Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the Cloud Translation API with Python, we must first install the Google
    Cloud Translate Python library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, use the following `pip` command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, as done previously, create a service account and download the credentials
    file. Export this file to the path for the `GOOGLE_APPLICATION_CREDENTIALS` environment
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, find `Cloud Translate API` in the list of APIs to enable. Once done, we're
    ready to make translations directly from Python using GCP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Google Cloud Translation Python library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new Jupyter notebook or a new Python script. We will now import the
    Google Cloud Translate API to our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We would need to create a Cloud Translate API object to make the service calls.
    We can do so as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now begin with the translation process. First, we need a message to
    translate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This creates a Unicode string containing the word *Namaste* in Hindi. Let's
    see what it converts to in English!
  prefs: []
  type: TYPE_NORMAL
- en: 'We call the API to translate the text into English using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you observe the `translation` variable, you will find that it contains the
    following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It is simple to infer from this dictionary that the detected language was Hindi
    (represented by `hi`). The input is shown in the format the input was fed in.
    `translatedText` holds `Hello`, which is the exact translation of *Namaste*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored some of the famous and groundbreaking deep learning-based
    services provided by GCP. We learned how to use Dialogflow using Python to build
    conversational chatbots that can learn over time. We used the Cloud Vision API
    to predict the objects recognized in any image. We could easily extrapolate this
    to a video and achieve similar results. We finally covered the Cloud Translate
    API for performing deep NLP-based translation using the service. All the major
    services provided by GCP are accessible over APIs, which makes them easily replaceable
    in any project. The accuracy of models created by highly trained professionals
    is commendable and makes the life of a web developer easier when trying to build
    AI-powered web solutions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce the features offered by **Amazon Web
    Services** (**AWS**) to integrate AI with web applications using Python.
  prefs: []
  type: TYPE_NORMAL
