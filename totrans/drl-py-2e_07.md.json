["```\ndef forward_prop(X):\n    z1 = np.dot(X,Wxh) + bh\n    a1 = sigmoid(z1)\n    z2 = np.dot(a1,Why) + by\n    y_hat = sigmoid(z2)\n\n    return y_hat \n```", "```\ndelta2 = np.multiply(-(y-yHat),sigmoidPrime(z2)) \n```", "```\ndJ_dWhy = np.dot(a1.T,delta2) \n```", "```\ndelta1 = np.dot(delta2,Why.T)*sigmoidPrime(z1)\ndJ_dWxh = np.dot(X.T,delta1) \n```", "```\nWxh = Wxh - alpha * dJ_dWhy\nWhy = Why - alpha * dJ_dWxh \n```", "```\ndef backword_prop(y_hat, z1, a1, z2):\n    delta2 = np.multiply(-(y-y_hat),sigmoid_derivative(z2))\n    dJ_dWhy = np.dot(a1.T, delta2)\n    delta1 = np.dot(delta2,Why.T)*sigmoid_derivative(z1)\n    dJ_dWxh = np.dot(X.T, delta1) \n    Wxh = Wxh - alpha * dJ_dWhy\n    Why = Why - alpha * dJ_dWxh\n    return Wxh,Why \n```", "```\n    import numpy as np\n    import matplotlib.pyplot as plt\n    %matplotlib inline \n    ```", "```\n    X = np.array([ [0, 1], [1, 0], [1, 1],[0, 0] ])\n    y = np.array([ [1], [1], [0], [0]]) \n    ```", "```\n    num_input = 2\n    num_hidden = 5\n    num_output = 1 \n    ```", "```\n    Wxh = np.random.randn(num_input,num_hidden)\n    bh = np.zeros((1,num_hidden)) \n    ```", "```\n    Why = np.random.randn (num_hidden,num_output)\n    by = np.zeros((1,num_output)) \n    ```", "```\n    def sigmoid(z):\n        return 1 / (1+np.exp(-z)) \n    ```", "```\n    def sigmoid_derivative(z):\n         return np.exp(-z)/((1+np.exp(-z))**2) \n    ```", "```\n    def forward_prop(x,Wxh,Why):\n        z1 = np.dot(x,Wxh) + bh\n        a1 = sigmoid(z1)\n        z2 = np.dot(a1,Why) + by\n        y_hat = sigmoid(z2)\n\n        return z1,a1,z2,y_hat \n    ```", "```\n    def backword_prop(y_hat, z1, a1, z2):\n        delta2 = np.multiply(-(y-y_hat),sigmoid_derivative(z2))\n        dJ_dWhy = np.dot(a1.T, delta2)\n        delta1 = np.dot(delta2,Why.T)*sigmoid_derivative(z1)\n        dJ_dWxh = np.dot(x.T, delta1) \n        return dJ_dWxh, dJ_dWhy \n    ```", "```\n    def cost_function(y, y_hat):\n        J = 0.5*sum((y-y_hat)**2)\n\n        return J \n    ```", "```\n    alpha = 0.01\n    num_iterations = 5000 \n    ```", "```\n    cost =[]\n    for i in range(num_iterations):\n        z1,a1,z2,y_hat = forward_prop(X,Wxh,Why)    \n        dJ_dWxh, dJ_dWhy = backword_prop(y_hat, z1, a1, z2)\n\n        #update weights\n        Wxh = Wxh -alpha * dJ_dWxh\n        Why = Why -alpha * dJ_dWhy\n\n        #compute cost\n        c = cost_function(y, y_hat)\n\n        cost.append(c) \n    ```", "```\n    plt.grid()\n    plt.plot(range(num_iterations),cost)\n    plt.title('Cost Function')\n    plt.xlabel('Training Iterations')\n    plt.ylabel('Cost') \n    ```"]