- en: Creating the Deep Learning API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we learned about working with TensorFlow on AWS Lambda.
    This chapter briefs about the RESTful API along with the AWS API Gateway. We will
    learn how to create the API Gateway using the serverless framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter , we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: API service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS API Gateway
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a deep learning API project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find all the codes at: [https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda](https://github.com/PacktPublishing/Hands-On-Serverless-Deep-Learning-with-TensorFlow-and-AWS-Lambda)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RESTful API has become extremely popular in recent years, with the rising
    popularity of macro services as a universal way to communicate between different
    services inside an application—for example, we can use RESTful API services for
    different programming languages and different hosting platforms together in a
    single application.
  prefs: []
  type: TYPE_NORMAL
- en: The RESTful API is an interface that allows you to communicate between different
    applications, and it can serve a lot of purposes. The RESTful API enables you
    to easily integrate different services. It also allows you to make an easy connection
    between the frontend and backend of an application, and it allows other developers
    to use your service. The deep learning API, in this context, allows you to easily
    integrate deep learning models within your application or provide other developers
    with a way to use your model. Now let's look at the API Gateway service in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: AWS API Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API Gateway is a double service that allows you to create, publish, monitor,
    and secure APIs. We can connect the API Gateway not only to business Lambda but
    also to AWS EC2 instances, **Elastic Clusters** (**ECS**), or even to **Elastic
    Beanstalk** (**EBS**). It has a pay-as-you-go system, which makes it very convenient
    as a starting service. Let's look at the specific features of the API Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some of the features of the API Gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to scale**: The API service takes care of scaling, which means we do
    not have to worry as to whether this is a good way to handle peak loads, and whether
    it will over-provision resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traffic management**: The API Gateway has a way to control the traffic. The
    main use case in traffic management is throttling when we want to have a more
    uniform load on the backend. This is not an issue with AWS Lambda, as it can scale
    almost indefinitely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization**: This allows you to control user access to the API. This
    means that we can either keep the API private or commercialize it. This feature
    is essential for your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring**: This feature enables us to get usage statistics at the user
    level. This is important if we want to limit users based on their usage, and if
    we need to troubleshoot our API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Caching**: This allows you to reduce the amount of requests, which go to
    the backend by caching some of the responses. If your application has to deal
    with the load of repetitive requests, then the switch would significantly reduce
    the amount of usage at the backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version control**: This allows you to manage multiple versions of the API,
    which is very important for the production of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at the pricing of the API.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main advantages of the API Gateway is its pay-as-you-go feature.
    The pricing for the service amounts to 3.5 dollars per million requests and around
    0.09 dollars per 1 GB of data transfer charges. Other optional charges may apply
    to the services that are chosen. Therefore, we need to make sure that it helps
    to reduce the cost of the backend. The cost we saw for the API Gateway can be
    extremely affordable for our project. For beginners, the AWS API Gateway is part
    of the free tier, and you can get 1 million requests per month for free. Kindly
    note that the free tier is only for new users.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the API Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are aware of the costing and features of the API Gateway, we will
    create the API Gateway using the AWS console. But before we start, we will need
    to create and locate AWS Lambda (created in [Chapter 4](67913362-94d8-4c74-850e-f6b09ca49367.xhtml),
    *Working with TensorFlow on AWS Lambda*), and then we will learn how to create
    a connection between the AWS API Gateway and AWS Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AWS Lambda instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create the AWS Lambda instance and connect to a Gateway using the AWS
    console. Let''s start with creating the AWS Lambda instance and choose the administrative
    role that we created in the previous chapter, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/816e7fcc-b806-4732-b3af-8f46ff04ecf9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s test the function and check that it has been created using the Test
    option in the top-right side of the screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee0b5cdb-5c4f-4738-8dbe-0c49b593072a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s add the API Gateway trigger by clicking on the API Gateway option
    on the left side under Add triggers. Now under the Configure triggers tab, select
    Create a new API and select an Open API endpoint. Now, under Additional setting**,**
    just check the API name and click on Add to create the API and save it. This will
    give you the page shown in the following screenshot, which has a link to the API
    to test on your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8136981c-e426-4441-b0fa-a3e3738f16f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, it produced a result that is similar to the demo code, as seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e35d989c-7f0f-4259-9c48-7c69cbbef1ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we are ready with the AWS Lambda and the API Gateway, we will be creating
    the connection using the serverless framework.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the API Gateway using the serverless framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before creating the API, let us look at our project files: the main Python
    file (`index.py`) and the serverless configuration file (`serverless.yml`). Let''s
    look at the Python file as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code block, you can see that this file will be returning
    a JSON response instead of the string to the API request. For this, we need to
    change `status code` to `200` and change `body` to `transform` in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the server configuration file, we will be adding a `events` and adding an
    API endpoint name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Deploying the serverless framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s deploy the service by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'On successful completion of the deployment, it will return the URL for the
    API Gateway. Now test the URL we got on the command line using the `curl` command
    and URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e50043f-76b9-4473-923f-9ae5aed4d8f2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also run the URL in the browser and test the deployment to find the desired
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a first API project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let us start by creating the example of the deep learning API project.
    Before we start the project, let''s look at our files: the main Python file and
    the service configuration file, along with some libraries files and the inception
    model.'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will be adding one `events` section and the endpoint name.
    In the Python file, we will be returning a JSON response to a request. Also, we
    will make Lambda accept the link to the image in the request and then apply it
    to a module. The we will be deploying the server and testing the files in the
    command line and browser, as we checked out in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: The present configuration file is a combination of changes from the previous
    section and is very much similar. An additional part where are will be making
    a change is in the Python file, where we have added reading URL parameters. As
    you can see, if no URL is present, we use our image taken earlier. But, if we
    have the URL path, we can download the image from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s deploy the service using the `serverless deploy` command, which
    will provide you with the URL of the API Gateway. Let''s test this URL using the
    `curl` command and from the browser and you will find the same response that we
    had in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43272726-ba2f-4203-9d54-02619f8e20b9.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also test the deployment by downloading the image. To test this, we only
    have to add the URL of the image as a parameter to the API Gateway URL.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the API Gateway services and the RESTful API.
    We saw how the AWS Gateway is cost effective for our application. Then we looked
    at how to create the AWS API Gateway and AWS Lambda using the AWS console. We
    also created a connection between AWS Lambda and the AWS API Gateway using the
    serverless framework. Finally, we created the deep learning API project using
    the API Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be creating crossing pipelines by connected and
    obvious Lambda little bills is curious where we will learn how to make a deep
    learning pipeline.
  prefs: []
  type: TYPE_NORMAL
