- en: 3\. TensorFlow Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. TensorFlow开发
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: TensorFlow provides many resources for creating efficient workflows when developing
    data science and machine learning applications. In this chapter, you will learn
    how to use TensorBoard to visualize TensorFlow graphs and operations, TensorFlow
    Hub to access a community of users (a great source of pre-trained models), and
    Google Colab, which is a collaborative environment for developing code with others.
    You will use these tools to accelerate development by maximizing computational
    resources, transferring knowledge from pre-trained models, and visualizing all
    aspects of the model-building process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow提供了许多资源，以创建高效的工作流程，帮助开发数据科学和机器学习应用程序。在本章中，你将学习如何使用TensorBoard来可视化TensorFlow图和操作，如何使用TensorFlow
    Hub来访问一个用户社区（这是一个非常好的预训练模型资源），以及如何使用Google Colab，这是一个用于与他人共同开发代码的协作环境。你将使用这些工具通过最大化计算资源、转移预训练模型中的知识以及可视化模型构建过程的各个方面来加速开发。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, you learned how to load and process a variety of data
    types so that they can be used in TensorFlow modeling. This included tabular data
    from CSV files, image data, text data, and audio files. By the end of the chapter,
    you were able to process all these data types and produce numerical tensors from
    them that can be input for model training.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何加载和处理各种数据类型，以便在TensorFlow建模中使用。这包括来自CSV文件的表格数据、图像数据、文本数据和音频文件。到本章结束时，你应该能够处理所有这些数据类型，并从中生成数值张量，这些张量可以作为模型训练的输入。
- en: In this chapter, you will learn about TensorFlow resources that will aid you
    in your model building and help you create performant machine learning algorithms.
    You will explore the practical resources that practitioners can utilize to aid
    their development workflow, including TensorBoard, TensorFlow Hub, and Google
    Colab. TensorBoard is an interactive platform that offers a visual representation
    of the computational graphs and data produced during the TensorFlow development
    process. The platform solves the problem of visualizing various data types that
    is common in machine learning. The visualization toolkit can plot model evaluation
    metrics during the model-building process, display images, play audio data, and
    perform many more tasks that would otherwise require writing custom functions.
    TensorBoard provides simple functions for writing logs, which are subsequently
    visualized in a browser window.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习到有助于模型构建的TensorFlow资源，并帮助你创建高效的机器学习算法。你将探索实践者可以利用的实用资源，包括TensorBoard、TensorFlow
    Hub和Google Colab。TensorBoard是一个互动平台，提供了在TensorFlow开发过程中生成的计算图和数据的可视化表示。该平台解决了机器学习中常见的可视化各种数据类型的问题。该可视化工具包可以在模型构建过程中绘制模型评估指标，展示图像，播放音频数据，并执行许多其他任务，这些任务通常需要编写自定义函数。TensorBoard提供了简单的日志写入函数，日志可以在浏览器窗口中进行可视化。
- en: TensorFlow Hub is an open source library of pre-trained machine learning models
    with a code base that's available for all to use and modify for their own applications.
    Models can be imported directly into code through dedicated libraries and can
    be viewed at [https://tfhub.dev/](https://tfhub.dev/). TensorFlow Hub allows users
    to use state-of-the-art models created by experts in the field and can result
    in massively reduced training times for models that incorporate pre-trained models
    as part of a user's model.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow Hub是一个开源库，包含了预训练的机器学习模型，代码库对所有人开放，供用户用于自己的应用程序并进行修改。用户可以通过专门的库将模型直接导入代码，并可以在[https://tfhub.dev/](https://tfhub.dev/)上查看。TensorFlow
    Hub允许用户使用由领域专家创建的最先进的模型，并能显著缩短将预训练模型作为用户模型一部分时的训练时间。
- en: For example, the platform contains the ResNet-50 model, a 50-layer **Artificial
    Neural Network** (**ANN**) that achieved first place on the ILSVRC 2015 classification
    task, a competition to classify images into 1,000 distinct classes. The network
    has over 23 million trainable parameters and was trained on more than 14 million
    images. Training this model from scratch on an off-the-shelf laptop to achieve
    something close to the accuracy of the pre-trained model on TensorFlow Hub would
    take days. It is for this reason that the ability to utilize TensorFlow Hub models
    can accelerate development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，该平台包含了 ResNet-50 模型，这是一个 50 层的**人工神经网络**（**ANN**），在 ILSVRC 2015 分类任务中获得了第一名，该任务是将图像分类为
    1000 个不同的类别。该网络拥有超过 2300 万个可训练参数，并在超过 1400 万张图像上进行了训练。从头开始在一台普通笔记本电脑上训练该模型，并达到接近
    TensorFlow Hub 上预训练模型的准确性，可能需要几天时间。正因如此，利用 TensorFlow Hub 模型可以加速开发进程。
- en: The final resource you will learn about in this chapter is Google Colab, which
    is an online development environment for executing Python code and creating machine
    learning algorithms on Google servers. The environment even has access to hardware
    that contains **Graphics Processing Units** (**GPUs**) and **Tensor Processing
    Units** (**TPUs**) that can speed up model training free of charge. Google Colab
    is available at [https://colab.research.google.com/](https://colab.research.google.com/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中你将了解的最后一个资源是 Google Colab，它是一个在线开发环境，用于在 Google 服务器上执行 Python 代码并创建机器学习算法。该环境甚至可以访问包含**图形处理单元**（**GPUs**）和**张量处理单元**（**TPUs**）的硬件，可以免费加速模型训练。Google
    Colab 可通过 [https://colab.research.google.com/](https://colab.research.google.com/)
    访问。
- en: Google Colab resolves the issue of setting up a development environment for
    creating machine learning models that can be shared with others. For example,
    multiple machine learning practitioners can develop the same model and train the
    model on one hardware instance, as opposed to having to run the instance with
    their own resources. As the name suggests, the platform fosters collaboration
    among machine learning practitioners.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Google Colab 解决了设置开发环境的问题，可以创建可以与他人共享的机器学习模型。例如，多名机器学习实践者可以开发相同的模型，并在同一硬件实例上训练该模型，而不需要各自使用自己的资源来运行该实例。顾名思义，该平台促进了机器学习实践者之间的协作。
- en: Now, let's explore TensorBoard, a resource that helps practitioners understand
    and debug their machine learning workflow.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来探索 TensorBoard，这是一个帮助实践者理解和调试机器学习工作流的工具。
- en: TensorBoard
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorBoard
- en: 'TensorBoard is a visualization toolkit used to aid in machine learning experimentation.
    The platform has dashboard functionality for visualizing many of the common data
    types that a data science or machine learning practitioner may need at once, such
    as scalar values, image batches, and audio files. While such visualizations can
    be created with other plotting libraries, such as `matplotlib` or `ggplot`, TensorBoard
    combines many visualizations in an easy-to-use environment. Moreover, all that
    is required to create the visualizations is to log the trace during the building,
    fitting, and evaluating steps. TensorBoard helps in the following tasks:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 是一个用于辅助机器学习实验的可视化工具包。该平台具有仪表板功能，可以可视化数据科学或机器学习实践者可能需要的多种常见数据类型，例如标量值、图像批次和音频文件。虽然这些可视化可以通过其他绘图库创建，例如
    `matplotlib` 或 `ggplot`，但 TensorBoard 将多种可视化集成在一个易于使用的环境中。此外，创建这些可视化所需的唯一操作是在构建、拟合和评估步骤中记录跟踪信息。TensorBoard
    有助于以下任务：
- en: 'Visualizing the model graph to view and understand the model''s architecture:![Figure
    3.1: A visual representation of model graphs and functions in TensorBoard'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化模型图以查看和理解模型的架构：![图 3.1：TensorBoard 中模型图和函数的可视化表示
- en: '](img/B16341_03_01.jpg)'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_01.jpg)'
- en: 'Figure 3.1: A visual representation of model graphs and functions in TensorBoard'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：TensorBoard 中模型图和函数的可视化表示
- en: Viewing histograms and distributions of variables and tracking how they change
    over time.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看变量的直方图和分布，并跟踪它们随时间的变化。
- en: 'Displaying images, text, and audio data. For example, the following figure displays
    images from the Fashion MNIST dataset ([https://www.tensorflow.org/datasets/catalog/fashion_mnist](https://www.tensorflow.org/datasets/catalog/fashion_mnist)):![Figure
    3.2: Viewing images in TensorBoard'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示图像、文本和音频数据。例如，以下图显示了来自 Fashion MNIST 数据集的图像（[https://www.tensorflow.org/datasets/catalog/fashion_mnist](https://www.tensorflow.org/datasets/catalog/fashion_mnist)）：![图
    3.2：在 TensorBoard 中查看图像
- en: '](img/B16341_03_02.jpg)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_02.jpg)'
- en: 'Figure 3.2: Viewing images in TensorBoard'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：在 TensorBoard 中查看图像
- en: 'Plotting graphs of model evaluation metrics as a function of epoch during model training:![Figure
    3.3: Plotting model evaluation metrics in TensorBoard'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型训练过程中绘制模型评估指标随 epoch 变化的图：![图 3.3：在 TensorBoard 中绘制模型评估指标
- en: '](img/B16341_03_03.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_03.jpg)'
- en: 'Figure 3.3: Plotting model evaluation metrics in TensorBoard'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：在 TensorBoard 中绘制模型评估指标
- en: 'Dimensionality reduction for visualizing embedding vectors:![Figure 3.4: Visualizing
    embedding vectors in TensorBoard'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于可视化嵌入向量的降维：![图 3.4：在 TensorBoard 中可视化嵌入向量
- en: '](img/B16341_03_04.jpg)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_04.jpg)'
- en: 'Figure 3.4: Visualizing embedding vectors in TensorBoard'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4：在 TensorBoard 中可视化嵌入向量
- en: 'TensorBoard creates visualizations from logs that are written during the development
    process. In order to create the logs to visualize the graph, a file writer object
    needs to be initialized within your development code, providing the location for
    the logs as an argument. The file writer is typically created at the beginning
    of a Jupyter notebook or equivalent development environment before any logs are
    written. This can be done as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 从开发过程中写入的日志中创建可视化图像。为了创建日志以可视化图形，需要在开发代码中初始化文件写入对象，并将日志的位置作为参数提供。文件写入对象通常在
    Jupyter notebook 或等效开发环境的开始阶段创建，在写入任何日志之前。具体如下：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding code, the directory for writing the logs is set, and if this
    directory does not already exist a new one will be created automatically in the
    working directory after you run the preceding code. The file writer object writes
    a file to the log directory when the logs are exported. To begin tracing, the
    following code must be executed:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，设置了写入日志的目录，如果该目录尚不存在，则在运行代码后，工作目录中会自动创建一个新目录。文件写入对象在日志导出时将文件写入日志目录。要开始追踪，必须执行以下代码：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command turns on the trace that records the computation graph
    that occurs from the time the command is executed. Without turning on the trace,
    nothing is logged, and so, nothing can be visualized in TensorBoard. Once the
    tracing of the computational graph is complete, the logs can be written to the
    log directory using the file writer object, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令启动了追踪功能，用于记录从执行命令时开始的计算图。如果没有开启追踪，则不会记录任何内容，因此也无法在 TensorBoard 中可视化。计算图的追踪完成后，可以使用文件写入对象将日志写入日志目录，具体如下：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When writing the logs, you will need to employ the following parameters:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在写入日志时，需要使用以下参数：
- en: '`name`: This parameter describes the name of the summary.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：该参数描述了摘要的名称。'
- en: '`step`: This parameter describes the monotonic step value for the summary and
    can be set to `0` if the object does not change over time.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`：该参数描述了摘要的单调步长值，如果对象随时间变化不大，可以将其设置为 `0`。'
- en: '`profiler_outdir`: This parameter describes the location to write the logs
    and is required if not provided when the file writer object is defined.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profiler_outdir`：该参数描述了写入日志的位置，如果在定义文件写入对象时没有提供该参数，则此参数是必需的。'
- en: 'After logs have been written to a directory, TensorBoard can be launched through
    the command line using the following command, thereby passing in the directory
    for the logs as the `logdir` parameter:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 日志写入目录设置完成后，可以通过命令行启动 TensorBoard，使用以下命令传入日志目录作为 `logdir` 参数：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some versions of Jupyter Notebooks allow TensorBoard to be run directly within
    the notebook. However, library dependencies and conflicts can often prevent TensorBoard
    from running in notebook environments, in which case you can launch TensorBoard
    in a separate process from the command line. In this book, you will be using TensorFlow
    version 2.6 and TensorBoard version 2.1, and you will always use the command line
    to launch TensorBoard.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 某些版本的 Jupyter Notebooks 允许在笔记本中直接运行 TensorBoard。然而，库依赖关系和冲突常常会阻止 TensorBoard
    在笔记本环境中运行，在这种情况下，可以通过命令行在单独的进程中启动 TensorBoard。在本书中，你将使用 TensorFlow 版本 2.6 和 TensorBoard
    版本 2.1，并且始终通过命令行启动 TensorBoard。
- en: In the first exercise, you will learn how to use TensorBoard to visualize a
    graph process. You will create a function to perform tensor multiplication and
    then visualize the computational graph in TensorBoard.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个练习中，你将学习如何使用 TensorBoard 可视化图计算过程。你将创建一个执行张量乘法的函数，并在 TensorBoard 中可视化计算图。
- en: 'Exercise 3.01: Using TensorBoard to Visualize Matrix Multiplication'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 3.01：使用 TensorBoard 可视化矩阵乘法
- en: In this exercise, you will perform matrix multiplication of `7x7` matrices with
    random values and trace the computation graph and profiling information. Following
    that, you will view the computation graph using TensorBoard. This exercise will
    be performed in a Jupyter notebook. Launching TensorBoard will require running
    a command on the command line, as shown in the final step.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Jupyter notebook and import the TensorFlow library, and then set
    a seed for reproducibility. Since you are generating random values, setting a
    seed will ensure that the values generated are the same if the seed set is the
    same each time the code is run:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a `file_writer` object and set the directory for which the logs will
    be stored:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a TensorFlow function to multiply two matrices together:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create sample data in the form of two tensors with the shape `7x7` with random variables:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Turn on graph tracing using TensorFlow''s `summary` class:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Apply the function that was created in *step 3* to the sample tensors that
    were created in *step 4*. Next, export the trace to the `log` directory, set the
    `name` argument for the graph for reference, and the `log` directory for the `profiler_outdir`
    argument. The `step` argument indicates the monotonic step value for the summary;
    the value should be nonzero if the values being traced vary, in which case they
    can be visualized with a step size dictated by this argument. For static objects,
    such as your graph trace here, it should be set to zero:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, launch TensorBoard in the current working directory using the command
    line to view a visual representation of the graph. TensorBoard can be viewed in
    a web browser by visiting the URL that is provided after launching TensorBoard:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For those running Windows, in the Anaconda prompt, run the following:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By running the preceding code, you will be able to visualize the following
    model graph:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.5: A visual representation of matrix multiplication in TensorBoard'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_05.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.5: A visual representation of matrix multiplication in TensorBoard'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: In TensorBoard, you can view the process of a tensor multiplying the two matrices
    to produce another matrix. By selecting the various elements, you can view information
    about each individual object in the computational graph, depending on the type
    of object. Here, you have created two tensors, named `x` and `y`, represented
    by the nodes at the bottom. By selecting one of the nodes, you can view attributes
    about the tensor, including its data type (`float`), its user-specified name (`x`
    or `y`), and the name of the output node (`MatMul`). These nodes representing
    the input tensors are then input into another node representing the tensor multiplication
    process labeled `MatMul` after the TensorFlow function. Selecting this node reveals
    attributes of the function, including the input arguments, the input nodes (`x`
    and `y`), and the output node (`Identity`). The final two nodes, labeled `Identity`
    and `identity_RetVal`, represent the creation of the output tensor.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TensorBoard 中，你可以查看一个张量如何将两个矩阵相乘以生成另一个矩阵。通过选择不同的元素，你可以查看计算图中每个对象的相关信息，具体取决于对象的类型。在这里，你创建了两个张量，命名为
    `x` 和 `y`，它们由底部的节点表示。通过选择其中一个节点，你可以查看有关张量的属性，包括它的数据类型（`float`）、用户指定的名称（`x` 或 `y`），以及输出节点的名称（`MatMul`）。这些表示输入张量的节点然后被输入到另一个节点，该节点表示张量乘法过程，标记为
    `MatMul`，它是在 TensorFlow 函数之后的节点。选择该节点后，你可以查看该函数的属性，包括输入参数、输入节点（`x` 和 `y`）和输出节点（`Identity`）。最后两个节点，标记为
    `Identity` 和 `identity_RetVal`，表示输出张量的创建。
- en: In this exercise, you used TensorBoard to visualize a computational graph. You
    created a simple function to multiply two tensors together and you recorded the
    process by tracing the graph and logging the results. After logging the graph,
    you were able to visualize it by launching TensorBoard and directing the tool
    to the location of the logs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次练习中，你使用 TensorBoard 可视化计算图。你创建了一个简单的函数，将两个张量相乘，并通过追踪图并记录结果来记录过程。在记录了计算图之后，你可以通过启动
    TensorBoard 并将工具指向日志的存储位置来可视化它。
- en: In the first activity, you will practice using TensorBoard to visualize a more
    complicated tensor transformation. In fact, any tensor process and transformation
    can be visualized in TensorBoard and the process demonstrated in the previous
    exercise is a good guide for creating and writing logs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个活动中，你将练习使用 TensorBoard 可视化一个更复杂的张量转换。实际上，任何张量过程和转换都可以在 TensorBoard 中可视化，前一个练习中演示的过程是创建和编写日志的好指南。
- en: 'Activity 3.01: Using TensorBoard to Visualize Tensor Transformations'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 3.01：使用 TensorBoard 可视化张量转换
- en: You are given two tensors of shape `5x5x5`. You are required to create TensorFlow
    functions to perform a tensor transformation and view a visual representation
    of the transformation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个形状为`5x5x5`的张量。你需要创建 TensorFlow 函数来执行张量转换，并查看转换的可视化表示。
- en: 'The steps you will take are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你将采取的步骤如下：
- en: Import the TensorFlow library and set the seed to `42`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 TensorFlow 库并将随机种子设置为`42`。
- en: Set a log directory and initialize a file writer object to write the trace.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置日志目录并初始化文件写入对象以写入跟踪。
- en: Create a TensorFlow function to multiply two tensors, add a value of `1` to
    all elements in the resulting tensor using the `ones_like` function to create
    a tensor of the same shape as the result of the matrix multiplication. Then, apply
    a `sigmoid` function to each value of the tensor.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 TensorFlow 函数，将两个张量相乘，并使用 `ones_like` 函数向结果张量的所有元素加上一个值 `1`，以创建一个与矩阵乘法结果相同形状的张量。然后，对张量的每个值应用
    `sigmoid` 函数。
- en: Create two tensors with the shape `5x5x5`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个形状为`5x5x5`的张量。
- en: Turn on graph tracing.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开图形追踪。
- en: Apply the function to the two tensors and export the trace to the log directory.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数应用于这两个张量，并将追踪记录导出到日志目录。
- en: 'Launch TensorBoard in the command line and view the graph in a web browser:![Figure
    3.6: A visual representation of tensor transformation in TensorBoard'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中启动 TensorBoard，并在网页浏览器中查看图形：![图 3.6：TensorBoard 中张量转换的可视化表示
- en: '](img/B16341_03_06.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16341_03_06.jpg)'
- en: 'Figure 3.6: A visual representation of tensor transformation in TensorBoard'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6：TensorBoard 中张量转换的可视化表示
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found via [this link](B16341_Solution_ePub.xhtml#_idTextAnchor259).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以通过[这个链接](B16341_Solution_ePub.xhtml#_idTextAnchor259)找到。
- en: 'However, TensorBoard is not only for visualizing computational graphs. Images,
    scalar variables, histograms, and distributions can all be viewed in TensorBoard
    by writing them to the log directory using the appropriate TensorFlow `summary`
    method. For example, images can be written to the logs as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output of this will be a file added to the log directory named `Training
    data` that contains the images written by the file writer. Images can be viewed
    in TensorBoard by selecting the tab labeled `IMAGES`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same manner, scalar variables can be written to the logs for viewing
    in TensorBoard as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Audio files can be written to the logs for playback in TensorBoard in the following way:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A histogram can be logged by passing in data as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In each of these examples of writing data to the logs, the `step` argument is
    set to zero since this is a required argument and must not be null. Setting the
    argument to zero indicates that the value is static and does not change with time.
    Each data type will be visible in a different tab in TensorBoard.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will write images to TensorBoard so that they can
    be viewed directly within the platform. With TensorBoard, this becomes a facile
    process that otherwise would require writing custom code to view images. You may
    want to visualize images of batches to verify the labels, check the augmentation
    process, or validate the images in general.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.02: Using TensorBoard to Visualize Image Batches'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use TensorBoard to view image batches. You will create
    a file writer and a data generator for the images, and then write one batch of
    images to the log files. Finally, you will view the images in TensorBoard.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the images in the `image_data` folder here: [https://packt.link/1ue46](https://packt.link/1ue46).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the TensorFlow library and the `ImageDataGenerator` class:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a `file_writer` object and set the directory to which the logs will
    be stored:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Initialize an `ImageDataGenerator` object:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use the data generator''s `flow_from_directory` method to create a batch image
    loader:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make sure you change the path (highlighted) to the location of the directory
    on your system. If you're running the Jupyter notebook from the same directory
    where the dataset is stored, you can run the preceding code without any modification.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Take the images from the first batch and write them to the logs using the file writer:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Launch TensorBoard in the command line to view a visual representation of the graph.
    TensorBoard can be viewed in a web browser by visiting the URL that is provided
    after launching TensorBoard. The default URL provided is `http://localhost:6006/`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For those running Windows, in the Anaconda prompt, run the following:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Images in the directory will be displayed in TensorBoard as follows:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.7: Viewing a batch of images in TensorBoard'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_07.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.7: Viewing a batch of images in TensorBoard'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Images on your system may vary.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中的图像可能会有所不同。
- en: The result in TensorBoard is the images from the first batch. You can see that
    they are images of boats and planes. TensorBoard also provides you with the ability
    to adjust the brightness and contrast of the images; however, that affects only
    the images in TensorBoard and not the underlying image data.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 中的结果是来自第一批次的图像。你可以看到它们是船和飞机的图像。TensorBoard 还提供了调整图像亮度和对比度的功能；然而，这仅会影响
    TensorBoard 中的图像，而不会影响底层的图像数据。
- en: In this exercise, you viewed a batch of images from an image data generator
    using TensorBoard. This is an excellent way to verify the quality of your training
    data. It may not be necessary to verify every image for quality, but sample batches
    can be viewed easily using TensorBoard.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你通过 TensorBoard 查看了一个图像数据生成器的图像批次。这是验证训练数据质量的一个极好方法。虽然不必验证每一张图像的质量，但可以通过
    TensorBoard 轻松查看样本批次。
- en: 'This section has introduced one resource that TensorFlow offers to help data
    science and machine learning practitioners understand and visualize their data
    and algorithms: TensorBoard. You have used the resource to visualize computational
    graphs and image batches. In the next section, you will explore TensorFlow Hub,
    which is a repository for machine learning modules that can be accessed and incorporated
    into custom applications easily. The models are created by experts in the field,
    and you will learn how to access them for your own applications.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了 TensorFlow 提供的一项资源，帮助数据科学和机器学习从业者理解和可视化数据和算法：TensorBoard。你已使用该资源可视化计算图和图像批次。在下一节中，你将探索
    TensorFlow Hub，它是一个可以轻松访问并集成到自定义应用中的机器学习模块库。这些模型由该领域的专家创建，你将学习如何将它们应用于自己的项目。
- en: TensorFlow Hub
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow Hub
- en: 'TensorFlow Hub is an online repository of machine learning modules. The modules
    contain assets with the associated weights that are needed to use any model (for
    instance, for predictions or transfer learning) where the knowledge gained in
    training one model is used to solve a different but related problem. These modules
    can be used directly to create applications that they were trained for, or they
    can be used as a starting point to build new applications. The platform can be
    visited at the following URL: [https://tfhub.dev/](https://tfhub.dev/). When you
    visit the website, you will be greeted by the following page:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow Hub 是一个机器学习模块的在线库。该模块包含了使用任何模型所需的资产及其相关权重（例如，用于预测或迁移学习），在迁移学习中，训练一个模型所获得的知识被用于解决不同但相关的问题。这些模块可以直接用于创建它们所训练的应用，或者可以作为构建新应用的起点。可以通过以下网址访问该平台：[https://tfhub.dev/](https://tfhub.dev/)。当你访问该网站时，会看到以下页面：
- en: '![Figure 3.8: TensorFlow Hub home page'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8：TensorFlow Hub 首页'
- en: '](img/B16341_03_08.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16341_03_08.jpg)'
- en: 'Figure 3.8: TensorFlow Hub home page'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8：TensorFlow Hub 首页
- en: 'Once here, you can browse through models of various domains. The most popular
    domains include image, text, and video; many models exist for these domains:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以浏览各个领域的模型。最受欢迎的领域包括图像、文本和视频；这些领域中有许多模型：
- en: '![Figure 3.9: The model domains available on TensorFlow Hub'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9：TensorFlow Hub 上可用的模型领域'
- en: '](img/B16341_03_09.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16341_03_09.jpg)'
- en: 'Figure 3.9: The model domains available on TensorFlow Hub'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9：TensorFlow Hub 上可用的模型领域
- en: There are many models available on TensorFlow Hub that take images as their
    input data. These models are generally created for tasks including image classification,
    segmentation, embedding, generation, augmentation, and style transfer. Models
    created for text data are generally used for text embedding, and models used on
    video data are used for video classification. There are also audio data models
    for tasks including command detection and pitch extraction. TensorFlow Hub is
    consistently updated with new state-of-the-art models that can be used for all
    sorts of applications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow Hub 上有许多模型可供使用，这些模型以图像作为输入数据。通常，这些模型用于图像分类、分割、嵌入、生成、增强和风格迁移等任务。为文本数据创建的模型通常用于文本嵌入，而用于视频数据的模型则用于视频分类。还有用于音频数据的模型，涉及命令检测和音高提取等任务。TensorFlow
    Hub 不断更新最新的先进模型，这些模型可用于各种应用。
- en: 'Selecting a model will land you on the following page, which will tell you
    information about the model, such as the size of the model, its architecture,
    the dataset on which it was trained, and the URL for reference:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10: The page of a TensorFlow Hub model'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16341_03_10.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.10: The page of a TensorFlow Hub model'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: When referencing models for your own applications, you will need the URL of
    the model's page to load it in.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Models can be accessed in notebook environments from TensorFlow Hub by utilizing
    the `tensorflow_hub` library. The library can be imported as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Models can be loaded by utilizing the library''s `load` function and passing
    in the reference URL of the model:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Assets of the model''s module, such as its architecture, can be viewed by accessing
    the `signatures` attribute. Each model may have different keys within the `signatures`
    attribute; however, much of the pertinent information will be contained within
    the `default` key:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The model can also be used directly in training by treating the whole model
    like a single Keras layer using the `KerasLayer` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The process of using the model as layers for your own application is known as
    **transfer learning**, which will be explored in more depth in later chapters.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing a model in TensorFlow Hub can be done by writing the model graph to
    the logs using a file writer as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the following exercise, you will download a model from TensorFlow Hub. After
    loading in the model, you will view the model's architecture using TensorBoard.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.03: Downloading a Model from TensorFlow Hub'
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will download a model from TensorFlow Hub and then view
    the architecture of the model in TensorBoard. The model that will be downloaded
    is the `InceptionV3` model. This model was created in TensorFlow 1 and so requires
    some additional steps for displaying the model details as we''re using TensorFlow
    2\. This model contains two parts: a part that includes convolutional layers to
    extract features from the images, and a classification part with fully connected
    layers.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: The distinct layers will be visible in TensorBoard as they have been named appropriately
    by the original author.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get the `InceptionV3` model here: [https://tfhub.dev/google/imagenet/inception_v3/classification/5](https://tfhub.dev/google/imagenet/inception_v3/classification/5).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this exercise:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the following libraries from TensorFlow:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The TensorFlow and TensorFlow Hub libraries are required to import and build
    the model, and the other classes from the TensorFlow library are required to visualize
    models that are created in TensorFlow 1 using TensorFlow 2, which is what you
    are using in this book.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a variable for the logs to be stored:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Load in a model module by using the `load` method from the `tensorflow_hub`
    library and pass in the URL for the model:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Load the model from the `signatures` attribute of the module:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Write the model graph to TensorBoard using a file writer:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Launch TensorBoard in the command line to view a visual representation of the
    graph. TensorBoard can be viewed in a web browser by visiting the URL that is
    provided after launching TensorBoard:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For those running Windows, in the Anaconda prompt, run the following:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should get something like the following image:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.11: The architecture of the InceptionV3 model as viewed in TensorBoard'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_11.jpg)'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.11: The architecture of the InceptionV3 model as viewed in TensorBoard'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: The result in TensorBoard is the architecture of the `InceptionV3` model. Here,
    you can view all the details about each layer of the model, including the input,
    output, and activation functions.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you successfully downloaded a model into a Jupyter notebook
    environment using the TensorFlow Hub library. Once the model was loaded into the
    environment, you visualized the architecture of the model using TensorBoard. This
    can be a helpful way to visualize your model's architecture for debugging purposes.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have explored how to use TensorFlow Hub as a way to utilize
    the many brilliant models that have been created by experts in the machine learning
    field. As you will discover in later chapters, these models can be used to solve
    slightly different applications than those for which they were developed; this
    is known as transfer learning. In the next section, you will learn how to use
    Google Colab, an environment similar to Jupyter Notebooks that can be used to
    collaboratively develop applications in Python online, on Google servers.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Google Colab
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Colab enables users to execute code on Google servers and is designed specifically
    for data science practitioners to develop code for machine learning in a collaborative
    environment. The platform is available at [https://colab.research.google.com/](https://colab.research.google.com/)
    and offers an opportunity to develop in the Python programming language directly
    within a web browser with no code executing on your local machine. The environment
    comes pre-loaded with up-to-date libraries for data science and machine learning
    and offers a convenient alternative to setting up a development environment using
    Jupyter Notebooks. Moreover, the platform has a free tier that includes access
    to GPUs and TPUs, there is no configuration required, and sharing notebooks between
    collaborators is easy.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Google Colab has a very similar development experience to Jupyter Notebooks,
    and there are some advantages and disadvantages of using Google Colab over Jupyter Notebooks.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Google Colab
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a few of the main advantages of using Google Colab:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '**Collaborative**: Many users can access the same notebook and work collaboratively
    together.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed environment**: Google Colab runs on Google servers, which can be
    helpful if local computational resources are limited. There is no need to set
    up a development environment since many packages come pre-installed.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy accessibility**: Google Colab saves directly to Google Drive, offering
    seamless integration. Since the notebooks are saved in the cloud, they are available
    wherever Google Drive can be accessed.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accelerated training times**: GPU and TPU servers are available, which can
    offer accelerated training times for training machine learning models, especially
    ANNs with many hidden layers.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive widgets**: Widgets can be added to a notebook that can offer
    a way to easily vary input parameters and variables in an interactive manner.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages of Google Colab
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a few of the disadvantages of using Google Colab:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '**Restrained runtime**: Only two versions of TensorFlow are available on Google
    Colab, 1.X and 2.X, and they are updated, so specific functions may change over
    time, resulting in broken code. Additionally, the versions of TensorFlow may not
    interact well with other packages.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet dependence**: Since the Python code is executed on Google servers,
    Google Colab can only be accessed with an internet connection.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No automatic save**: Notebooks must be saved consistently, which is different
    from the automatic saving of Jupyter Notebooks.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session timeout**: Notebooks running on the virtual machines have a maximum
    lifetime of 12 hours and environments that are left idle for too long will be disconnected.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geoplotlib` may not be capable of displaying interactive elements due to incompatibilities
    with the pre-loaded libraries.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development on Google Colab
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since Google Colab uses notebooks, the development environment is very similar
    to Jupyter Notebooks. In fact, IPython notebooks can be loaded into Google Colab.
    They can be loaded in via direct upload, Google Drive, or a GitHub repository.
    Alternatively, the platform provides example notebooks to get started. When you
    navigate to the platform, [https://colab.research.google.com/](https://colab.research.google.com/),
    you will be greeted by the following screen, which provides notebooks to open
    or the option to select a new notebook to begin developing:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12: The home page of Google Colab'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16341_03_12.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.12: The home page of Google Colab'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'If a new notebook is selected, you are greeted by the following screen, which
    may be very reminiscent of developing in Jupyter Notebooks and has many of the
    same features. You can create code or text snippets in the exact same way and
    many practitioners find the transition from Jupyter seamless:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13: A blank notebook in Google Colab'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16341_03_13.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.13: A blank notebook in Google Colab'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, you will use Google Colab to import and manipulate data.
    One of the main differences between working in Google Colab compared to Jupyter
    Notebooks is that by working in Google Colab, you are developing on a remote server.
    This means that any data for analysis or training models must either be loaded
    on Google Drive or available directly online. In the following exercise, you will
    import CSV data directly from a GitHub repository for this book.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.04: Using Google Colab to Visualize Data'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will load a dataset from a GitHub repository that has
    bias correction data for next-day maximum and minimum air temperature forecasts
    for Seoul, South Korea.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the `Bias_correction_ucl.csv` file here: [https://packt.link/8kP3j](https://packt.link/8kP3j).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: To perform the exercise, you will have to navigate to [https://colab.research.google.com/](https://colab.research.google.com/)
    and create a new notebook to work in. You will need to connect to a GPU-enabled
    environment to speed up TensorFlow operations such as tensor multiplication. Once
    the data has been loaded into the development environment, you will view the first
    five rows. Next, you'll drop the `Date` field since matrix multiplication requires
    numerical fields. Then, you will perform tensor multiplication of the dataset
    with a tensor or uniformly random variables.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this exercise:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Import TensorFlow and check the version of the library:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should get the version of the TensorFlow library:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.14: The output of the version of TensorFlow available in Google
    Colab'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_14.jpg)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.14: The output of the version of TensorFlow available in Google Colab'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the `Edit` tab, go to `Notebook Settings`, and then select `GPU`
    from the `Hardware Acceleration` dropdown. Verify that the GPU is enabled by displaying
    the GPU device name:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You should get the name of the GPU device:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.15: The GPU device name'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_15.jpg)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.15: The GPU device name'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the `pandas` library and load in the dataset directly from the GitHub repository:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'View the first five rows of the dataset using the `head` method:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should get the following output:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.16: The output of the first five rows of the DataFrame'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_16.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.16: The output of the first five rows of the DataFrame'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drop the `Date` field since you''ll be performing matrix multiplication, which
    requires numerical fields:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Import NumPy, convert the DataFrame to a NumPy array, and then create a TensorFlow
    tensor of uniform random variables. The value of the first axis of the tensor
    will be equal to the number of fields of the dataset, and the second axis will
    be equal to `1`:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Perform tensor multiplication on the dataset and the random tensor using TensorFlow''s
    `matmul` function and print the result:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You should get output like the following:'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.17: The output of the tensor multiplication'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_17.jpg)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.17: The output of the tensor multiplication'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: The result from executing the multiplication is a new tensor with the shape `7752x1`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you learned how to use Google Colab. You observed that Google
    Colab provides a convenient environment to build machine learning models and comes
    pre-loaded with many of the libraries that may be needed for any machine learning
    application. You can also see that the latest versions of the libraries are used.
    Unfortunately, the versions of TensorFlow cannot be modified, so using Google
    Colab in production environments may not be the most appropriate application.
    However, it is great for development environments.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: In the following activity, you will practice further how to use Google Colab
    in a development environment. You will use TensorFlow Hub in the same way that
    was achieved in Jupyter Notebooks. This activity will be similar to what was achieved
    in *Exercise 2.04*, *Loading Text Data for TensorFlow Models*, in which text data
    was processed by using a pre-trained word embedding model. Utilizing pre-trained
    models will be covered in future chapters, but this activity will show how easy
    it is to utilize a pre-trained model from TensorFlow Hub.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.02: Performing Word Embedding from a Pre-Trained Model from TensorFlow
    Hub'
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this activity, you will practice working in the Google Colab environment.
    You will download a universal sentence encoder from TensorFlow Hub from the following
    URL: [https://tfhub.dev/google/universal-sentence-encoder/4](https://tfhub.dev/google/universal-sentence-encoder/4).
    Once the model has been loaded into memory, you will use it to encode some sample
    text.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Import TensorFlow and TensorFlow Hub and print the version of the library.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the handle for the module as the URL for the universal sentence encoder.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the TensorFlow Hub `KerasLayer` class to create a hub layer, passing in
    the following arguments: `module_handle`, `input_shape`, and `dtype`.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a list containing a string, `The TensorFlow Workshop`, to encode with
    the encoder.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply `hub_layer` to the text to embed the sentence as a vector.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your final output should be like the following:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.18: Expected output of Activity 3.02'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16341_03_18.jpg)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.18: Expected output of Activity 3.02'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found via [this link](B16341_Solution_ePub.xhtml#_idTextAnchor260).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: This section introduced Google Colab, an online development environment used
    to run Python code on Google servers. This can allow any practitioner with an
    internet connection to begin building machine learning models. Moreover, you can
    browse the selection of pre-trained models to begin creating models for your own
    applications using another resource you learned about in this chapter, TensorFlow
    Hub. Google Colab provides practitioners with a zero-configuration, up-to-date
    environment, and even access to GPUs and TPUs for faster model training times.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you used a variety of TensorFlow resources, including TensorBoard,
    TensorFlow Hub, and Google Colab. TensorBoard offers users a method to visualize
    computational model graphs, metrics, and any experimentation results. TensorFlow
    Hub allows users to accelerate their machine learning development using pre-trained
    models built by experts in the field. Google Colab provides a collaborative environment
    to develop machine learning models on Google servers. Developing performant machine
    learning models is an iterative process of trial and error, and the ability to
    visualize every step of the process can help practitioners debug and improve their
    models. Moreover, understanding how experts in the field have built their models
    and being able to utilize the pre-learned weights in the networks can drastically
    reduce training time. All of these resources are used to provide an environment
    to develop and debug machine learning algorithms in an efficient workflow.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will begin creating your own machine learning models
    in TensorFlow, beginning with regression models. Regression models aim to predict
    continuous variables from input data. You will make your regression models by
    utilizing Keras layers, which are useful for building ANNs.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
