["```\ndef get_prices_by_year(self):\n   df = self.modify_first_year_data()\n   for i in range(1, len(self.num_years)):\n       df = pd.concat([df, pd.DataFrame(self.get_year_data(year=self.num_years[i], normalized=True))], axis=1)\n   df = df[:self.num_days]\n   quarter_col = []\n   num_days_in_quarter = self.num_days // 4\n   for j in range(0, len(self.quarter_names)):\n       quarter_col.extend([self.quarter_names[j]]*num_days_in_quarter)\n   quarter_col = pd.DataFrame(quarter_col)\n   df = pd.concat([df, quarter_col], axis=1)\n   df.columns = self.num_years + ['Quarter']\n   df.index.name = 'Day'\n   df = self.fill_nans_with_mean(df)\n   return df\n```", "```\ndef fill_nans_with_mean(self, df):\n   years = self.num_years[:-1]\n   df_wo_last_year = df.loc[:,years]\n   df_wo_last_year = df_wo_last_year.fillna(df_wo_last_year.mean())\n   df_wo_last_year[self.num_years[-1]] = df[self.num_years[-1]]\n   df= df_wo_last_year\n\n   return df\n```", "```\ndef normalized_data_col(self, df):\n   price_normalized = pd.DataFrame()\n   date_list = list(df.Date)\n   self.num_years = sorted(list(set([date_list[i].year for i in range(0, len(date_list))])))\n   for i in range(0, len(self.num_years)):\n       prices_data = self.get_year_data(year=self.num_years[i], normalized=False)\n       prices_data = [(prices_data[i] - np.mean(prices_data)) / np.std(prices_data) for i in range(0, len(prices_data))]\n       prices_data = [(prices_data[i] - prices_data[0]) for i in range(0, len(prices_data))]\n       price_normalized = price_normalized.append(prices_data, ignore_index=True)\n   return price_normalized\n```", "```\nkernel = gpflow.kernels.RBF(2, lengthscales=1, variance=63) + gpflow.kernels.White(2, variance=1e-10)\n```", "```\ndef make_gp_predictions(self, start_year, end_year, pred_year, pred_quarters = []):\n   start_year, end_year, pred_year= int(start_year),int(end_year), int(pred_year)\n   years_quarters = list(range(start_year, end_year + 1)) + ['Quarter']\n   years_in_train = years_quarters[:-2]\n   price_df = self.preprocessed_data.prices_by_year[self.preprocessed_data.prices_by_year.columns.intersection(years_quarters)]\n   num_days_in_train = list(price_df.index.values)\n   #Generating X and Y for Training\n   first_year_prices = price_df[start_year]\n   if start_year == self.preprocessed_data.num_years[0]:\n       first_year_prices = (first_year_prices[first_year_prices.iloc[:] != 0])\n       first_year_prices = (pd.Series([0.0], index=[first_year_prices.index[0]-1])).append(first_year_prices)\n   first_year_days = list(first_year_prices.index.values)\n   first_year_X = np.array([[start_year, day] for day in first_year_days])\n   X = first_year_X\n   Target = np.array(first_year_prices)\n   for year in years_in_train[1:]:\n       current_year_prices = list(price_df.loc[:, year])\n       current_year_X = np.array([[year, day] for day in num_days_in_train])\n       X = np.append(X, current_year_X, axis=0)\n       Target = np.append(Target, current_year_prices)\n   final_year_prices = price_df[end_year]\n   final_year_prices = final_year_prices[final_year_prices.iloc[:].notnull()]\n   final_year_days = list(final_year_prices.index.values)\n   if pred_quarters is not None:\n       length = 63 * (pred_quarters[0] - 1)\n       final_year_days = final_year_days[:length]\n       final_year_prices = final_year_prices[:length]\n   final_year_X = np.array([[end_year, day] for day in final_year_days])\n   X = np.append(X, final_year_X, axis=0)\n   Target = np.append(Target, final_year_prices)\n   if pred_quarters is not None:\n       days_for_prediction = [day for day in\n                              range(63 * (pred_quarters[0]-1), 63 * pred_quarters[int(len(pred_quarters) != 1)])]\n   else:\n       days_for_prediction = list(range(0, self.preprocessed_data.num_days))\n   x_mesh = np.linspace(days_for_prediction[0], days_for_prediction[-1]\n                        , 2000)\n   x_pred = ([[pred_year, x_mesh[i]] for i in range(len(x_mesh))])\n   X = X.astype(np.float64)\n   Target = np.expand_dims(Target, axis=1)\n   kernel = gpflow.kernels.RBF(2, lengthscales=1, variance=63) + gpflow.kernels.White(2, variance=1e-10)\n   self.gp_model = gpflow.models.GPR(X, Target, kern=kernel)\n   gpflow.train.ScipyOptimizer().minimize(self.gp_model)\n   y_mean, y_var = self.gp_model.predict_y(x_pred)\n   return x_mesh, y_mean, y_var\n```"]