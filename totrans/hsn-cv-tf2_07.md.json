["```\nboxes = []\nfor row in range(grid_height):\n    for col in range(grid_width):\n        for b in range(num_box):\n            tx, ty, tw, th = network_output[row, col, b, :4]\n            box_confidence = network_output[row, col, b, 4]\n            classes_scores = network_output[row, col, b, 5:]\n\n            bx = sigmoid(tx) + col\n            by = sigmoid(ty) + row\n\n            # anchor_boxes is a list of dictionaries containing the size of each anchor\n            bw = anchor_boxes[b]['w'] * np.exp(tw)\n            bh = anchors_boxes[b]['h'] * np.exp(th)\n\n            boxes.append((bx, by, bw, bh, box_confidence, classes_scores))\n```", "```\n# Confidence is a float, classes is an array of size NUM_CLASSES\nfinal_scores = box_confidence * classes_scores\n\nOBJECT_THRESHOLD = 0.3\n# filter will be an array of booleans, True if the number is above threshold\nfilter = classes_scores >= OBJECT_THRESHOLD\n\nfiltered_scores = class_scores * filter\n```", "```\nclass_id = np.argmax(filtered_scores)\nclass_label = CLASS_LABELS[class_id]\n```", "```\nsorted_boxes = sort_boxes_by_confidence(boxes)\nids_to_suppress = []\n\nfor maximum_box in sorted_boxes:\n    for idx, box in enumerate(boxes):\n        iou = compute_iou(maximum_box, box)\n        if iou > iou_threshold:\n            ids_to_suppress.append(idx)\n\nprocessed_boxes = np.delete(boxes, ids_to_suppress)\n```", "```\ninput_image = Input(shape=(IMAGE_H, IMAGE_W, 3))\ntrue_boxes = Input(shape=(1, 1, 1, TRUE_BOX_BUFFER , 4))\n\ninception = InceptionV3(input_shape=(IMAGE_H, IMAGE_W,3), weights='imagenet', include_top=False)\n\nfeatures = inception(input_image)\nGRID_H, GRID_W =  inception.get_output_shape_at(-1)[1:3]\n# print(grid_h, grid_w)\noutput = Conv2D(BOX * (4 + 1 + CLASS), \n                        (1, 1), strides=(1,1), \n                        padding='same', \n                        name='DetectionLayer', \n                        kernel_initializer='lecun_normal')(features)\n\noutput = Reshape((GRID_H, GRID_W, BOX, 4 + 1 + CLASS))(output)\n```"]