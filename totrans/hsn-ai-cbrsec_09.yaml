- en: Securing User Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the fieldof cybersecurity, **Artificial Intelligence** (**AI**) is assuming
    an increasingly important role in the protection of users' sensitive information,
    including the credentials they use to access their network accounts and applications
    in order to prevent abuse, such as identity theft.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication abuse prevention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account reputation scoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication with keystroke recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Biometric authentication with facial recognition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication abuse prevention
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a context such as the current one, characterized by a growing disintermediation
    of traditional services offered to users in digital forms (such as e-commerce,
    home banking, and so on), it is important to correctly identify and prevent possible
    threats that target use's digital identity, such as the risk of identity theft.
    Moreover, with the rapid spread of the **Internet of Things** (**IoT**), the possibility
    of unauthorized access obtained by exploiting counterfeit credentials (or by stealing
    them from legitimate owners) is more probable than ever before.
  prefs: []
  type: TYPE_NORMAL
- en: It is the dimension of cyberspace with its increased attack surface, which is
    determined by the exponential number of connections that can be established between
    humans and machines, and between machines and machines, that makes the risk of
    information leakage much more likely.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting user accounts is not only a question of data integrity but also a
    reputational risk for any corporate from which legal responsibilities toward third
    parties may also arise.
  prefs: []
  type: TYPE_NORMAL
- en: Just think of all the issues concerning the spread of fake accounts, which are
    created on purpose to capture confidential and sensitive information from users.
    There's also the issue of troll accounts, which can contribute to confusing and
    conditioning legitimate users who are not aware of the fictitious nature of these
    counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: With the diffusion of automated services, which are increasingly managed by
    algorithms, it also becomes essential, from a legal point of view, to guarantee
    the correctness and legitimacy of sensitive information collected through automated
    procedures; a corporate can be called upon to respond in accordance with the principle
    of accountability, which was established by the EU's **General Data Privacy Regulation**
    (**GDPR**).
  prefs: []
  type: TYPE_NORMAL
- en: Due to this, it is necessary to put in place all the organizational measures
    necessary to guarantee the security of user accounts, which is done by monitoring
    suspicious activities such as attempts to compromise passwords.
  prefs: []
  type: TYPE_NORMAL
- en: One of the weaknesses of protecting user accounts is the poor protection of
    passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Are passwords obsolete?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passwords have always been the main tool to guarantee the protection of user
    accounts over time; however, they have shown their limits.
  prefs: []
  type: TYPE_NORMAL
- en: As the number of online services (and different access platforms that you can
    use to access these services) grows, the number of passwords that the user must
    memorize has grown accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Since the robustness in the choice of alphanumeric codes constituting reliable
    passwords is opposed to their ease of management, users often use the same password
    for multiple accounts and services.
  prefs: []
  type: TYPE_NORMAL
- en: This contributes to the growth of the attack surface, raising the risk of being
    compromised. If an attacker succeeds in stealing a user's credentials (for example,
    their personal email account), it is very likely that they can also violate other
    credentials and therefore, succeed in stealing the victim's digital identity.
  prefs: []
  type: TYPE_NORMAL
- en: The risk of identity theft is, in fact, one of the major threats that can affect
    a user. Once the victim's identity has been violated, the attacker can undertake
    a series of illegal activities, such as money laundering through the creation
    of bank accounts on behalf of the victim, disguised behind the credentials of
    the user who is often unaware of the illicit activities that take place.
  prefs: []
  type: TYPE_NORMAL
- en: It is no coincidence that, over time, security measures have been adopted that
    integrate password authentication and account authorization procedures. These
    deploy monitoring tasks aimed at increasing contextual awareness, that is, analyzing
    and circumscribing activities related to the use of access credentials within
    a context considered normal (or otherwise suspect) for the individual user.
  prefs: []
  type: TYPE_NORMAL
- en: The protection of a user's account is not limited to the simple verification
    of the correctness of the entered password and the correspondence of the password
    to the user account, but also the various account activities that are recorded,
    such as simultaneous access from IP addresses belonging to different geographical
    areas, or the use of different devices, such as PCs, and smartphones, browsers,
    and operating systems that are unusual or have never been used before.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of this monitoring is obviously to detect possible credential
    theft by the attackers, who attempt to access user accounts by exploiting previously
    violated passwords.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this level of contextual security awareness, it is necessary to integrate
    monitoring activities that occur on user accounts with anomaly detection procedures
    that make use of automated learning algorithms, thus learning to discriminate
    between different suspicious activities based on the habits and behavior of the
    users themselves.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to replace the same passwords with authentication procedures
    that make use of a user's biometric credentials, such as their iris, voice, fingerprints,
    or face.
  prefs: []
  type: TYPE_NORMAL
- en: In this situation, it is not appropriate to limit the recognition procedure
    to a single biometric piece of evidence, which, although robust, is still spoofable
    (falsifiable by taking advantage of the limitations and vulnerabilities affecting
    the sensors used to verify the biometric data). Instead, we should integrate this
    with different methods of verifying user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Common authentication practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure that the credentials really belong to the legitimate owner of the
    account, over time, various forms of verification have been introduced, some of
    which are based on the adoption of second authentication factors, such as the
    insertion of temporary passwords that are transmitted as OTP codes. These are
    delivered via SMS messages to the user's phone number, or via the email address
    associated with the user's account. The reliability of such a procedures is based
    on secondary factors, such as the integrity of the support and channels that are 
    used to receive and manage these authentication factors.
  prefs: []
  type: TYPE_NORMAL
- en: If the user's email account has been hacked or malware has been installed on
    a smartphone on which SMS messages are read automatically forwards the OTP codes
    to the attacker, the ineffectiveness of second authentication factors for security
    purposes is evident.
  prefs: []
  type: TYPE_NORMAL
- en: The assumption on which the effectiveness of secondary authentication factors
    is based, lies in the diversification of the supports used. In other words, it
    is suggested that the user does not keep all of their personal, sensitive information
    within a single support (following one of the most well-known risk management
    best practices that prescribe, *not to keep all our eggs in the same basket*).
  prefs: []
  type: TYPE_NORMAL
- en: If this diversification assumption is not verified, the reliability of the authentication
    procedures based on the second authentication factors also inevitably cease.
  prefs: []
  type: TYPE_NORMAL
- en: How to spot fake logins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From what we have said so far, it should be clear that the use of authentication
    procedures based on security tokens, such as passwords, SMS, OTPs, and others,
    should at least be integrated with automated anomaly detection procedures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the anomalies related to the management of user accounts is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Brute force access attempts, aimed at identifying the user's password by entering
    different passwords within a limited period of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simultaneous access from IP addresses belonging to different geographical areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of devices, software, and operating systems that are uncommon for the
    user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequency and typing speed that's incompatible with human operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obviously, the list of events to be monitored can increase and vary depending
    on the specific analysis context. However, it is important that, once fed a historical
    basis of representative events, there is automated detection of anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: Fake login management – reactive versus predictive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the representative events related to suspicious access have accumulated,
    it is important to understand the management strategy that is intended to be followed.
  prefs: []
  type: TYPE_NORMAL
- en: The more traditional one foresees the configuration of **reactive** alarm systems;
    that is, once possible unauthorized access is identified, the alarm system triggers
    an event (reaction) and the user account is automatically suspended or blocked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reactive strategy, although simple to implement, presents the following
    important side effects and drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Possibility of **denial of service** (**DoS**) attacks targeting legitimate
    users; the attacker damages the organization's reputation by simulating unauthorized
    access attempts to trigger the automatic blocking of user accounts issued by the
    alarm system increase disruption both to the users and the company that provides
    the services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reactive alarm system is usually set with default triggers associated with
    the relevant events. The event calibration takes place globally for all users
    and the system does not learn to recognize individual users on the basis of their
    specific behaviors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reactive strategy reads the reality through the rear-view mirror, that is,
    it assumes that the future is the same as the past and, therefore, doesn't automatically
    adapt to rapid changes in context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reactive strategy is usually based on the monitoring of anomalous activity
    peaks, that is, conduct is considered suspicious if it exceeds certain predetermined
    levels that are considered normal. This happens in the case of attacks that are
    conducted in **stealth** mode, which don't cause anomalous peaks of activity that
    exceed the alarm threshold. The attacker can remain hidden inside the system,
     and can perform information gathering and abusive operations undisturbed. One
    of the biggest large-scale user account violations hit the Yahoo! web portal.
    It was conducted in stealth mode and it took several years for the violations
    to be discovered and made known to the public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the contrary, a strategy to combat user accounts being compromised must consider
    changes in the context and scenario that may affect both the behavior of the user
    and the attacker, this requires the adoption of a predictive approach to anomaly
    detection, which, starting from the analysis of past data, is able to bring out
    the latent patterns, extrapolating the users' future behaviors, and identifying
    possible attempts at compromise or fraud on time.
  prefs: []
  type: TYPE_NORMAL
- en: Predicting the unpredictable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The task of predictive analytics is to reveal hidden patterns, identifying latent
    trends within the data. To this end, it is necessary to combine various data mining
    and **machine learning** (**ML**) methodologies in order to exploit sets of structured
    and unstructured data from the various heterogeneous information sources available
    to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: This way, it is possible to translate the raw data into actionable predictive
    responses, applying different automated learning algorithms to the data.
  prefs: []
  type: TYPE_NORMAL
- en: Different algorithms will obviously provide different results in terms of predictive
    accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in the previous chapters, classification algorithms are particularly
    suitable when we have to manage **discrete** answers (spam or ham), while if we
    need **continuous** outputs (that is, output values ​​characterized by greater
    granularity), the use of regression algorithms are our preferred choice.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, to manage large-scale classification tasks, we can consider the use
    of linear **support vector machines** (**SVMs**) and the use of **decision trees**
    and **random forests**, which usually provide the best results when we need to
    categorize data.
  prefs: []
  type: TYPE_NORMAL
- en: A special mention must then be given to unsupervised learning and clustering
    algorithms, which are particularly indicated in the exploration of latent and
    unknown patterns within the data, to carry out tasks such as the anomaly detection
    of suspicious user behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following a predictive approach in order to detect possible user account violations,
    translates into the choice of the correct features to monitor. These vary according
    to the threats that we believe may be more likely to occur.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the prevention of attacks that are conducted through brute forcing
    user credentials (user ID and password), it may be sufficient to monitor the number
    of failed access attempts (logins) and detect their growth rate and variations
    over time In other cases, the monitored element could be the frequent number of
    password changes, failed logins, password recovery, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: More difficult is the detection of possible stealth-mode attacks conducted by
    attackers who have the correct user password already available (because they had
    previously compromised the email account associated with the user account, thus
    exploiting password recovery procedures), or detect user sessions that are being
    hijacked (also known as **session hijacking** which consists of the abuse of a
    session regularly initiated by the legitimate user and exploited by the attacker
    to achieve fraudulent goals) without the apparent compromise of account credentials.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it may be useful to monitor the IP addresses associated with the
    user logins, in order to verify that access isn't made simultaneously from geographical
    areas that are distant from each other, or that access does not occur too frequently
    within a limited period of time, using devices and software uncommon for a specific
    user to use.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing fake account creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creation of user accounts is also an activity to monitor to prevent the
    possible spread of fake profiles within our platforms; just think of the illegal
    activities that these fake profiles can put in place by confusing and deceiving
    legitimate users and inducing them into behaviors that can lead to fraud or the
    compromising of their accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Events that need to be monitored can be traced back to the usual phases entailed
    in the creation of fake profiles, namely the request to activate new accounts
    and the identification of fake profiles among already existing accounts, which
    must be blocked or cancelled due to user misconduct.
  prefs: []
  type: TYPE_NORMAL
- en: A possible indicator of the anomalous creation of new accounts (which have a
    high probability of being fake profiles) is constituted by the activation of numerous
    new accounts being carried out by the same IP address within a short period of
    time (in less than an hour, for example).
  prefs: []
  type: TYPE_NORMAL
- en: In the case of existing accounts, an anomaly indicator that can reliably indicate
    the presence of a fake profile can be a large number of user posts delivered within
    a short period of time, which makes us think that a bot aimed at spreading spam
    on the platform is present.
  prefs: []
  type: TYPE_NORMAL
- en: Account reputation scoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The monitoring of user account activity must, therefore, take into account both
    newly created and existing accounts to prevent malicious activities carried out
    by existing accounts that are being compromised by the attacker. It is advisable
    to associate a measure of reputation (reputation scoring) estimated on the basis
    of the behavior held by the associated user. This reputation scoring also allows
    us to identify attacks conducted in stealth mode, thus preventing the risk of
    attacks going undetected. It does this by leveraging alarm systems calibrated
    to monitor anomalous and noisy peaks of activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the estimate of the reputation score associated with each user account,
    we can take into consideration various features:'
  prefs: []
  type: TYPE_NORMAL
- en: The number and frequency of user posts published for a period of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the user account via proxy, VPN, or other IP anonymization systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of uncommon user agents (such as scripts) to log in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user's speed in typing text on the keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These and other features can be validly taken into consideration to train our
    algorithms and dynamically estimate the reputation score of an individual user.
  prefs: []
  type: TYPE_NORMAL
- en: Classifying suspicious user activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have accumulated the necessary features to feed our datasets, we need
    to decide on what kind of strategy to follow in order to train our algorithms.
    In particular, the approach that is spontaneously adopted is that of supervised
    learning, and that is done by leveraging the information that's already in our
    possession and exploiting the previous classifications we made of accounts deemed
    to be suspicious. In fact, we could have already accumulated a number of user
    accounts in our blacklists, or reported them as suspicious using rule-based detection
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: As examples of positive training, we could consider the features associated
    with suspended or blacklisted accounts, whereas we could consider the features
    related to the still-enabled accounts as examples of negative training. We just
    need to choose the most suitable supervised learning algorithm for our use case
    and then proceed with the training phase, using the labels previously identified
    and associated with the positive and negative examples mentioned in the preceding
    paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: Supervised learning pros and cons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However logical it may seem to follow a supervised learning strategy, it is
    necessary to take into consideration the methodological risks involved.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main problems is that our algorithms will have difficulty in learning
    to recognize new cases of suspicious activity as they will have been conditioned
    by previous classification labels, which may be affected by systematic errors.
    In order to proceed with the retraining of our models, to detect new forms of
    suspicious activity, we would be forced to insert different classification rules
    from the previous ones, which should be able to correctly detect the new labels
    associated with new samples.
  prefs: []
  type: TYPE_NORMAL
- en: However, this does not prevent the risk of amplifying the systematic errors
    previously introduced in our models; if we have mistakenly included some classes
    of users within the blacklists (for example, all users who connect from IP addresses
    belonging to a specific geographical area, previously identified as the origin
    of the spam campaign) we will introduce false positives in our models, which will
    systematically feed themselves.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the distortive effect of these false positives, we should carry out
    an appropriate weighing of the samples to be submitted to our algorithms at each
    subsequent training phase.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering pros and cons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another approach that could be used to classify suspicious activities on user
    accounts is clustering. By grouping user accounts into homogeneous groups, based
    on the type of activity carried out (frequency of user posts, time spent on the
    platform, frequency of user logins, and more), it is also possible to identify
    suspicious activities that may concern multiple user accounts compromised by the
    same attacker, whose purpose could be, for example, to spread spam messages or
    publish unwanted posts by coordinating the activities of the various accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Clustering is, in fact, an approach that allows the detection of similarities
    (even hidden ones) within various user groups; once grouped into different clusters,
    we will need to determine which of these clusters are actually representative
    of suspicious activity, and, within each cluster, which accounts are involved
    in possible fraudulent activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, even in the case of clustering, it is necessary to carefully choose
    the type of algorithm to use: in fact, not all clustering algorithms are effective
    in detecting suspicious activity.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, clustering algorithms, such as k-means, require the correct determination
    of the number of clusters (by defining, in advance, the value of the parameter
    k, from which the algorithm takes its name), a feature that is not very suitable
    for the detection of suspicious user activities in practice, because we are not usually
    able to define the correct number of clusters in which the accounts must be grouped.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, algorithms such as k-means do not work with features expressed
    in the form of categories or binary classification values.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication with keystroke recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given the limitations and the methodological problems we mentioned earlier,
    in recent times we have increasingly resorted to new forms of detecting of suspicious
    user accounts using some forms of biometric recognition. These have been made
    more usable than in the past due to the increasing diffusion of neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: The same user authentication procedures are often implemented through biometric
    recognition, which supplements (if not replaces) the most traditional forms of
    password-based authentication.
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about biometric recognition, we can consider distinctive physical
    elements that can be reliably and exclusively traced back to a specific human
    user, such as the iris, face, fingerprints, voice, and more. Behaviors and habits
    can also be identified in patterns that may be reliably associated with the individual
    user; among these biometric behaviors, there is keystroke typing (also known as
    keystroke dynamics), which, like freehand writing, can help in reliably identifying
    different subjects.
  prefs: []
  type: TYPE_NORMAL
- en: Coursera Signature Track
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first concrete examples of user authentication using keystroke dynamics
    is represented by the Signature Track technology that was introduced by Coursera
    a few years ago to identify students who took part in tests as being valid for
    the achievement of statements of accomplishment at the end of course attendance.
  prefs: []
  type: TYPE_NORMAL
- en: The Signature Track technology that was adopted by Coursera, is described in
    the paper *MOOCs and Technology to Advance Learning and Learning Research, Offering
    Verified Credentials in Massive Open Online Courses* by Andrew Maas, Chris Heather,
    Chuong (Tom) Do, Relly Brandman, Daphne Koller, and Andrew Ng–Ubiquity Symposium ([http://ubiquity.acm.org](http://ubiquity.acm.org)),
    and intends to solve the problem of how to assign user credentials to each student
    so their identity can be verified reliably.
  prefs: []
  type: TYPE_NORMAL
- en: Signature Track is a process that allows the connection of the student's coursework
    to their real identity so, at the end of the course, students receive a verified
    certificate in their own name, issued by Coursera and the university that offered
    the course.
  prefs: []
  type: TYPE_NORMAL
- en: The certificate has a unique verification code, which also allows third parties
    (such as employers) to verify the completion of the course by the real candidate.
  prefs: []
  type: TYPE_NORMAL
- en: The distinctive features of Signature Track are not only related to authentication
    and identity verification procedures but also high-scale dimensions due to the
    growing number of students enrolled in Coursera; in fact, a Coursera course usually
    entails between 40,000 and 60,000 students. Therefore, the authentication and
    identity verification procedures are also characterized by high efficiency without
    the need for intervention by instructors or staff.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, unlike other web services (such as online banking or e-commerce),
    the management of verification and authentication of Coursera user accounts is
    complicated by the fact that users are tempted to give their login credentials
    to other parties so that they can complete the user's homework on their behalf.
    This peculiarity prompted Coursera to adopt two distinct biometric and photographic
    authentication methods based on facial recognition and typing patterns associated
    with individual students. During the enrollment phase, Coursera requires the student
    to provide a photo via a webcam, along with a copy of an ID document.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, during the enrollment phase, the student is asked to write a short
    sentence on their keyboard so that their own biometric keystroke profile can be
    recognized. This is done using keystroke dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: Keystroke dynamics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keystroke dynamics is based on the cadence and rhythm of keypress events that
    are considered unique for each student; however, these events are not directly
    usable by ML algorithms as they can be spoiled by a series of external random
    factors, such as interruptions, error corrections, or the use of keyboard special
    function keys such as *Shift* or *Caps Lock*.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is necessary to transform the corresponding raw data representing
    user digitations in a dataset of features that correctly represent the user's
    keyboard dynamics in order to clean up the data from random disturbing factors.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection with keystroke dynamics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first scientific studies regarding the use of keystroke dynamics
    for the purpose of anomaly detection is the paper *Comparing Anomaly-Detection
    Algorithms for Keystroke Dynamics*, by Kevin S. Killourhy and Roy A. Maxion. The
    authors of the study proposed to collect keystroke dynamics datasets to measure
    the performance of different detectors; they collected data entered by 51 subjects
    while typing 400 passwords each, submitting the data collected by 14 different
    algorithms, which evaluated performance in terms of user detection.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the study was to reliably identify impostors who steal the passwords
    of other users, based on different typing patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Impostors who try to authenticate using compromised passwords would be identified
    and promptly blocked on the basis of the different keystroke dynamics that characterize
    them compared to genuine users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the features that are used to determine keystroke dynamics are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Keydown-keydown**: This is the time that elapses between the key presses
    of consecutive keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyup-keydown**: This is the time that elapses between the release of one
    key and the press of the next'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hold**: This is the time that elapses between the press and release of each
    key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the raw data, the sets of timing features are extracted, which will be
    fed to the user detection algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Keystroke detection example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following is an example of the implementation of keystroke dynamics based
    on the dataset described in the study *Comparing anomaly-detection for keystroke
    dynamics* mentioned in the previous section; the dataset is also available for
    download in `.csv` format at [https://www.cs.cmu.edu/~keystroke/DSL-StrongPasswordData.csv](https://www.cs.cmu.edu/~keystroke/DSL-StrongPasswordData.csv).
  prefs: []
  type: TYPE_NORMAL
- en: 'As anticipated, the dataset consists of 51 subjects, each typing 400 passwords;
    also among the measures collected are these hold times (represented in the dataset
    with the label `H`):'
  prefs: []
  type: TYPE_NORMAL
- en: Keydown-keydown time (labeled as `DD`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyup-keydown time (labeled as `UD`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for the keystrokes detection script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The script''s results can be seen in the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32461b30-4ab1-45b0-a5fa-ec8093f38b4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The script continues with dataset splitting and then with the application of
    different classifiers, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can draw the confusion matrix for the `Multi Layer Perceptron` results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The confusion matrix, as plotted by the script, is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad4ed32a-a636-4a20-bccc-1b4910e4a447.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding code example, three different classifiers were used (available
    in the `scikit-learn` library), and their usage is shown in ascending order of
    prediction accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: We start with the `KNeighborsClassifier` clustering algorithm, passing through
    the support vector machine linear classifier, up to the **multilayer** **perceptron**
    (**MLP**) classifier, which is the classifier that reports the highest degree
    of accuracy in predictions, accounting for over 90%.
  prefs: []
  type: TYPE_NORMAL
- en: The graphical representation of the average keystroke latency per subject and
    the confusion matrix of the results obtained using the multilayer perceptron classifier
    are also shown.
  prefs: []
  type: TYPE_NORMAL
- en: User detection with multilayer perceptrons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why does the MLP classifier show considerably better results in terms of prediction
    accuracy?
  prefs: []
  type: TYPE_NORMAL
- en: The answer lies in the fact that it represents an **artificial neural network**
    (**ANN**).
  prefs: []
  type: TYPE_NORMAL
- en: ANNs constitute the fundamental element of deep learning and are at the base
    of high potential that characterizes deep learning algorithms, allowing, for example,
    the classification of enormous amounts of data, the performance of face and speech
    recognition, or beating a world chess champion such as Kasparov.
  prefs: []
  type: TYPE_NORMAL
- en: We met the perceptron in [Chapt](aaf59353-00b3-4625-8732-63aad02cc8e5.xhtml)[er
    3](aaf59353-00b3-4625-8732-63aad02cc8e5.xhtml), *Ham or Spam? Detecting Email
    Cybersecurity Threats with AI*;we have also seen its limitations regarding the
    classification scenarios in which data isn't linearly separable. However, the
    limitations of the single perceptron are overcome by multilayer perceptrons.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, an MLP is made up of multiple layers of artificial neurons, each implemented
    by perceptrons.
  prefs: []
  type: TYPE_NORMAL
- en: An MLP can have three or more layers of fully connected artificial neurons,
    which, as a whole, constitute a feedforward network. Importantly, an MLP can approximate
    any continuous mathematical function; we can, thus, add an arbitrary number of
    hidden layers that amplify its overall predictive power.
  prefs: []
  type: TYPE_NORMAL
- en: Biometric authentication with facial recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to authentication procedures using keyboard dynamics, authentication
    methods that use facial recognition are increasingly common.
  prefs: []
  type: TYPE_NORMAL
- en: These procedures benefit from the growing diffusion of neural networks, as well
    as the availability of hardware peripherals (such as embedded cameras), which
    come pre-installed on smartphones and tablets, PCs, and other devices.
  prefs: []
  type: TYPE_NORMAL
- en: Strange as it may seem, the idea of ​​using biometric evidence is not new and
    can be traced back to less recent times. While the use of fingerprints entered
    the field of police operations at the beginning of the last century, some basic
    forms of facial recognition date back to posters depicting wanted outlaws, which
    was very common in the Wild West, to the most recent identikits that are used
    by investigators.
  prefs: []
  type: TYPE_NORMAL
- en: There is no doubt, however, that in recent years, we have witnessed a real explosion
    in the use of biometric evidence; this is not accidental, given the growing spread
    of threats that are related not only to the use of the internet but also to the
    national security of countries fighting against terrorism.
  prefs: []
  type: TYPE_NORMAL
- en: Internet usage has, in many cases, facilitated anonymity, especially in those
    countries where network access controls are less systematic and reliable. If the
    checks that are carried out via IP addresses or through common access credentials
    consisting of a username and password are not sufficient, they must be complemented
    by more stringent forms of personal identity verification.
  prefs: []
  type: TYPE_NORMAL
- en: Facial recognition pros and cons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some ways, the use of facial recognition seems to be the preferred choice
    in the context of biometric procedures; taking advantage of the pervasive diffusion
    of devices such as smartphones and tablets equipped with high definition cameras,
    the use of facial recognition would seem to be the most logical and practical
    solution for verifying identity.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are some technical aspects that should not be underestimated.
  prefs: []
  type: TYPE_NORMAL
- en: For facial recognition to constitute a reliable method of identification, it
    is necessary to ensure that the images used are not distorted by environmental
    elements (such as reflections, shadows, incident light, and so on), which make
    it more difficult to use for recognition purposes; the angle of exposure of the
    face also has its relevance in determining reliability in facial recognition.
  prefs: []
  type: TYPE_NORMAL
- en: These problems are evident when attempting to use facial recognition on samples
    of faces extracted from images taken of crowds of individuals; the result is often
    that the number of false positives makes the recognition method ineffective.
  prefs: []
  type: TYPE_NORMAL
- en: The effectiveness and reliability of facial recognition is, therefore, greater
    when we succeed in using it in a controlled context, in which the potential distortive
    factors can be reduced to a minimum. It is smaller in the case in which we want
    to use it to make comparisons in the wild (as in the case of spotting individuals
    amid crowds of people).
  prefs: []
  type: TYPE_NORMAL
- en: 'We must not forget the underlying assumption on which the biometric procedures
    are based: the uniqueness, that is, the possibility of referring biometric evidence
    exclusively to a specific individual. This assumption is not always verified in
    the case of facial recognition.'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the obvious cases of face similarities (as in the case of lookalikes),
    the same individual can show changes in their face over time, due to physical
    caused affected by disease, stress, accidents, or simple aging; furthermore, as
    the population increases, the possibility of encountering spurious correlations
    increases accordingly. Due to the simple effect of the case, the amount of data
    to be taken into consideration to improve the reliability of the recognition procedures
    then grows disproportionally as the size of the dataset taken into consideration
    increases.
  prefs: []
  type: TYPE_NORMAL
- en: All this makes it particularly difficult to reliably train facial recognition
    algorithms, making the real-time use of facial recognition less practical.
  prefs: []
  type: TYPE_NORMAL
- en: If we think of the number of comparisons to be issued between the archived evidence
    and new images that accumulate over time, we immediately realize that an exhaustive
    verification that compares all possible combinations between them is not feasible.
  prefs: []
  type: TYPE_NORMAL
- en: As this happens in the field of the recognition of fingerprints, we should reduce
    the comparisons to just the distinctive features (known as **shinglings**) that
    are probabilistically considered reliable for identification purposes (in the
    case of fingerprints, these distinctive features take the name of minutiae, that
    is, areas of the fingerprints in which it is unusual to find evidence such as
    two ridges merging or a ridge ending) and using appropriate similarity measures,
    such as **locality-sensitive hashing** (**LSH**).
  prefs: []
  type: TYPE_NORMAL
- en: Despite the apparent practicality of facial recognition procedures, they are
    not free from problems and are related to the high number of false positives they
    can generate.
  prefs: []
  type: TYPE_NORMAL
- en: Eigenfaces facial recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among the most common facial recognition techniques is the one that goes under
    the name of **Eigenfaces**; this name, as we shall see, derives from the procedures
    used for its implementation, which make use of linear algebra.
  prefs: []
  type: TYPE_NORMAL
- en: In technical terms, facial recognition is a problem for classification, and
    consists of combining the names of the faces with the images that correspond to
    them.
  prefs: []
  type: TYPE_NORMAL
- en: We must not confuse facial recognition with facial detection, which is the set
    of procedures aimed at identifying the presence of a face within an image. Being
    a classification problem, facial recognition presupposes the existence of an archive
    of images representative of faces, to which we must match a name.
  prefs: []
  type: TYPE_NORMAL
- en: To this end, we must be able to compare the images in our archive and the new
    images of individuals to be subjected to facial recognition.
  prefs: []
  type: TYPE_NORMAL
- en: A direct solution to this problem could consist of reducing the images in as
    many feature vectors by calculating the reciprocal differences of the features
    present in the images. However, as we mentioned earlier, this approach would be
    impractical, given the high number of comparisons to be conducted in near real
    time.
  prefs: []
  type: TYPE_NORMAL
- en: By their nature, the images are characterized by a high number of **dimensions**
    (in the sense of different features) that they may consist of, and which may contain
    a lot of irrelevant information (constituting **white noise**) for the purposes
    of recognition. To make reliable comparisons, we need to reduce the number of
    dimensions to those strictly relevant for recognition purposes.
  prefs: []
  type: TYPE_NORMAL
- en: It is, therefore, no coincidence that the facial recognition technology that
    exploits Eigenfaces is based on an unsupervised dimensionality reduction algorithm,
    known as **principal component analysis** (**PCA**).
  prefs: []
  type: TYPE_NORMAL
- en: Dimensionality reduction with principal component analysis (PCA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PCA makes it possible to identify the representative variables (also called
    **principal components**) of a dataset, selecting those along which the data is
    more spread out.
  prefs: []
  type: TYPE_NORMAL
- en: To understand why we need to perform dimensionality reduction of high-dimensional
    data (such as images) and how we can achieve dimensionality reduction using PCA,
    we can consider the following descriptive example.
  prefs: []
  type: TYPE_NORMAL
- en: Let's imagine we need to distinguish the nutritional value of foods; which nutrients
    should we consider among vitamins, proteins, fats, and carbohydrates?
  prefs: []
  type: TYPE_NORMAL
- en: To answer this question, we must be able to identify which nutrient acts as
    the main component, that is, which nutrient (or combination of nutrients) should
    we consider to be characterizing elements of the various foods?
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that not all foods contain the same nutrients (vitamins are more
    present in vegetables, but not in meat). We can then consider as a main component
    a set of different nutrients, for example by adding to vitamins (present in vegetables)
    nutrients such as fats (present in meat).
  prefs: []
  type: TYPE_NORMAL
- en: We will then add (or remove) nutrients to identify the best combination of elements
    that can serve as the main component, that is, the component along which the data
    is the most spread out.
  prefs: []
  type: TYPE_NORMAL
- en: We must also bear in mind that certain nutrients may be highly correlated, meaning
    that they move in the same direction, while other nutrients move in the opposite
    direction (as the presence of vitamins increases, the level of fat is reduced;
    to measure the degree of correlation, we can use the linear correlation coefficient
    R).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we can identify elements characterized by a high correlation, we can reduce
    the number of variables taken into consideration in the definition of the main
    component; this is exactly the purpose of the PCA: to obtain dimensionality reduction
    (the reduction of the number of dimensions that characterizes a given dataset).'
  prefs: []
  type: TYPE_NORMAL
- en: Principal component analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In formal terms, PCA consists of selecting the hyperplane of space along which
    the data (represented by points in the space) are mostly spread out; this translates,
    in mathematical terms, into the search for the axis in which the variance assumes
    the maximum value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the principal components of a dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32087297-07e4-4a5b-b5d6-fef3b21a5f8a.png)'
  prefs: []
  type: TYPE_IMG
- en: '(Image credits: Wikipedia, at https://en.wikipedia.org/wiki/File:GaussianScatterPCA.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: To identify this axis, we will need to calculate the covariance matrix associated
    with our data, identifying the largest Eigenvectors within the matrix, which correspond
    to the axes associated with the main components. By doing this we can reduce the
    dimensionality of the data.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of Eigenvectors (as well as the associated concept of Eigenvalues)
    derives from linear algebra and gives the name to the facial recognition technique
    based on Eigenfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will briefly analyze these concepts, showing their mathematical formalization.
  prefs: []
  type: TYPE_NORMAL
- en: Variance, covariance, and the covariance matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand the concepts of Eigenvectors and Eigenvalues, we must first recall
    some mathematical definitions as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variance**: This measures the degree of dispersion existing within the data
    and is represented by the average of the deviations of the data with respect to
    their average, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3ec30de1-9e1c-4fb1-96e0-0e96711a1134.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Covariance**: This measures the degree of linear correlation between two
    variables; it is represented mathematically as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/558b8ef6-3b17-44d6-a455-337f0b88bfa3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Covariance matrix**: This is the matrix that contains the covariances calculated
    on each ordered pair of data belonging to a dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can calculate the values of the variance, of the covariance, and represent
    the matrix of covariances using the Python library NumPy. In the following example,
    we show a covariance matrix represented by a NumPy array of lists (representing
    the vectors) and finally, we print the covariance matrix using the instruction `print(np.cov(X).T)` as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Eigenvectors and Eigenvalues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now able to present the concepts of Eigenvectors and Eigenvalues, which come
    from linear algebra.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Eigenvector of a square matrix, *A,* is represented by that vector *v, *which
    respects the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c64127e-fd84-46c0-8d77-32f00f86273f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the same way, the value λ (represented by a scalar) constitutes the corresponding
    Eigenvalue of the vector *v*.
  prefs: []
  type: TYPE_NORMAL
- en: It should be kept in mind that the Eigenvectors (and the corresponding Eigenvalues)
    can be calculated only for square matrices, and not all square matrices have Eigenvectors
    and Eigenvalues.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the relevance of the Eigenvectors and Eigenvalues for the PCA,
    we must remember that a vector (such as the Eigenvector) represents an oriented
    element (characterized by a direction) in the linear space, while a scalar (such
    as the Eigenvalue) represents a measure of intensity (without direction).
  prefs: []
  type: TYPE_NORMAL
- en: The equation shown previously, therefore, represents a linear transformation;
    multiplying the Eigenvector *v* by the matrix *A* does not change the direction
    of *v* (which remains unchanged), only its intensity, which is determined by the
    value of the Eigenvalue λ; in practice. It is as if we were rescaling the *v*
    vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following graph shows the rescaling of a vector due to Eigenvalue multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc2c563a-df91-463d-8c9b-06ad6f16a7a2.png)'
  prefs: []
  type: TYPE_IMG
- en: '(Image credits: Wikipedia, at https://en.wikipedia.org/wiki/File:Eigenvalue_equation.svg)'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, to identify the principal components within a covariance matrix,
    we need to look for the Eigenvectors that correspond to the higher Eigenvalues
    values. In this case, we can use the NumPy library to carry out our calculations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s imagine we have the following square matrix, *A*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/592730cf-7020-441c-9248-3e49a334f288.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The calculation of Eigenvectors and Eigenvalues (if they exist) is reduced
    to the following NumPy instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Eigenfaces example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, here we come to the application of the PCA technique for facial recognition.
    In the following example, we will associate each image in our archive with the
    name corresponding to the person represented in the image.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we need to reduce the dimensionality of the image (consisting of
    the numerous features corresponding to the different characteristics of the pixels)
    to the main components, that is, the features most relevant to recognition purposes.
    These main components are Eigenfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some Eigenfaces are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3105f58c-c7fc-4805-b7a1-38a1b6b65d15.png)'
  prefs: []
  type: TYPE_IMG
- en: '(Image credits: Wikipedia, at https://en.wikipedia.org/wiki/File:Eigenfaces.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Each image of our dataset can, therefore, be interpreted as a combination of
    these Eigenfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The image dataset consists of the **labeled faces in the wild** (**LFW**) archive
    (Gary B. Huang, Manu Ramesh, Tamara Berg, and Erik Learned-Miller—*Labeled Faces
    in the Wild: A Database for Studying Face Recognition in Unconstrained Environments*, University
    of Massachusetts, Amherst, Technical Report 07-49, October, 2007), which is available
    for download at [http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz.](http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz)'
  prefs: []
  type: TYPE_NORMAL
- en: Also in this example, as in the previous of keyboard dynamics, we will use an
    MPL classifier for image classification.
  prefs: []
  type: TYPE_NORMAL
- en: 'The outcome of the MLP classifier is shown via `classification_report()`, which
    shows us the values of the precision, recall, and F1 score metrics as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output is returned by executing the preceding script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has illustrated the different techniques that can be used to increase
    the effectiveness of user authentication procedures and to promptly detect the
    possible presence of compromised user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: These techniques are based on the use of biometric evidence, such as facial
    recognition, or biometric behavior, such as keyboard dynamics, which can be implemented
    using AI algorithms that exploit neural networks, such as MLP.
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen how to reduce the dimensionality of the data to their main
    components by using PCA.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the advantages and disadvantages associated with the use of biometric
    evidence for user authentication and recognition were highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about fraud prevention using cloud AI solutions.
  prefs: []
  type: TYPE_NORMAL
