["```\nimport numpy as np\nimport matplotlib.pyplot as plt\n```", "```\n%matplotlib inline\n```", "```\ndef loadImageFile(fileimage):\n  f = open(fileimage, \"rb\")\n\n  f.read(16)\n  pixels = 28*28\n  images_arr = []\n\n  while True:\n    try:\n      img = []\n      for j in range(pixels):\n        pix = ord(f.read(1))\n        img.append(pix / 255)\n      images_arr.append(img)\n    except:\n      break\n\n  f.close()\n  image_sets = np.array(images_arr)\n  return image_sets\n\n```", "```\ntest_images = loadImageFile(\"t10k-images-idx3-ubyte\")\n```", "```\ndef gen_image(arr):\n two_d = (np.reshape(arr, (28, 28)) * 255).astype(np.uint8)\n plt.imshow(two_d, interpolation='nearest', cmap='gray')\n plt.show()\n return\n```", "```\ngen_image(test_images[0])\n```", "```\ndef loadLabelFile(filelabel):\n  f = open(filelabel, \"rb\")\n\n  f.read(8)\n\n  labels_arr = []\n\n  while True:\n    row = [0 for x in range(10)]\n    try:\n      label = ord(f.read(1))\n      row[label] = 1\n      labels_arr.append(row)\n    except:\n      break\n\n  f.close()\n  label_sets = np.array(labels_arr)\n  return label_sets\n```", "```\ntest_labels = loadLabelFile(\"t10k-labels-idx1-ubyte\")\nprint(test_labels[0])\n```", "```\n[0 0 0 0 0 0 0 1 0 0]\n```", "```\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K\nfrom keras.layers.normalization import BatchNormalization\n```", "```\npip3 install keras \n```", "```\ndef loadImageFile(fileimage):\n  f = open(fileimage, \"rb\")\n\n  f.read(16)\n  pixels = 28*28\n  images_arr = []\n\n  while True:\n    try:\n      img = []\n      for j in range(pixels):\n        pix = ord(f.read(1))\n        img.append(pix / 255)\n      images_arr.append(img)\n    except:\n      break\n\n  f.close()\n  image_sets = np.array(images_arr)\n  return image_sets\n```", "```\ndef loadLabelFile(filelabel):\n  f = open(filelabel, \"rb\")\n  f.read(8)\n\n  labels_arr = []\n\n  while True:\n    row = [0 for x in range(10)]\n    try:\n      label = ord(f.read(1))\n      row[label] = 1\n      labels_arr.append(row)\n    except:\n      break\n\n  f.close()\n  label_sets = np.array(labels_arr)\n  return label_sets\n```", "```\ntrain_images = loadImageFile(\"train-images-idx3-ubyte\")\ntrain_labels = loadLabelFile(\"train-labels-idx1-ubyte\")\n\ntest_images = loadImageFile(\"t10k-images-dx3-ubyte\")\ntest_labels = loadLabelFile(\"t10k-labels-idx1-ubyte\")\n```", "```\n(60000, 784)\n```", "```\nx_train = train_images.reshape(train_images.shape[0], 28, 28, 1)\nx_test = test_images.reshape(test_images.shape[0], 28, 28, 1)\n```", "```\n(60000, 28, 28, 1)\n```", "```\ny_train = train_labels\ny_test = test_labels\n```", "```\nmodel = Sequential()\n```", "```\nmodel.add(Conv2D(32, (3, 3), input_shape=(28,28,1)))\n```", "```\nmodel.add(Activation('relu'))\n```", "```\nBatchNormalization(axis=-1)\n```", "```\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nBatchNormalization(axis=-1)\nmodel.add(Conv2D(64,(3, 3)))\nmodel.add(Activation('relu'))\nBatchNormalization(axis=-1)\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Flatten())\n\nBatchNormalization()\nmodel.add(Dense(512))\nmodel.add(Activation('relu'))\nBatchNormalization()\nmodel.add(Dropout(0.2))\n```", "```\nmodel.add(Dense(10))\n```", "```\nmodel.add(Activation('softmax'))\n```", "```\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.Adam(),\n              metrics=['accuracy'])\n```", "```\nmodel.fit(x_train, y_train,\n          batch_size=100,\n          epochs=10,\n          verbose=2,\n          validation_split=0.2)\n```", "```\nscore = model.evaluate(x_test, y_test, verbose=1)\n\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n```", "```\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n```", "```\nmodel.save_weights('weights.h5')\n```", "```\npip3 install tensorflow keras pillow flask\n```", "```\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/\")\ndef index():\n    return \"Hello World!\"\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n```", "```\npython flask_app.py\n```", "```\nfrom flask import Flask, request\n```", "```\nfrom scipy.misc import imread, imresize\nimport numpy as np\n```", "```\nfrom keras.models import model_from_json\nimport tensorflow as tf\n```", "```\njson_file = open('model.json','r')\nmodel_json = json_file.read()\njson_file.close()\nmodel = model_from_json(model_json)\n\nmodel.load_weights(\"weights.h5\")\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\ngraph = tf.get_default_graph()\n```", "```\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return \"Oops, nothing here!\"\n```", "```\nimport re\nimport base64\n\ndef stringToImage(img):\n    imgstr = re.search(r'base64,(.*)', str(img)).group(1)\n    with open('image.png', 'wb') as output:\n        output.write(base64.b64decode(imgstr))\n```", "```\n@app.route('/predict/', methods=['POST'])\ndef predict():\n    global model, graph\n\n    imgData = request.get_data()\n    try:\n        stringToImage(imgData)\n    except:\n        f = request.files['img']\n        f.save('image.png')\n\n    x = imread('image.png', mode='L')\n    x = imresize(x, (28, 28))\n    x = x.reshape(1, 28, 28, 1)\n\n    with graph.as_default():\n        prediction = model.predict(x)\n        response = np.argmax(prediction, axis=1)\n        return str(response[0])\n```", "```\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=80)\n    app.run(debug=True)\n```", "```\n@app.route('/')\ndef index():\n    return render_template(\"index.html\")\n```", "```\npython flask_app.py\n```", "```\ncurl -X POST -F img=@\"path_to_file\" http://localhost/predict/\n```", "```\nfrom flask import Flask, request, render_template\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>MNIST CNN</title>\n  </head>\n\n  <body>\n    <h1>MNIST Handwritten Digits Prediction</h1>\n\n    <form>\n      <input type=\"file\" name=\"img\"></input>\n      <input type=\"submit\"></input>\n    </form>\n    <hr>\n    <h3>Prediction: <span id=\"result\"></span></h3>\n\n    <script src='http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>\n\n    <script src=\"img/{{ url_for('static',filename='index.js') }}\"></script>\n\n</body>\n</html>\n```", "```\n$(\"form\").submit(function(evt){ \n    evt.preventDefault();\n    var formData = new FormData($(this)[0]);\n    $.ajax({\n        url: '/predict/',\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        enctype: 'multipart/form-data',\n        processData: false,\n        success: function (response) {\n            $('#result').empty().append(response);\n        }\n    });\n    return false;\n});\n```"]